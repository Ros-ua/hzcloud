import re
import sys
import asyncio
import random
from random import randint
from telethon import events
from addons import qHash

class RF:
    bot_id = 577009581
    is_run = False
    rf_message = None
    is_in_caves = is_in_gh = is_has_hil = is_has_res = False
    cave_leader_id = 715480502
    my_health = my_max_health = 5117
    hp = "/bind_wear_1723376879927d"
    tomat_id = 278339710
    kroha_id = 353501977
    tamplier_id = 681431333
    john_id = 562559122
    your_name = "Ros_Hangzhou"

    def __init__(self, client):
        self.client = client
        self.group = [[False, False, False, False] for _ in range(6)]
        self.my_group_pos = -1
        self.health_re = re.compile(r"–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ \D+(\d+)/(\d+)")
        self.battle_re = re.compile(r"^–°—Ä–∞–∂–µ–Ω–∏–µ —Å .*$")
        self.damage_re = re.compile(r"(\d+)$")
        self.last_talisman_info = None  # (type, level)
        self.players = {
            "–ù–µ–∂–Ω—ã–π üçÖ": self.tomat_id,
            "üêæ·è¶·éÆ·éßœá·èó": self.kroha_id,
            "ùï¥ùñÜùñíùñïùñëùñéùñäùñó": self.tamplier_id,
            "John Doe": self.john_id
        }
        self.cmd_altar = None
        self.altar_dict = {
            0: "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ò—Å–∞",
            1: "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ",
            2: "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –ò—Å—Å",
            3: "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –î–∞–≥–∞–∑",
            4: "ü§ñ–ê–ª—Ç–∞—Ä—å –¢–∏—Ä",
            5: "ü§ñ–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏"
        }
        self.is_nacheve_active = self.in_battle = False  # –§–ª–∞–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ nacheve –∏ –±–æ—è
        self.is_cave_leader = True
        self.kroha_pativod()



    def isIdCompare(self, id):
        return id == self.bot_id

    def isCaveLeaderIdCompare(self, id):
        return id == self.cave_leader_id

    def reset_health(self):
        self.my_health = self.my_max_health
        self.in_battle = False
        print(f"–ó–¥–æ—Ä–æ–≤—å–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {self.my_health}")

    async def checkHealth(self, lstr) -> bool:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è
        if self.updateHealth(lstr[0]):
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–°—Ä–∞–∂–µ–Ω–∏–µ —Å"
        if not self.isBattleStart(lstr[0]):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±–æ–π —Å —ç–ª–∏—Ç–Ω—ã–º –º–æ–±–æ–º –∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –±–æ–π
        if self.skipBattle(lstr):
            return False

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–µ –∏–ª–∏ –æ–± –∏–≥—Ä–æ–∫–µ
        lstr = lstr[2:]

        # –ü–æ–¥—Å—á–µ—Ç —É—Ä–æ–Ω–∞, –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫—É
        self.calculateDamage(lstr)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏
        if self.isPlayerDead():
            return True  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ö–∏–ª–∞
        await self.autoHeal()

        return True

    def updateHealth(self, line: str) -> bool:
        match = self.health_re.search(line)
        if match:
            new_health = int(match.group(1))
            new_max_health = int(match.group(2))
            print(f"–°—Ç–∞—Ä–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}/{self.my_max_health}")
            self.my_health = new_health
            self.my_max_health = new_max_health
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.my_health}/{self.my_max_health}")
            return True
        return False

    def isBattleStart(self, line: str) -> bool:
        return bool(self.battle_re.search(line))

    def skipBattle(self, lstr: list) -> bool:
        return any(phrase in lstr[0] for phrase in ["–≠–ª–∏—Ç–Ω—ã–π", "–≠–ª–∏—Ç–Ω–∞—è"]) or "–≠–Ω–µ—Ä–≥–∏—è" in lstr[-1]

    def calculateDamage(self, lstr: list):
        if not self.in_battle:
            return
        for str_line in lstr:
            if self.my_health <= 0:
                print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –º–µ—Ä—Ç–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞")
                self.in_battle = False
                return
            if not str_line or "–¢—ã " in str_line or " –Ω–∞–Ω–µ—Å —É–¥–∞—Ä " not in str_line:
                continue
            match = self.damage_re.search(str_line)
            if match:
                self.my_health -= int(match.group(1))
                print(f"–ü–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω: {match.group(1)}, —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}")

    def isPlayerDead(self) -> bool:
        if self.my_health <= 0:
            print("–ó–¥–æ—Ä–æ–≤—å–µ —Ä–∞–≤–Ω–æ –∏–ª–∏ –º–µ–Ω—å—à–µ –Ω—É–ª—è. –ò–≥—Ä–æ–∫ —É–º–µ—Ä.")
            self.reset_health()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            return True
        return False

    async def autoHeal(self):
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–ª–µ—á–µ–Ω–∏–µ–º: {self.my_health}")
        if self.my_health <= 800 and self.is_has_hil :
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ ({self.my_health}). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ö–∏–ª.")
            await self.rf_message.click(0)
            self.is_has_hil = False
        else:
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ–µ ({self.my_health}). –õ–µ—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    async def msg_parce(self, message):
        if not self.is_run:
            return

        lstr = message.message.split('\n')
        val = qHash(lstr[0])
        if val == 0:
            return
        print(val, lstr[0])

        # –≤ –ø–µ—â–µ—Ä–∞—Ö
        if any(phrase in lstr[0] for phrase in [
            "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", 
            "–≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã", 
            "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ –ø–µ—â–µ—Ä—ã –Ω–∞ —Ñ—É–Ω–∏–∫—É–ª–µ—Ä–µ",
        ]):
            self.is_in_caves = True
            self.is_has_hil = True
            await asyncio.sleep(randint(4, 10))
            await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
            print("–≤ –ø–µ—â–µ—Ä–∞—Ö")
        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤",
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–∫—Ä–µ—à–∞—Ç—å—Å—è",
        ]):
            self.reset_health()
            print(self.my_health, self.my_max_health)
        elif any(phrase in line for line in lstr for phrase in [
            "–û–∂–∏–¥–∞–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        ]):
            await asyncio.sleep(randint(6, 10))
            await self.rf_message.click(1)
            self.reset_health()
            print(self.my_health, self.my_max_health)
        elif "–°—Ä–∞–∂–µ–Ω–∏–µ —Å" in lstr[0] and not any("–†—é–∫–∑–∞–∫" in line for line in lstr):
            self.in_battle = True   
        elif "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã —É–º–µ—Ä" in lstr:
            self.in_battle = False     
        elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –∑–∞–º–µ—Ä–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç" in lstr[0]:
            await asyncio.sleep(1)
            await self.rf_message.click(2)
        elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Å–∏–ª—ã" in lstr[0]:
            await asyncio.sleep(1)
            await self.rf_message.click(2)
        elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–±—É–¥–µ—Ç –≤ –≥–µ–Ω. —à—Ç–∞–± —á–µ—Ä–µ–∑" in lstr[0]:
            print("—á—É–≤–∞—á–æ–∫, —Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª –ø–µ—â–µ—Ä—É")
            self.is_in_caves = False
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, RF.hp)  # –ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è –¥–ª—è –º–æ–±–æ–≤
            await self.check_arrival()
        elif lstr[0].startswith("–°–æ—Å—Ç–∞–≤:"):
            print("—á—Ç–æ —Ç–∞–º –ø–æ —Å–æ—Å—Ç–∞–≤—É")
            await self.check_group_list(lstr)
            await asyncio.sleep(randint(10, 20))
            await self.vihod_s_caves(lstr)

        elif lstr[0].endswith("–Ω–µ –≤ –≥–µ–Ω. —à—Ç–∞–±–µ]"):
            await message.forward_to(-1001323974021)
            # –ò—â–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            players_not_in_gh = re.findall(r'(–ù–µ–∂–Ω—ã–π üçÖ|üêæ·è¶·éÆ·éßœá·èó|ùï¥ùñÜùñíùñïùñëùñéùñäùñó|John Doe)', lstr[0])
            if players_not_in_gh:
                for player in players_not_in_gh:
                    if player in self.players:
                        print(f"{player} –Ω–µ –≤ –≥–µ–Ω. —à—Ç–∞–±–µ")
                        await self.client.send_message(self.players[player], "–î–∞–≤–∞–π—Ç–µ –≤ –≥–µ–Ω. —à—Ç–∞–±")
            await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")  # –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª–æ–∫–∞—Ü–∏—é
        elif "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å –≥—Ä—É–ø–ø—É" in lstr[0]:
            await self.client.send_message(self.bot_id, "22")
            


        #     —Ç–µ—Å—Ç—ã
        # elif "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ" in lstr[0]:
        #     print ("bag bag bag")
        #     await self.client.send_message(715480502, "bag bag bag")
       
       
        # –Ω–∞ —Å—Ç—Ä–∞–∂–µ
        elif "–ë–æ–π —Å –±–æ—Å—Å–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ." in lstr[0]:
            print("–¥–æ—à–µ–ª –¥–æ —Å—Ç—Ä–∞–∂–∞")
            await self.straj()
        elif "–ë–æ—Å—Å –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è. –ü—Ä–æ—Ö–æ–¥ –≤ –ª–æ–∫–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç!" in lstr[0]:  # –µ—Å–ª–∏ —É–º–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–∂–µ –∏ —Å–Ω–æ–≤–∞ —Ö–æ—á–µ—à—å –∏–¥—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–∂–∞
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")

        # –Ω–∞ —á–≤
        elif any(phrase in line for line in lstr for phrase in [
            "–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏",
            "–ê–ª—Ç–∞—Ä—å –¢–∏—Ä",
        ]):
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "ü§ñ –¢–µ—Ä–º–∏–Ω–∞–ª Aquilla")
        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã –ø—Ä–∏–±—ã–ª –∫ –∞–ª—Ç–∞—Ä—é",
             "–±–æ–π –∑–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
             "—Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É —Ç–æ–ª—å–∫–æ –∏–∑ –∞–ª—Ç–∞—Ä—è",
        ]):
            await self.nacheve()
        elif "–•—Ä–∞–Ω–∞. –¢—ã –±—ã–ª —É–±–∏—Ç!" in lstr[0]:
            await self.gokragi()
        elif "–¢—ã –ø—Ä–∏–±—ã–ª –≤ –∫—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã" in lstr[0]:
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "‚õè–†—É–¥–Ω–∏–∫")
        elif "[–Ω–∞ –≤—Ä–µ–º—è –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ö–æ–¥ –∑–∞–∫—Ä—ã—Ç]" in lstr[0]:
            await asyncio.sleep(1)
            altars = [ "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –î–∞–≥–∞–∑", "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ", "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ò—Å–∞", "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –ò—Å—Å" ]
            # –∞–ª—Ç–∞—Ä–∏ "ü§ñ–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏", "ü§ñ–ê–ª—Ç–∞—Ä—å –¢–∏—Ä", 
            await self.client.send_message(self.bot_id, random.choice(altars))
        elif "–¢—ã –ø—Ä–∏–±—ã–ª –≤ ‚õè—Ä—É–¥–Ω–∏–∫." in lstr[0]:
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üñ≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ê–ë–£")
        # elif any(phrase in lstr[0] for phrase in ["–¢—ã –ø—Ä–∏–±—ã–ª –∫ –∞–ª—Ç–∞—Ä—é - üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ", "–¢—ã –ø—Ä–∏–±—ã–ª –∫ –∞–ª—Ç–∞—Ä—é - üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ò—Å–∞"]):
        #     await asyncio.sleep(1)
        #     await self.client.send_message(self.bot_id, "üë©‚ÄçüöÄ –¢–µ—Ä–º–∏–Ω–∞–ª Basilaris")


        # –Ω–∞ –º–æ–±–∞—Ö
        elif any(phrase in lstr[0] for phrase in ["–ø–æ–π—Ç–∏ –≤ 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏", "—á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø–µ—â–µ—Ä—ã?"]):
            await asyncio.sleep(1)
            await message.click(0)
        elif "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?" in lstr[-1]:
            print("–±—É–¥–µ–º –±–∏—Ç—å")
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üî™ –ê—Ç–∞–∫–æ–≤–∞—Ç—å")
        elif any(phrase in line for line in lstr for phrase in ["–≠–Ω–µ—Ä–≥–∏—è: üîã0/5", "[–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏]"]):
            print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏")
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
            await self.gokragi()
        elif any(f"–≠–Ω–µ—Ä–≥–∏—è: üîã{i}/5" in lstr[-1] for i in range(1, 5)):
            print("–µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è")
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
            await self.check_arrival()
        elif any(f"+1 –∫ —ç–Ω–µ—Ä–≥–∏–∏ üîã{i}/5" in lstr[0] for i in (4, 5)):

            if self.is_in_caves:
                if self.is_cave_leader:
                    print("–í–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –ø–µ—â–µ—Ä–∞—Ö –∏–ª–∏ –µ—Å–ª–∏ —Ç—ã –ª–∏–¥–µ—Ä –ø–µ—â–µ—Ä—ã")
                    await asyncio.sleep(1)
                    await self.rf_message.click(2)
                else: # –ï—Å–ª–∏ –≤ –ø–µ—â–µ—Ä–∞—Ö, –Ω–æ –Ω–µ –ª–∏–¥–µ—Ä
                    print("–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –≥—Ä—É–ø–ø—É")
                    # await message.forward_to(-1001323974021) #59 60
                    await message.forward_to(2220238697) # –±–µ–∑ –í
            else:
                print("–í–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤–Ω–µ –ø–µ—â–µ—Ä")
                await asyncio.sleep(1)
                await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                await self.check_arrival()




        # # –¥–∞–Ω–∂–∏
        # elif any(f"+1 –∫ —ç–Ω–µ—Ä–≥–∏–∏ üîã{i}/5" in lstr[0] for i in (4, 5)):
        #     await asyncio.sleep(1)
        #     await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        #     await self.check_arrival_dange()
        # elif "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–π—Ç–∏ –¥–∞–Ω–∂" in lstr[0]:
        #     await asyncio.sleep(1)
        #     await message.click(0)
        #     await self.dangego()
        # elif "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?" in lstr[-1]:
        #     print("–±—É–¥–µ–º –±–∏—Ç—å")
        #     await asyncio.sleep(1)
        #     await self.client.send_message(self.bot_id, "üî™ –ê—Ç–∞–∫–æ–≤–∞—Ç—å")
        # elif any(f"–≠–Ω–µ—Ä–≥–∏—è: üîã{i}/5" in lstr[-1] for i in range(1, 5)):
        #     print("–µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è")
        #     await asyncio.sleep(1)
        #     await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        #     await self.gokragi()  # –∑–∞–º–µ–Ω–∏–ª –Ω–∞ –∫—Ä–∞–≥–∏
        # elif "–≠–Ω–µ—Ä–≥–∏—è: üîã0/5" in lstr[-1] or "[–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏]" in lstr[0]:
        #     print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏")
        #     await asyncio.sleep(1)
        #     await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        #     await self.gokragi()
        
        # misc
        elif val == 1550650437:  # ‚öí –ö—É–∑–Ω—è - 5 —É—Ä.
            await self.craft_rec(lstr)
        elif val == 2509085174:  # –†–µ—Ü–µ–ø—Ç—ã:
            return
        elif "[–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –≥–µ–Ω. —à—Ç–∞–±–∞]" in lstr[0]:
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
            await self.check_arrival()
        elif any(phrase in lstr[0] for phrase in [
            "‚ö†Ô∏è–ü—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–≥—Ä–µ",
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏."
        ]):
            sys.exit()

        if not message.buttons:
            if val == 3190963077:  # ‚ú®–î–æ–±—ã—á–∞:
                await message.forward_to(-1001323974021) #–≥—Ä—É–ø–ø–∞ 59
                await message.forward_to(2220238697) #–≥—Ä—É–ø–ø–∞ –±–µ–∑ –í
            else:
                await self.checkHealth(lstr)
            return

        if val == 3190963077:  # ‚ú®–î–æ–±—ã—á–∞:
            self.rf_message = message
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
            return


    async def check_arrival_dange(self):  # —Ö–æ–¥–∏–º –¥–∞–Ω–∂–∏
        print("check_arrival_dange")

        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any(condition in lstr[0] for condition in ["–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.", "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.", "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº"]):
                    await self.client.send_message(self.bot_id, "/go_dange_10014")  # –∏–¥—Ç–∏ –¥–∞–Ω–∂
                    return
            await asyncio.sleep(1)

    async def dangego(self):
        while True:
            await asyncio.sleep(10)
            dungeon_completed = False
            energy_low = False
            is_dead = False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_messages = await self.client.get_messages(self.bot_id, limit=3)
            print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(last_messages)}")

            for index, message in enumerate(last_messages):
                lstr = message.message.split('\n')

                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ lstr[0] –∏ lstr[-1] –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {index + 1}:")
                print(f"    lstr[0]: {lstr[0]}")
                print(f"    lstr[-1]: {lstr[-1]}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏–π
                if any(phrase in line for line in lstr for phrase in [
                    "–£ –∫–æ–≥–æ-—Ç–æ –≤ –≥—Ä—É–ø–ø–µ –º–µ–Ω—å—à–µ 2 –µ–¥–∏–Ω–∏—Ü —ç–Ω–µ—Ä–≥–∏–∏",
                    "–Ω–µ –≤ –≥–µ–Ω. —à—Ç–∞–±–µ",
                    "—É–∂–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ"
                ]):
                    print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏, –∫—Ç–æ-—Ç–æ –Ω–µ –≤ –≥—à –∏–ª–∏ —É–∂–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ")
                    energy_low = True
                    break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if any(phrase in line for line in lstr for phrase in ["–¢—ã –ø–æ–≥–∏–± –æ—Ç", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–π—Ç–∏ –¥–∞–Ω–∂"]):
                    print("–¢—ã –ø–æ–≥–∏–± –Ω–∞ –¥–∞–Ω–∂–µ")
                    is_dead = True
                    break

                if any("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏" in line for line in lstr):
                    print("–≤—Å–µ –≤ –≥—à –±—ã–ª –¥–∞–Ω–∂ –∏ –∂–∏–≤ –Ω–∞ –¥–∞–Ω–∂–µ")
                    dungeon_completed = True
                    continue

            if energy_low:
                print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –∏–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–µ –≤ –≥—à")
                await asyncio.sleep(1)
                await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
                return

            if is_dead:
                print("—É–º–µ—Ä –Ω–∞ –¥–∞–Ω–∂–µ")
                await self.check_arrival_dange()
                print("–í—ã–ø–æ–ª–Ω–µ–Ω check_arrival_dange() –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏")
                return

            if dungeon_completed:
                print("–≤—Å–µ –≤ –≥—à –±—ã–ª –¥–∞–Ω–∂ –∏ –∂–∏–≤ –Ω–∞ –¥–∞–Ω–∂–µ")
                await asyncio.sleep(2)
                await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                await self.wait_for_health_refill()
                await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                return

            print("–ù–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(1)


    async def check_arrival(self):  # —Ö–æ–¥–∏–º –Ω–∞ –º–æ–±–∞
        print("check_arrival")

        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any(phrase in lstr[0] for phrase in [
                    "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –≥–µ–Ω. —à—Ç–∞–±!" ,
                    "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº"
                ]):    
                    await asyncio.sleep(2)
                    await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await self.wait_for_health_refill()
                    await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
                    return
            await asyncio.sleep(1)

    async def gokragi(self):  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —á–≤ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏
        print("–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —á–≤ –ø–æ–±–µ–¥–∞ –∏–ª–∏ —Ä–µ—Å")

        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any(phrase in lstr[0] for phrase in ["–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.", "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.", "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº", "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –≥–µ–Ω. —à—Ç–∞–±!"]):  
                    await asyncio.sleep(2)
                    await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await self.wait_for_health_refill()
                    await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                    return
            await asyncio.sleep(1)








    async def parce_4v_logs(self, msg_text):

        print("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã parce_4v_logs.")
        lstr = msg_text.split('\n')
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {len(lstr)}")

        if len(lstr) > 24:
            l_altars = []
            if not lstr[5].endswith("Castitas"): l_altars.append(0)
            if not lstr[6].endswith("Castitas"): l_altars.append(1)
            if not lstr[14].endswith("Castitas"): l_altars.append(2)
            if not lstr[15].endswith("Castitas"): l_altars.append(3)
            if not lstr[23].endswith("Castitas"): l_altars.append(4)
            if not lstr[24].endswith("Castitas"): l_altars.append(5)

            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª—Ç–∞—Ä–∏: {l_altars}")
            
            if l_altars:
                self.cmd_altar = self.altar_dict.get(random.choice(l_altars))
                print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–ª—Ç–∞—Ä—å: {self.cmd_altar}")
            else:
                self.cmd_altar = random.choice(["ü§ñ–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏", "ü§ñ–ê–ª—Ç–∞—Ä—å –¢–∏—Ä"])
                print(f"–ê–ª—Ç–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª—Ç–∞—Ä—å: {self.cmd_altar}")

        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã parce_4v_logs.")

    async def nacheve(self):
        print("—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ —á–≤")
        self.is_nacheve_active = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.cmd_altar = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–ª—Ç–∞—Ä—å –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ RF —á–∞—Ç–∞
        @self.client.on(events.NewMessage(chats=-1001284047611))
        async def handle_rf_info(event):
            print("–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç RF —á–∞—Ç–∞.")
            first_line = event.message.text.split('\n')[0]
            print(f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {first_line}")
            await self.parce_4v_logs(event.message.text)

        try:
            while self.is_nacheve_active:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
                bot_message = await self.client.get_messages(self.bot_id, limit=1)
                if bot_message:
                    message = bot_message[0]
                    lstr = message.message.split('\n')
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:")
                    print(f"    lstr[0]: {lstr[0]}")
                    print(f"    lstr[-1]: {lstr[-1]}")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
                    if await self.process_bot_message(lstr):
                        continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ–≤–æ–º—É –∞–ª—Ç–∞—Ä—é
                if self.cmd_altar:
                    print(f"–ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–º—É –∞–ª—Ç–∞—Ä—é: {self.cmd_altar}")
                    await self.client.send_message(self.bot_id, self.cmd_altar)
                    self.cmd_altar = None

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                print("–û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
                await asyncio.sleep(10)

        finally:
            # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            self.client.remove_event_handler(handle_rf_info)
            self.is_nacheve_active = False
            print("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞ —á–≤")

    async def process_bot_message(self, lstr):

        # # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞–Ω–æ—Å–∏–ª—Å—è –ª–∏ –≤–∞–º —É—Ä–æ–Ω
        # if not any("–Ω–∞–Ω–µ—Å —É–¥–∞—Ä" in line and self.your_name in line for line in lstr):
        #     print("–ü–æ –≤–∞–º –Ω–µ –±—ã–ª–æ –Ω–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª—É.")
        #     self.is_nacheve_active = False 
        #     # await self.client.send_message(self.bot_id, "‚õè–†—É–¥–Ω–∏–∫")
        #     return False
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        if any(phrase in line for line in lstr for phrase in ["–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –Ω–∞–¥"]):
            if any("–Ω–∞–Ω–µ—Å —É–¥–∞—Ä" in line and self.your_name in line for line in lstr):
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–±–µ–¥–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —É—Ä–æ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –≥–µ–Ω. —à—Ç–∞–±.")
                self.is_nacheve_active = False
                await asyncio.sleep(2)
                await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                await self.gokragi()
                return True
            else:
                print("–ü–æ–±–µ–¥–∞ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª—É.")
                return False  # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É cmd_altar –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–ª—Ç–∞—Ä—é


        if lstr[-1].endswith("–º–∏–Ω—É—Ç.") or "–¥–æ–∂–¥–∏—Å—å –ø–æ–∫–∞ –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å" in lstr[0] or "–±—ã–ª —É–±–∏—Ç —è–¥–µ—Ä–Ω–æ–π —Ä–∞–∫–µ—Ç–æ–π" in lstr[0]:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–∑—ã–≤–∞–µ–º gokragi()")
            self.is_nacheve_active = False
            await self.gokragi()
            return True

        if any(phrase in line for line in lstr for phrase in ["–ë—Ä–æ–Ω–∑–∞ —É–∂–µ —É —Ç–µ–±—è –≤ —Ä—é–∫–∑–∞–∫–µ."]):
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–±–µ–¥–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –≥–µ–Ω. —à—Ç–∞–±")
            self.is_nacheve_active = False
            await asyncio.sleep(2)
            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
            await self.gokragi()
            return True

        if "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è" in lstr[0]:
            self.is_nacheve_active = False
            return True

        return False
            

    async def straj(self):
        print("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj")
        while True:
            await asyncio.sleep(10)
            is_dead = False
            is_damaged = False

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_messages = await self.client.get_messages(self.bot_id, limit=2)
            print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(last_messages)}")

            for index, message in enumerate(last_messages):
                lstr = message.message.split('\n')

                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ lstr[0] –∏ lstr[-1] –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {index + 1}:")
                print(f"    lstr[0]: {lstr[0]}")
                print(f"    lstr[-1]: {lstr[-1]}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                if "–≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å —á–µ—Ä–µ–∑" in lstr[0]:
                    print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±")
                    is_dead = True
                    break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
                if any(phrase in lstr[0] for phrase in [
                    "–°—Ç—Ä–∞–∂ –Ω–∞–Ω–µ—Å",
                    "–û—Ç—Ä–∞–≤–∏–ª —Ç–µ–±—è"
                ]):      
                    print("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω")
                    is_damaged = True
                    continue

                if "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏." in lstr[0]:
                    print("–∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–∂–µ")
                    return

            if is_dead:
                print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±, –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ gokragi")
                await self.check_arrival()
                return

            if is_damaged:
                print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–µ–Ω. —à—Ç–∞–±")
                await asyncio.sleep(1)
                await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üèõ –í –≥–µ–Ω. —à—Ç–∞–±")

                # –û–∂–∏–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥–µ–Ω. —à—Ç–∞–±–∞
                while True:
                    last_message = await self.client.get_messages(self.bot_id, limit=1)
                    if last_message:
                        lstr = last_message[0].message.split('\n')
                        if "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏." in lstr[0]:
                            print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –≥–µ–Ω. —à—Ç–∞–±")
                            await asyncio.sleep(2)
                            await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                            await self.wait_for_health_refill()
                            await self.client.send_message(self.bot_id, "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                            return
                    await asyncio.sleep(1)

            print("–ù–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥")

    async def wait_for_health_refill(self):
        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any("–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ" in line for line in lstr):
                    await asyncio.sleep(1)
                    return
            await asyncio.sleep(1)


    async def wait_for_confirmation(self):
        try:
            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_future = asyncio.Future()

            @self.client.on(events.NewMessage(from_users=[self.bot_id]))
            async def confirmation_handler(event):
                if "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏" in event.message.text:
                    confirmation_future.set_result(True)
                    print("–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.")
                else:
                    confirmation_future.set_result(False)
                    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.")

            # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
            result = await asyncio.wait_for(confirmation_future, timeout=30)

            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            self.client.remove_event_handler(confirmation_handler)

            return result

        except asyncio.TimeoutError:
            print("–¢–∞–π–º-–∞—É—Ç: –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.")
            return False
    
    async def craft_rec(self, lstr):
        print("# –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫—Ä–∞—Ñ—Ç–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
        if "–†–µ—Ü–µ–ø—Ç" in lstr[2]:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å—Ç—Ä–æ–∫–∏
            lstr = lstr[4:]
            await asyncio.sleep(2)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞—Ñ—Ç–∞ —Ä–µ—Ü–µ–ø—Ç–∞
            for str_line in lstr:
                if str_line == "":
                    break
                craft_cmd = re.search(r" (/.*)$", str_line)
                if craft_cmd:
                    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫—Ä–∞—Ñ—Ç–∞: {craft_cmd.group(1)}")
                    await self.client.send_message(self.bot_id, craft_cmd.group(1))                                
                    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    confirmation = await self.wait_for_confirmation()
                    if not confirmation:
                        print("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∫—Ä–∞—Ñ—Ç.")
                        return

                    await asyncio.sleep(2) 


            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üî® –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å"
            await asyncio.sleep(2)
            await self.client.send_message(self.bot_id, "üî® –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö
            if any("–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:" in line for line in lstr):
                await self.check_talisman(lstr)

    async def check_talisman(self, lstr):
        print("# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–ª–∏—Å–º–∞–Ω")
        tali_type = {"‚ò£": 0, "üîµ": 1, "‚ö´": 2, "üî¥": 3, "üü¢": 4}
        pattern = r'(üîµ|üü¢|‚ö´|üî¥|‚ò£)\s*\+\s*(\d+)'

        talismans_burned = False

        for line in lstr:
            if "–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:" in line:
                continue
            if "–¢–∞–ª–∏–∫–∏ —Å–≥–æ—Ä–µ–ª–∏üíî" in line:
                talismans_burned = True
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–ª–∏—Å–º–∞–Ω—ã —Å–≥–æ—Ä–µ–ª–∏

            match = re.search(pattern, line)
            if match:
                found_symbol = match.group(1)
                talisman_level = int(match.group(2))
                talisman_info = (tali_type.get(found_symbol), talisman_level)
                if talisman_info:
                    print(f"# –ù–∞–π–¥–µ–Ω —Ç–∞–ª–∏—Å–º–∞–Ω: —Ç–∏–ø {found_symbol}, —É—Ä–æ–≤–µ–Ω—å {talisman_level}")
                    self.last_talisman_info = talisman_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–∞–ª–∏—Å–º–∞–Ω–µ
                    if talisman_level < 5: #—É—Ä–æ–≤–µ–Ω—å –∑–∞—Ç–æ—á–∫–∏
                        await asyncio.sleep(1)
                        await self._insert_talisman_and_stone(*talisman_info, lstr)
                    else:
                        print("–£—Ä–∞! –¢–∞–ª–∏—Å–º–∞–Ω –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
                    return talisman_info

        if talismans_burned:
            if self.last_talisman_info:
                print("# –¢–∞–ª–∏—Å–º–∞–Ω—ã —Å–≥–æ—Ä–µ–ª–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω —Å —É—Ä–æ–≤–Ω–µ–º 1")
                new_talisman_info = (self.last_talisman_info[0], 1)
                await self._insert_talisman_and_stone(*new_talisman_info, lstr)
                return new_talisman_info
            else:
                print("# –¢–∞–ª–∏—Å–º–∞–Ω—ã —Å–≥–æ—Ä–µ–ª–∏, –Ω–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–∞–ª–∏—Å–º–∞–Ω–µ")
                return None

        print("# –¢–∞–ª–∏—Å–º–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏")
        return None

    async def _insert_talisman_and_stone(self, talisman_type, talisman_level, lstr):
        print(f"# –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: talisman_type={talisman_type}, talisman_level={talisman_level}")
        print("# –í—Å—Ç–∞–≤–∫–∞ —Ç–∞–ª–∏—Å–º–∞–Ω–∞ –∏ –∫–∞–º–Ω—è")
        await asyncio.sleep(1)
        await self.client.send_message(self.bot_id, "üë®‚Äçüè≠ –ü–æ–º–æ—â–Ω–∏–∫")
        await asyncio.sleep(2)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.rf_message = await self.get_latest_message_with_buttons()
        if not self.rf_message:
            print("# self.rf_message is None, –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫")
            return False

        stone_type = 8 if talisman_level < 3 else 10
        print(f"# –í—ã–±—Ä–∞–Ω –∫–∞–º–µ–Ω—å —Ç–∏–ø–∞ {stone_type}")

        await self.rf_message.click(stone_type)
        await asyncio.sleep(2)

        await self.rf_message.click(talisman_type)
        await asyncio.sleep(2)

        messages = await self.get_latest_messages(limit=2)
        if any(message.split('\n')[0].startswith("‚ùå–ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:") for message in messages):
            print("# –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ '–ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å")
            return False

        # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
        print("# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫—Ä–∞—Ñ—Ç")
        await self._craft_and_process_result(lstr)

        return True

    async def _craft_and_process_result(self, lstr):
        await asyncio.sleep(1)
        print("# –ö—Ä–∞—Ñ—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        await self.client.send_message(self.bot_id, "üî® –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å")

    async def get_latest_message_with_buttons(self):
        print("# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        messages = await self.client.get_messages(self.bot_id, limit=1)
        await asyncio.sleep(2)
        for msg in messages:
            if msg.buttons:
                return msg
        return None

    async def get_latest_messages(self, limit=2):
        print("# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        last_messages = await self.client.get_messages(self.bot_id, limit=2)
        await asyncio.sleep(2)
        return [message.message for message in last_messages]

    async def check_group_list(self, lstr):
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º—ã –ª–∏–¥–µ—Ä—ã –ø–µ—â–µ—Ä—ã
        self.is_cave_leader = True

        print(" –∞ –≤–æ—Ç —á—Ç–æ –ø–æ —Å–æ—Å—Ç–∞–≤—É")
        print(f" –ú–æ—ë —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ª–∏–¥–µ—Ä–∞
        if not lstr or not lstr[0].endswith("/group_guild_join_715480502"):
            print("—Ç—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥")
            self.is_cave_leader = False
        else:
            self.is_cave_leader = True  # –õ–∏–¥–µ—Ä –ø–µ—â–µ—Ä—ã
            print("—Ç—ã –ø–∞—Ç–∏–≤–æ–¥")

        lstr.reverse()
        h_id = 0

        for line in lstr:
            if not line:
                break
            in_str_find = re.search("/p_guild_exc_(\d+)", line)
            if in_str_find:
                h_id = int(in_str_find.group(1))
                continue
            in_str_find = re.search("\d\) .*\[.*\](.*)üèÖ\d+—É—Ä\. (.*)", line)
            if not in_str_find:
                break
            nick = in_str_find.group(1)
            if nick == "Ros_Hangzhou":
                continue
            sost = in_str_find.group(2)

            if "–ú–µ—Ä—Ç–≤" in sost:
                if "ü•§" in sost and self.is_cave_leader and self.is_in_caves:
                    await self.client.send_message(h_id, "–†–µ—Å")

                continue

            if "üíñ" in sost:
                str_hp = re.search("‚ù§Ô∏è(\d+)/\d+", sost)
                helth = int(str_hp.group(1))
                if self.is_cave_leader and self.is_in_caves:
                    if helth < 1500:
                        await self.client.send_message(h_id, "–•–∏–ª")
                    elif 1500 <= helth < 2000:
                        await self.client.send_message(h_id, "–®–∞–≥ –∏–ª–∏ —Ö–∏–ª?")


                continue
            



    def kroha_pativod(self):
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è kroha_pativod")
        
        @self.client.on(events.NewMessage(from_users=[353501977]))
        async def handle_specific_user_messages(event):
            if event.is_private:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
                print(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 353501977: {event.message.text}")
                
                message_text = event.message.text.lower().strip()
                print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                
                keywords = ['–±–∞–Ω–∫–∞', '–±–∞–Ω–∫—É', '–ø–∏—Ç—å']
                
                if message_text in keywords:
                    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º: {message_text}")
                    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /drink_102")
                    await self.client.send_message(self.bot_id, "/drink_102")
                    print("–ö–æ–º–∞–Ω–¥–∞ /drink_102 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                else:
                    print("–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            else:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ.")

        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è kroha_pativod —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}")
        print(f"–ù–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ª–∏ –≤—ã –≤ –ø–µ—â–µ—Ä–∞—Ö: {self.is_in_caves}")
        print(f"–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –ª–∏–¥–µ—Ä–æ–º –ø–µ—â–µ—Ä: {self.is_cave_leader}")




    async def vihod_s_caves(self, lstr):
        self.is_cave_leader = any("/group_guild_join_715480502" in line for line in lstr)
        print(f"{'–¢—ã –ø–∞—Ç–∏–≤–æ–¥' if self.is_cave_leader else '–¢—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥'}")

        if not self.is_in_caves:
            print("–¢—ã –Ω–µ –≤ –ø–µ—â–µ—Ä–∞—Ö")
            return
        print("–¢—ã –≤ –ø–µ—â–µ—Ä–∞—Ö")

        total_health = 0
        alive_count = 0
        alive_has_heal = False
        group_has_res = False
        group_members = []

        for line in lstr:
            if not line.strip():
                continue
            
            if member_id := re.search(r"/p_guild_exc_(\d+)", line):
                group_members.append(int(member_id.group(1)))
                continue
            
            if member_info := re.search(r"\d\) .*\[.*\](.*?)üèÖ\d+—É—Ä\. (.*)", line):
                nick, status = member_info.groups()
                nick = nick.strip()
                
                is_alive = "–ú–µ—Ä—Ç–≤" not in status
                health = 0
                has_heal = "üíñ" in status
                has_res = "ü•§" in status
                
                if is_alive:
                    alive_count += 1
                    if health_match := re.search(r"‚ù§Ô∏è(\d+)/\d+", status):
                        health = int(health_match.group(1))
                        total_health += health
                    alive_has_heal = alive_has_heal or has_heal
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Å —É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∂–∏–≤–æ–≥–æ –∏–ª–∏ –º–µ—Ä—Ç–≤–æ–≥–æ
                group_has_res = group_has_res or has_res
                
                player_status = f"{nick}: HP {health}, {'alive' if is_alive else 'dead'}, {'has hil' if has_heal else 'no hil'}, {'has res' if has_res else 'no res'}"
                print(player_status)

        print(f"\n–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –≥—Ä—É–ø–ø—ã: {total_health}")
        print(f"–ñ–∏–≤—ã—Ö: {alive_count}, –ñ–∏–≤—ã–µ —Å —Ö–∏–ª–∫–∞–º–∏: {'–¥–∞' if alive_has_heal else '–Ω–µ—Ç'}, –ì—Ä—É–ø–ø–∞ —Å —Ä–µ—Å–∞–º–∏: {'–¥–∞' if group_has_res else '–Ω–µ—Ç'}")

        if total_health < 2000 and not alive_has_heal and not group_has_res:
            message = f"{'–¢—ã –ª–∏–¥–µ—Ä' if self.is_cave_leader else '–¢—ã –Ω–µ –ª–∏–¥–µ—Ä'}, –ø–æ—Ä–∞ –Ω–∞ –≤—ã—Ö–æ–¥. –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {total_health}, –Ω–µ—Ç —Ö–∏–ª–æ–∫ —É –∂–∏–≤—ã—Ö –∏ —Ä–µ—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"
            await self.client.send_message(715480502, message)
            print(message)
            
            if self.is_cave_leader:
                await self.rf_message.click(3)
                for member_id in group_members:
                    if member_id != 715480502:
                        await self.client.send_message(member_id, "–í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–µ—â–µ—Ä—ã")
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {member_id}: –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–µ—â–µ—Ä—ã")
        else:
            print(f"–ï—â—ë —Ä–∞–Ω–æ –Ω–∞ –≤—ã—Ö–æ–¥. –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {total_health}, –ñ–∏–≤—ã—Ö: {alive_count}")