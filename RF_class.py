import re
import sys
import asyncio
import random
from random import randint
from telethon import events
from addons import qHash
import datetime
import threading

class RF:
    bot_id = 577009581
    is_run = False
    rf_message = None
    is_in_caves = is_in_gh = is_has_hil = is_has_res = False
    cave_leader_id = 715480502
    my_health = my_max_health = 11999
    hp = "/bind_wear_1723376879927d"
    chv = "/bind_wear_1737804678971w"
    tomat_id = 278339710
    kroha_id = 353501977
    tamplier_id = 681431333
    john_id = 562559122
    pchelka_id = 255360779
    ded_id = 1757434874

    your_name = "Ros_Hangzhou"

    def __init__(self, client):
        self.client = client
        self.group = [[False, False, False, False] for _ in range(6)]
        self.my_group_pos = -1
        self.health_re = re.compile(r"–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ \D+(\d+)/(\d+)")
        self.battle_re = re.compile(r"^–°—Ä–∞–∂–µ–Ω–∏–µ —Å .*$")
        self.damage_re = re.compile(r"(\d+)$")
        self.arrival_re = re.compile(r'.*–ø—Ä–∏–±—É–¥–µ—à—å —á–µ—Ä–µ–∑\s*(\d+)\s*–º–∏–Ω\.\s*(\d+(?:\.\d+)?)\s*—Å–µ–∫\.')
        self.last_talisman_info = None  # (type, level)
        self.players = {
            "–ù–µ–∂–Ω—ã–π üçÖ": self.tomat_id,
            "üêæ·è¶·éÆ·éßœá·èó": self.kroha_id,
            "ùï¥ùñÜùñíùñïùñëùñéùñäùñó": self.tamplier_id,
            "John Doe": self.john_id,
            "‡πñ€£€ú·óØŒ±sÕ•pwÕ£oÕ´‚Ñùtüêù": self.pchelka_id,
            "kingRagnarü§¥üèº": self.ded_id
        }
        self.cmd_altar = None
        self.altar_dict = {
            0: "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ò—Å–∞",
            1: "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ",
            2: "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –ò—Å—Å",
            3: "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –î–∞–≥–∞–∑",
            4: "ü§ñ–ê–ª—Ç–∞—Ä—å –¢–∏—Ä",
            5: "ü§ñ–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏"
        }
        self.is_nacheve_active = self.in_battle = False  # –§–ª–∞–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ nacheve –∏ –±–æ—è
        self.is_cave_leader = True
        self.common_cave()
        self.fast_cave = False
        self.hp_11999 = "/bind_wear_172337681533126"  # 11999 HP
        self.hp_10403 = "/bind_wear_17281182669012i"  # 10403 HP
        self.hp_8930 = "/bind_wear_17281183336251s"   # 8930 HP
        self.hp_7412 = "/bind_wear_1728118388328p"    # 7412 HP
        self.hp_5829 = "/bind_wear_1728118474616c"    # 5829 HP
        self.hp_5117 = "/bind_wear_171967083952510"   # 5117 HP
        self.last_bind = None
        self.after_bind = None
        self.cave_task_running = False
        self.last_set_kingRagnar = None
        self.waiting_for_captcha = False  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏
        self.is_moving = False  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —Ñ–ª–∞–≥
        self.move_timer = None
        self.in_castle = False  # –§–ª–∞–≥ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∑–∞–º–∫–µ
        self.v_terminale = False
        self.kopka = False
        self.last_energy_message = None
        self.got_reward = None
        self.is_training = False
        self.extra_hil = True
        self.mobs = True



    def isIdCompare(self, id):
        return id == self.bot_id

    def isCaveLeaderIdCompare(self, id):
        return id == self.cave_leader_id

    def reset_health(self):
        self.my_health = self.my_max_health
        self.in_battle = False
        print(f"–ó–¥–æ—Ä–æ–≤—å–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {self.my_health}")

    async def checkHealth(self, lstr) -> bool:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è
        if self.updateHealth(lstr[0]):
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–°—Ä–∞–∂–µ–Ω–∏–µ —Å"
        if not self.isBattleStart(lstr[0]):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±–æ–π —Å —ç–ª–∏—Ç–Ω—ã–º –º–æ–±–æ–º –∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –±–æ–π
        if self.skipBattle(lstr):
            return False

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–µ –∏–ª–∏ –æ–± –∏–≥—Ä–æ–∫–µ
        lstr = lstr[2:]

        # –ü–æ–¥—Å—á–µ—Ç —É—Ä–æ–Ω–∞, –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫—É
        self.calculateDamage(lstr)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏
        if self.isPlayerDead():
            return True  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ö–∏–ª–∞
        await self.autoHeal()

        return True

    def updateHealth(self, line: str) -> bool:
        match = self.health_re.search(line)
        if match:
            new_health = int(match.group(1))
            new_max_health = int(match.group(2))
            print(f"–°—Ç–∞—Ä–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}/{self.my_max_health}")
            self.my_health = new_health
            self.my_max_health = new_max_health
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.my_health}/{self.my_max_health}")
            return True
        return False

    def isBattleStart(self, line: str) -> bool:
        return bool(self.battle_re.search(line))

    def skipBattle(self, lstr: list) -> bool:
        return any(phrase in lstr[0] for phrase in ["–≠–ª–∏—Ç–Ω—ã–π", "–≠–ª–∏—Ç–Ω–∞—è"]) or "–≠–Ω–µ—Ä–≥–∏—è" in lstr[-1]

    def calculateDamage(self, lstr: list):
        if not self.in_battle:
            return
        for str_line in lstr:
            if self.my_health <= 0:
                print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –º–µ—Ä—Ç–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞")
                self.in_battle = False
                return
            if not str_line or "–¢—ã " in str_line or " –Ω–∞–Ω–µ—Å —É–¥–∞—Ä " not in str_line:
                continue
            match = self.damage_re.search(str_line)
            if match:
                self.my_health -= int(match.group(1))
                print(f"–ü–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω: {match.group(1)}, —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}")

    def isPlayerDead(self) -> bool:
        if self.my_health <= 0:
            print("–ó–¥–æ—Ä–æ–≤—å–µ —Ä–∞–≤–Ω–æ –∏–ª–∏ –º–µ–Ω—å—à–µ –Ω—É–ª—è. –ò–≥—Ä–æ–∫ —É–º–µ—Ä.")
            self.reset_health()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            return True
        return False

    async def autoHeal(self):
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–ª–µ—á–µ–Ω–∏–µ–º: {self.my_health}")
        
        # –õ–µ—á–∏–º—Å—è, –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∏–∂–µ 400
        if self.my_health <= 400 and self.is_has_hil and self.extra_hil:
            self.is_has_hil = self.extra_hil = False
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ ({self.my_health}). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ö–∏–ª.")
            await self.rf_message.click(0)
            print(f"–°—Ç–∞—Ç—É—Å has_hil –æ–±–Ω–æ–≤–ª–µ–Ω: {self.is_has_hil}")  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ has_hil

        # –õ–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        elif 300 <= self.my_health <= 1200:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 300 –∏ 1200
            await asyncio.sleep(8)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥—ã
            if not self.isPlayerDead() and self.last_bind != self.hp_11999 and self.is_has_hil and self.extra_hil:  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—é–¥–∞
                self.is_has_hil = False
                await self.client.send_message(self.bot_id, self.hp_11999)  # –ù–∞–¥–µ–≤–∞–µ–º 11999 HP
                print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_11999} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 11999)")
                await asyncio.sleep (1)
                await self.rf_message.click(0)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
                self.my_health = self.my_max_health = 11999
                self.last_bind = self.hp_11999
                print(f"–°—Ç–∞—Ç—É—Å has_hil –æ–±–Ω–æ–≤–ª–µ–Ω: {self.is_has_hil}")  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ has_hil

                # await self.client.send_message(self.bot_id, self.hp_11999)  # –ù–∞–¥–µ–≤–∞–µ–º 11999 HP
                # print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_11999} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 11999)")
                # await asyncio.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                # await self.rf_message.click(0)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
                # self.my_health = self.my_max_health = 11999
                # self.last_bind = self.hp_11999
                # self.is_has_hil = False

        elif 1300 < self.my_health <= 5117:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 1300 –∏ 5117
            if self.last_bind != self.hp_5117:
                await self.client.send_message(self.bot_id, self.hp_5117)  # –ù–∞–¥–µ–≤–∞–µ–º 5117 HP
                print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_5117} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 5117)")
                self.last_bind = self.hp_5117
        elif 5117 < self.my_health <= 5829:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 5117 –∏ 5829
            if self.last_bind != self.hp_5829:
                await self.client.send_message(self.bot_id, self.hp_5829)  # –ù–∞–¥–µ–≤–∞–µ–º 5829 HP
                print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_5829} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 5829)")
                self.last_bind = self.hp_5829
        elif 5829 < self.my_health <= 7412:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 5829 –∏ 7412
            if self.last_bind != self.hp_7412:
                await self.client.send_message(self.bot_id, self.hp_7412)  # –ù–∞–¥–µ–≤–∞–µ–º 7412 HP
                print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_7412} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 7412)")
                self.last_bind = self.hp_7412
        elif 7412 < self.my_health <= 8930:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 7412 –∏ 8930
            if self.last_bind != self.hp_8930:
                await self.client.send_message(self.bot_id, self.hp_8930)  # –ù–∞–¥–µ–≤–∞–µ–º 8930 HP
                print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_8930} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 8930)")
                self.last_bind = self.hp_8930
        elif 8930 < self.my_health <= 10403:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 8930 –∏ 10403
            if self.last_bind != self.hp_10403:
                await self.client.send_message(self.bot_id, self.hp_10403)  # –ù–∞–¥–µ–≤–∞–µ–º 10403 HP
                print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_10403} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 10403)")
                self.last_bind = self.hp_10403
        elif 10403 < self.my_health < 11999:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 10403 –∏ 11999
            if self.last_bind != self.hp_11999:
                await self.client.send_message(self.bot_id, self.hp_11999)  # –ù–∞–¥–µ–≤–∞–µ–º 11999 HP
                print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_11999} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 11999)")
                self.last_bind = self.hp_11999
        else:
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ–µ ({self.my_health}). –õ–µ—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")


    async def set_moving_flag(self, duration):
        self.is_moving = True
        self.in_castle = False
        self.is_nacheve_active = False
        self.kopka = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–º–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if self.move_timer:
            self.move_timer.cancel()
        self.move_timer = asyncio.create_task(self.reset_moving_flag(duration))

    async def reset_moving_flag(self, duration):
        await asyncio.sleep(duration)
        self.is_moving = False

    async def msg_parce(self, message):
        if not self.is_run:
            return

        lstr = message.message.split('\n')
        val = qHash(lstr[0])
        if val == 0:
            return
        print(val, lstr[0])

        # –≤ –ø–µ—â–µ—Ä–∞—Ö
        if any(phrase in line for line in lstr for phrase in [
            "–±—É–ª–æ—á–∫–∞"
        ]):    
            print("–±—É–ª–æ—á–∫–∞")
        elif any(phrase in line for line in lstr for phrase in [
            "—Ç—ã –º–µ—Ä—Ç–≤, –¥–æ–∂–¥–∏—Å—å –ø–æ–∫–∞ –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å"
        ]):    
            self.is_has_hil = self.extra_hil = True
        elif any(phrase in line for line in lstr for phrase in [
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ª–µ—á–∏—Ç—å—Å—è"
        ]):    
            self.is_has_hil = self.extra_hil = False
        elif any(phrase in line for line in lstr for phrase in [
            "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–∞—Ç–∫–Ω—É–ª–∞—Å—å"
        ]):
            await asyncio.sleep(10)
            if self.is_in_caves:  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ self.is_in_caves
                await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")

        if any(phrase in lstr[0] for phrase in [
            "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", 
            # "–≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã", 
            "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ –ø–µ—â–µ—Ä—ã –Ω–∞ —Ñ—É–Ω–∏–∫—É–ª–µ—Ä–µ",
            "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ –ø–µ—â–µ—Ä—ã –Ω–∞ —Å–∞–Ω—è—Ö",
        ]):
            self.is_in_caves = self.is_has_hil = self.is_has_res = self.extra_hil = True
            self.my_health = self.my_max_health = 11999
            await asyncio.sleep(randint(4, 6))
            await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
            print("–≤ –ø–µ—â–µ—Ä–∞—Ö")
            await asyncio.sleep(10)
            # asyncio.create_task(self.time_cave())
            # await self.time_cave()
        elif any(phrase in line for line in lstr for phrase in [
            "–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ",
        ]):
            self.is_has_hil = False  
            print(f"–°—Ç–∞—Ç—É—Å has_hil –æ–±–Ω–æ–≤–ª–µ–Ω: {self.is_has_hil}")  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ has_hil
            self.waiting_for_captcha = False  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏

            # self.reset_health()
        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤",
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–∫—Ä–µ—à–∞—Ç—å—Å—è",
        ]):
            self.reset_health()
            print(self.my_health, self.my_max_health)
        #     # –Ω–∞ –Ω–æ–≤—ã–π –≥–æ–¥ 
        #     if not self.is_in_caves:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å–ª–æ–≤–∏–µ
        #         await asyncio.sleep(1)
        #         await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")

        elif any(
            phrase in line for line in lstr for phrase in [
                "–û–∂–∏–¥–∞–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
            ]
        ) or any(re.search(r"–æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –Ω–∞–¥ .*Ros_Hangzhou", line) for line in lstr):
            await asyncio.sleep(5)
            if self.is_has_res and self.is_in_caves:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ is_has_res —Ä–∞–≤–Ω–æ True –∏ –º—ã –≤ –ø–µ—â–µ—Ä–∞—Ö
                self.is_has_res = False
                await asyncio.sleep(10)
                await self.client.send_message(self.bot_id, self.hp_11999)  # –ù–∞–¥–µ–≤–∞–µ–º –±–∏–Ω–¥ –Ω–∞ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ HP
                await asyncio.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
                await self.rf_message.click(1)
                self.my_health = self.my_max_health = 11999  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è my_health –∏ my_max_health
                print(self.my_health, self.my_max_health)
                self.last_bind = self.hp_11999
        elif "–°—Ä–∞–∂–µ–Ω–∏–µ —Å" in lstr[0] and not any("–†—é–∫–∑–∞–∫" in line for line in lstr):
            self.in_battle = True   
        elif "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã —É–º–µ—Ä" in lstr:
            self.in_battle = False     
        # elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–±—É–¥–µ—Ç –≤ –≥–µ–Ω. —à—Ç–∞–± —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç!" in lstr:
        #     self.is_in_caves = False
        elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –∑–∞–º–µ—Ä–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç" in lstr[0]:
            await asyncio.sleep(1)
            await self.rf_message.click(2)

        elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Å–∏–ª—ã" in lstr[0]:
            if self.fast_cave:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è fast_ceve
                await asyncio.sleep(1)
                await self.rf_message.click(2)
        elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–±—É–¥–µ—Ç –≤ –≥–µ–Ω. —à—Ç–∞–± —á–µ—Ä–µ–∑" in lstr[0]:
            print("—á—É–≤–∞—á–æ–∫, —Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª –ø–µ—â–µ—Ä—É")
            await asyncio.sleep(1)
            self.fast_cave = False
            await self.client.send_message(self.bot_id, RF.hp)  # –ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è –¥–ª—è –º–æ–±–æ–≤
            await self.check_arrival()
        elif lstr[0].startswith("–°–æ—Å—Ç–∞–≤:"):
            print("—á—Ç–æ —Ç–∞–º –ø–æ —Å–æ—Å—Ç–∞–≤—É")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–ª–æ–≤
            score_line = lstr[1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±–∞–ª–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
            if "–ë–∞–ª–ª—ã:" in score_line:
                score = int(score_line.split(":")[1].strip().split()[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
                if score == 11:
                    self.fast_cave = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ fast_cave –≤ True
                    print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ fast_cave –≤ True, –±–∞–ª–ª—ã —Ä–∞–≤–Ω—ã 11.")
                else:
                    print(f"–ë–∞–ª–ª—ã –Ω–µ —Ä–∞–≤–Ω—ã 11, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {score}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.check_group_list(lstr)
            await asyncio.sleep(2)
            await self.vihod_s_caves(lstr)
            await asyncio.sleep(2)
            await self.hp_in_caves(lstr)
            await asyncio.sleep(2)
            await self.hp_in_caves_kingRagnar(lstr)
            await asyncio.sleep(2)
            await self.time_cave(lstr)


        elif lstr[0].endswith("–Ω–µ –≤ –≥–µ–Ω. —à—Ç–∞–±–µ]"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ üêæ·è¶·éÆ·éßœá·èó –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if "üêæ·è¶·éÆ·éßœá·èó" in lstr[0]:
                await message.forward_to(-1002220238697)  # —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è üêæ·è¶·éÆ·éßœá·èó
            else:
                await message.forward_to(-1001323974021)  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

            # –ò—â–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            players_not_in_gh = re.findall(r'(–ù–µ–∂–Ω—ã–π üçÖ|üêæ·è¶·éÆ·éßœá·èó|ùï¥ùñÜùñíùñïùñëùñéùñäùñó|John Doe|‡πñ€£€ú·óØŒ±sÕ•pwÕ£oÕ´‚Ñùtüêù|kingRagnarü§¥üèº)', lstr[0])
            if players_not_in_gh:
                for player in players_not_in_gh:
                    if player in self.players:
                        print(f"{player} –Ω–µ –≤ –≥–µ–Ω. —à—Ç–∞–±–µ")
                        await self.client.send_message(self.players[player], "–î–∞–≤–∞–π—Ç–µ –≤ –≥–µ–Ω. —à—Ç–∞–±")
            if self.mobs:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ñ–ª–∞–≥ –¥–ª—è –º–æ–±–æ–≤
                await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")  # –¥–ª—è –º–æ–±–æ–≤
            else:
                print("bag bag bag")  # –¥–ª—è –¥–∞–Ω–∂–µ–π
        elif "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å –≥—Ä—É–ø–ø—É" in lstr[0]:
            await self.client.send_message(self.bot_id, "22")


        # #     —Ç–µ—Å—Ç—ã
        # elif "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ" in lstr[0]:
        #     print("bag bag bag")
        #     # asyncio.create_task(self.time_cave())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
        #     await self.time_cave()
        #     self.cave_task = asyncio.create_task(self.time_cave())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
        # asyncio.create_task(self.time_cave())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
        #     self.cave_task_running = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞
        #     await self.client.send_message(715480502, "–ó–∞–¥–∞—á–∞ time_cave –∑–∞–ø—É—â–µ–Ω–∞.")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        # elif "—É—Å–∏–ª–∏—Ç–µ–ª–∏" in lstr[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "—É—Å–∏–ª–∏—Ç–µ–ª–∏"
        #     if self.cave_task_running:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
        #         print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ time_cave.")
        #         self.cave_task.cancel()  # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
        #         self.cave_task_running = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        #         print("–ó–∞–¥–∞—á–∞ time_cave –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        #         await self.client.send_message(715480502, "–ó–∞–¥–∞—á–∞ time_cave –æ—Ç–º–µ–Ω–µ–Ω–∞.")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        #     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        #     current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        #     await self.client.send_message(715480502, f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {current_time}")
       
       
        # –Ω–∞ —Å—Ç—Ä–∞–∂–µ
        elif "–ë–æ–π —Å –±–æ—Å—Å–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ." in lstr[0]:
            print("–¥–æ—à–µ–ª –¥–æ —Å—Ç—Ä–∞–∂–∞")
            await self.straj()
        elif "–ë–æ—Å—Å –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è. –ü—Ä–æ—Ö–æ–¥ –≤ –ª–æ–∫–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç!" in lstr[0]:  # –µ—Å–ª–∏ —É–º–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–∂–µ –∏ —Å–Ω–æ–≤–∞ —Ö–æ—á–µ—à—å –∏–¥—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–∂–∞
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")

        # –Ω–∞ —á–≤
        elif "–¢—ã –±—ã–ª —É–±–∏—Ç!" in lstr[0]:  # –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–∞–∑—ã
            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –±—ã–ª —É–±–∏—Ç!")
            await self.check_arrival()

        elif any(phrase in line for line in lstr for phrase in [
            "–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏",
            "–ê–ª—Ç–∞—Ä—å –¢–∏—Ä",
        ]):
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "ü§ñ –¢–µ—Ä–º–∏–Ω–∞–ª Aquilla")
            
        elif any(phrase in line for line in lstr for phrase in [
            "–ê–ª—Ç–∞—Ä—å –ò—Å–∞",
            "–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ",
        ]):
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üë©‚ÄçüöÄ –¢–µ—Ä–º–∏–Ω–∞–ª Basilaris")

        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã –ø—Ä–∏–±—ã–ª –∫ –∞–ª—Ç–∞—Ä—é",
            "—Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É —Ç–æ–ª—å–∫–æ –∏–∑ –∞–ª—Ç–∞—Ä—è",
            # "–¢—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏",
        ]):
            self.got_reward = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
            await self.nacheve()

        elif any(phrase in line for line in lstr for phrase in [
            "–±–æ–π –∑–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        ]):
            self.v_terminale = True
            self.got_reward = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
            await self.nacheve()

        elif any(phrase in line for line in lstr for phrase in [
                    "–ë—Ä–æ–Ω–∑–∞ —É–∂–µ —É —Ç–µ–±—è –≤ —Ä—é–∫–∑–∞–∫–µ",
                    "–ó–∞ —Ç–æ, —á—Ç–æ —Ç—ã –≥–µ—Ä–æ–∏—á–µ—Å–∫–∏ —Å—Ä–∞–∂–∞–ª—Å—è",
                ]) and not self.got_reward:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ got_reward –±—ã–ª False
            self.got_reward = True
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, RF.hp)  # –ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è –¥–ª—è –º–æ–±–æ–≤
            asyncio.create_task(self.set_nacheve_inactive_after_delay())  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã


        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã –ø—Ä–∏–±—ã–ª –≤ –∫—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã",
            "–ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –≤–æ–π–Ω–∞",
            "–¢—ã –ø—Ä–∏–±—ã–ª –Ω–∞"
        ]):
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "‚õè–†—É–¥–Ω–∏–∫")
        elif "[–Ω–∞ –≤—Ä–µ–º—è –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ö–æ–¥ –∑–∞–∫—Ä—ã—Ç]" in lstr[0]:
            print("–ü—Ä–æ—Ö–æ–¥ –∑–∞–∫—Ä—ã—Ç. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–±–æ—Ä—É –∞–ª—Ç–∞—Ä—è.")
            await self.prepare_for_caves()
            await asyncio.sleep(1)
            altar_to_send = self.cmd_altar if self.cmd_altar else self.choose_random_altar()
            await self.client.send_message(self.bot_id, altar_to_send)
            # await self.client.send_message(-1001323974021, altar_to_send) # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –≤ –≥—Ä—É–ø–ø—É 59
            await self.client.send_message(681431333, altar_to_send) # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –í–∞–ª–µ—Ä–µ


        elif "–¢—ã –ø—Ä–∏–±—ã–ª –≤ ‚õè—Ä—É–¥–Ω–∏–∫." in lstr[0]:
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üñ≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ê–ë–£")
            
        elif any(phrase in line for line in lstr for phrase in ["–ü–æ—Å–ª–µ –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ç—ã —Å–Ω–æ–≤–∞ —Å–º–æ–∂–µ—à—å"]):
            if not any([self.is_in_caves, self.kopka, self.is_moving, self.waiting_for_captcha]):
                await asyncio.sleep(15)
                await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                await asyncio.sleep(5)
                #–Ω–∞–¥–µ–≤–∞–µ–º –±–∏–Ω–¥ –¥–ª—è —á–≤
                await self.client.send_message(self.bot_id, RF.chv)
        elif any(phrase in line for line in lstr for phrase in [
            "–£–¥–∞—á–∏!"
        ]):  
            self.is_nacheve_active = True


              # –Ω–∞ –º–æ–±–∞—Ö
        elif any(phrase in line for line in lstr for phrase in  [
            "–ø–æ–π—Ç–∏ –≤ 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏", 
            "—á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø–µ—â–µ—Ä—ã?",
            "–ø–æ–ø—Ä–æ–±—É–π"
            ]):
            await asyncio.sleep(1)
            await message.click(0)
        elif "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?" in lstr[-1]:
            print("–±—É–¥–µ–º –±–∏—Ç—å")
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üî™ –ê—Ç–∞–∫–æ–≤–∞—Ç—å")
        elif any(phrase in line for line in lstr for phrase in  [
            "–û–±—â–∞—è –¥–æ–±—ã—á–∞:", 
            ]):
            await message.forward_to(5596818972) #–≥—Ä—É–ø–ø–∞ 59
        
        # elif any(phrase in line for line in lstr for phrase in ["–≠–Ω–µ—Ä–≥–∏—è: üîã0/5", "[–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏]"]):
        #     print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏")
        #     await asyncio.sleep(1)
        #     await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        #     await self.gokragi()
        # elif any(phrase in line for line in lstr for phrase in [f"–≠–Ω–µ—Ä–≥–∏—è: üîã{i}/5" for i in range(1, 5)]):
        #     print("–µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è")
        #     await asyncio.sleep(1)
        #     await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        #     await self.check_arrival()
        

        elif any(phrase in line for line in lstr for phrase in ["–≠–Ω–µ—Ä–≥–∏—è: üîã0/5", "[–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏]"]):
            print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏")
            await self.handle_no_energy()
        elif any(phrase in line for line in lstr for phrase in [f"–≠–Ω–µ—Ä–≥–∏—è: üîã{i}/5" for i in range(1, 5)]):
            print("–µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è")
            await self.handle_energy_found()


        elif any(f"+1 –∫ —ç–Ω–µ—Ä–≥–∏–∏ üîã{i}/5" in lstr[0] for i in range(1, 6)):
            self.last_energy_message = message  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –ª–∏ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ 4 –∏–ª–∏ 5
            if any(f"+1 –∫ —ç–Ω–µ—Ä–≥–∏–∏ üîã{i}/5" in lstr[0] for i in (4, 5)):
                await self.handle_energy()  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è 4 –∏ 5
            # if self.waiting_for_captcha or self.is_moving:
            #     print("–£–∂–µ –æ–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è...")
            #     return
            
            
            # if self.is_in_caves:
            #     if self.is_cave_leader:
            #         print("–í–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –ø–µ—â–µ—Ä–∞—Ö –∏–ª–∏ –µ—Å–ª–∏ —Ç—ã –ª–∏–¥–µ—Ä –ø–µ—â–µ—Ä—ã")
            #         await asyncio.sleep(1)
            #         await self.rf_message.click(2)
            #     else:  # –ï—Å–ª–∏ –≤ –ø–µ—â–µ—Ä–∞—Ö, –Ω–æ –Ω–µ –ª–∏–¥–µ—Ä
            #         print("–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –≥—Ä—É–ø–ø—É")
            #         # await message.forward_to(-1001323974021) #59 60
            #         # await message.forward_to(-1002220238697) # –±–µ–∑ –í
            # else:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø
            #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –Ω–∞ —á–≤ –∏ –Ω–µ –∂–¥–µ–º –∫–∞–ø—á—É
            #     if not self.is_nacheve_active and not self.waiting_for_captcha and not self.in_castle:
            #         print("–í–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤–Ω–µ –ø–µ—â–µ—Ä")
            #         await asyncio.sleep(1)
            #         await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
            #         await asyncio.sleep(5)
            #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É
            #         if self.waiting_for_captcha:
            #             print("–û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏...")
            #             # –ó–¥–µ—Å—å –∂–¥–µ–º, –ø–æ–∫–∞ –∫–∞–ø—á–∞ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥)
            #             while self.waiting_for_captcha:
            #                 await asyncio.sleep(60)  
            #         # –ö–æ–≥–¥–∞ –∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            #         await self.check_arrival()


        # # –¥–∞–Ω–∂–∏

        elif "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–π—Ç–∏ –¥–∞–Ω–∂" in lstr[0]:
            await asyncio.sleep(1)
            await message.click(0)
            await self.dangego()

        
        # misc
        elif val == 1550650437:  # ‚öí –ö—É–∑–Ω—è - 5 —É—Ä.
            await self.craft_rec(lstr)
        elif val == 2509085174:  # –†–µ—Ü–µ–ø—Ç—ã:
            return
        elif any(phrase in line for line in lstr for phrase in  [
            "–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –≥–µ–Ω. —à—Ç–∞–±–∞",
            "–í –¥–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∏–∑ –≥–µ–Ω. —à—Ç–∞–±–∞!",
            "–£ —Ç–µ–±—è –Ω–µ—Ç"
            ]):
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
            if self.mobs:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ñ–ª–∞–≥ –¥–ª—è –º–æ–±–æ–≤
                await self.check_arrival()  # –¥–ª—è –º–æ–±–æ–≤
            else:
                await self.check_arrival_dange()  # –¥–ª—è –¥–∞–Ω–∂–µ–π

        elif any(phrase in lstr[0] for phrase in [
            "‚ö†Ô∏è–ü—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–≥—Ä–µ",
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏."
        ]):
            print("–ö–∞–ø—á–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            await self.client.send_message(715480502, "–ö–∞–ø—á–∞ –ø–æ–ª—É—á–µ–Ω–∞")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.waiting_for_captcha = True # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏
            # sys.exit()
        elif (match := self.arrival_re.search(lstr[0])):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–±—ã—Ç–∏—è
            minutes = int(match.group(1))
            seconds = float(match.group(2))
            duration = int(minutes * 60 + seconds)
            self.waiting_for_captcha = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏
            self.v_terminale =  False
            await self.set_moving_flag(duration)
            print(f"–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ: {lstr[0]}, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        elif "–¢—ã –ø—Ä–∏–±—ã–ª –≤ –∑–∞–º–æ–∫" in lstr[0]:
            self.in_castle = True
            print("–ü—Ä–∏–±—ã–ª–∏ –≤ –∑–∞–º–æ–∫")
        elif "–¢—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª" in lstr[0]:
            self.kopka = True
            print("–ø–æ—Å—Ç–∞–≤–∏–ª –∞–±—É")
        elif "–¢—ã –∑–∞–∫–æ–Ω—á–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" in lstr[0]:
            self.is_training = False
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
        elif "–¢—ã –Ω–∞—á–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" in lstr[0]:
            self.is_training = True
        elif "–ö–∞–∫ –¥–æ–ª–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞" in lstr[0]:
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "1")
        elif "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?" in lstr[-1]:
            await message.click(0)











        if not message.buttons:
            if val == 3190963077:  # ‚ú®–î–æ–±—ã—á–∞:
                await message.forward_to(-1001323974021) #–≥—Ä—É–ø–ø–∞ 59
                # await message.forward_to(2220238697) #–≥—Ä—É–ø–ø–∞ –±–µ–∑ –í
            else:
                await self.checkHealth(lstr)
            return

        if val == 3190963077:  # ‚ú®–î–æ–±—ã—á–∞:
            self.rf_message = message
            await asyncio.sleep(10)
            await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
            return
        

    async def set_nacheve_inactive_after_delay(self):
        await asyncio.sleep(120)  # –û–∂–∏–¥–∞–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
        self.is_nacheve_active = False

    async def check_arrival_dange(self):  # —Ö–æ–¥–∏–º –¥–∞–Ω–∂–∏
        print("check_arrival_dange")

        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any(condition in lstr[0] for condition in ["–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.", "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.", "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº"]):
                    await self.client.send_message(self.bot_id, "/go_dange_10014")  # –∏–¥—Ç–∏ –¥–∞–Ω–∂
                    return
            await asyncio.sleep(1)

    async def dangego(self):
        while True:
            await asyncio.sleep(10)
            dungeon_completed = False
            energy_low = False
            is_dead = False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_messages = await self.client.get_messages(self.bot_id, limit=3)
            print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(last_messages)}")

            for index, message in enumerate(last_messages):
                lstr = message.message.split('\n')

                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ lstr[0] –∏ lstr[-1] –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {index + 1}:")
                print(f"    lstr[0]: {lstr[0]}")
                print(f"    lstr[-1]: {lstr[-1]}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏–π
                if any(phrase in line for line in lstr for phrase in [
                    "–£ –∫–æ–≥–æ-—Ç–æ –≤ –≥—Ä—É–ø–ø–µ –º–µ–Ω—å—à–µ 2 –µ–¥–∏–Ω–∏—Ü —ç–Ω–µ—Ä–≥–∏–∏",
                    "–Ω–µ –≤ –≥–µ–Ω. —à—Ç–∞–±–µ",
                    "—É–∂–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ"
                ]):
                    print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏, –∫—Ç–æ-—Ç–æ –Ω–µ –≤ –≥—à –∏–ª–∏ —É–∂–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ")
                    energy_low = True
                    break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if any(phrase in line for line in lstr for phrase in ["–¢—ã –ø–æ–≥–∏–± –æ—Ç", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–π—Ç–∏ –¥–∞–Ω–∂"]):
                    print("–¢—ã –ø–æ–≥–∏–± –Ω–∞ –¥–∞–Ω–∂–µ")
                    is_dead = True
                    break

                if any("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏" in line for line in lstr):
                    print("–≤—Å–µ –≤ –≥—à –±—ã–ª –¥–∞–Ω–∂ –∏ –∂–∏–≤ –Ω–∞ –¥–∞–Ω–∂–µ")
                    dungeon_completed = True
                    continue

            if energy_low:
                print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –∏–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–µ –≤ –≥—à")
                await asyncio.sleep(1)
                await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
                return

            if is_dead:
                print("—É–º–µ—Ä –Ω–∞ –¥–∞–Ω–∂–µ")
                await self.check_arrival_dange()
                print("–í—ã–ø–æ–ª–Ω–µ–Ω check_arrival_dange() –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏")
                return

            if dungeon_completed:
                print("–≤—Å–µ –≤ –≥—à –±—ã–ª –¥–∞–Ω–∂ –∏ –∂–∏–≤ –Ω–∞ –¥–∞–Ω–∂–µ")
                await asyncio.sleep(2)
                await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                await self.wait_for_health_refill()
                await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                return

            print("–ù–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(1)


    async def check_arrival(self):  # —Ö–æ–¥–∏–º –Ω–∞ –º–æ–±–∞
        print("check_arrival")

        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
                if any(phrase in lstr[0] for phrase in [
                    "—Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—à—å",
                    "–¥–æ–∂–¥–∏—Å—å –ø–æ–∫–∞ –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å"
                ]):
                    print("–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
                    return  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏–π
                elif any(phrase in lstr[0] for phrase in [
                    "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –≥–µ–Ω. —à—Ç–∞–±!" ,
                    "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº"
                ]):    
                    self.is_in_caves = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–¥–µ—Å—å
                    await asyncio.sleep(2)
                    await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await self.wait_for_health_refill()
                    await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
                    return
            await asyncio.sleep(1)



    async def arrival_hil(self):  # —Ö–æ–¥–∏–º –Ω–∞ –º–æ–±–∞
        print("arrival_hil")

        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any(phrase in lstr[0] for phrase in [
                    "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –≥–µ–Ω. —à—Ç–∞–±!" ,
                    "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº",
                    "—É—Å–ø–µ—à–Ω–æ –Ω–∞–¥–µ–ª –∫–æ–º–ª–µ–∫—Ç"
                ]):    
                    await asyncio.sleep(2)
                    await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await self.wait_for_health_refill()
                    return
            await asyncio.sleep(1)

    async def gokragi(self):  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —á–≤ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏
        print("–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —á–≤ –ø–æ–±–µ–¥–∞ –∏–ª–∏ —Ä–µ—Å")

        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any(phrase in lstr[0] for phrase in ["–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.", "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.", "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº", "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –≥–µ–Ω. —à—Ç–∞–±!"]):  
                    await asyncio.sleep(2)
                    await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await self.wait_for_health_refill()
                    await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                    return
            await asyncio.sleep(1)








    async def parce_4v_logs(self, msg_text):

        print("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã parce_4v_logs.")
        lstr = msg_text.split('\n')
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {len(lstr)}")

        if len(lstr) > 24:
            l_altars = []
            if not lstr[5].endswith("Castitas"): l_altars.append(0)
            if not lstr[6].endswith("Castitas"): l_altars.append(1)
            if not lstr[14].endswith("Castitas"): l_altars.append(2)
            if not lstr[15].endswith("Castitas"): l_altars.append(3)
            if not lstr[23].endswith("Castitas"): l_altars.append(4)
            if not lstr[24].endswith("Castitas"): l_altars.append(5)

            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª—Ç–∞—Ä–∏: {l_altars}")
            
            if l_altars:
                self.cmd_altar = self.altar_dict.get(random.choice(l_altars))
                print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–ª—Ç–∞—Ä—å: {self.cmd_altar}")
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª—Ç–∞—Ä—å
                if not self.v_terminale:
                    self.cmd_altar = self.choose_random_altar()
                    print(f"–ê–ª—Ç–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª—Ç–∞—Ä—å: {self.cmd_altar}")
                else:
                    self.cmd_altar = None  # –ù–µ –≤—ã–±–∏—Ä–∞–µ–º –∏ –Ω–µ –ø–æ—Å—ã–ª–∞–µ–º, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
                    print("–ù–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –∞–ª—Ç–∞—Ä—å –Ω–µ –≤—ã–±—Ä–∞–Ω.")

        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã parce_4v_logs.")

    async def nacheve(self):
        print("—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ —á–≤")
        self.is_nacheve_active = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.cmd_altar = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–ª—Ç–∞—Ä—å –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ RF —á–∞—Ç–∞
        @self.client.on(events.NewMessage(chats=-1001284047611))
        async def handle_rf_info(event):
            print("–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç RF —á–∞—Ç–∞.")
            first_line = event.message.text.split('\n')[0]
            print(f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {first_line}")
            await self.parce_4v_logs(event.message.text)

        try:
            while self.is_nacheve_active:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
                bot_message = await self.client.get_messages(self.bot_id, limit=1)
                if bot_message:
                    message = bot_message[0]
                    lstr = message.message.split('\n')
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:")
                    print(f"    lstr[0]: {lstr[0]}")
                    print(f"    lstr[-1]: {lstr[-1]}")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
                    if await self.process_bot_message(lstr):
                        continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ–≤–æ–º—É –∞–ª—Ç–∞—Ä—é
                if self.cmd_altar:
                    print(f"–ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–º—É –∞–ª—Ç–∞—Ä—é: {self.cmd_altar}")
                    await self.client.send_message(self.bot_id, self.cmd_altar)
                    await self.client.send_message(681431333, self.cmd_altar) # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –í–∞–ª–µ—Ä–µ


                    self.cmd_altar = None

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                print("–û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
                await asyncio.sleep(10)

        finally:
            # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            self.client.remove_event_handler(handle_rf_info)
            self.is_nacheve_active = False
            print("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞ —á–≤")

    async def process_bot_message(self, lstr):
        if any("–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –Ω–∞–¥" in line for line in lstr):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–Ω–µ—Å–ª–∏ —É–¥–∞—Ä
            if any("–Ω–∞–Ω–µ—Å —É–¥–∞—Ä" in line and self.your_name not in line for line in lstr):
                print("–ü–æ–±–µ–¥–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —É—Ä–æ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –≥–µ–Ω. —à—Ç–∞–±.")
                await asyncio.sleep(2)
                await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                await self.client.send_message(681431333, "–£—à–µ–ª –Ω–∞ –æ—Ç—Ö–∏–ª –ø–æ—Å–ª–µ –ø–≤–ø") # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –í–∞–ª–µ—Ä–µ
                await self.gokragi()
                self.is_nacheve_active = False
                return True
            elif any(f"{self.your_name} –Ω–∞–Ω–µ—Å —É–¥–∞—Ä" in line for line in lstr) and not any("–Ω–∞–Ω–µ—Å —É–¥–∞—Ä" in line and self.your_name not in line for line in lstr):
                print("–ü–æ–±–µ–¥–∞ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª—É.")
                return False

        if lstr[-1].endswith("–º–∏–Ω—É—Ç.") or "–¥–æ–∂–¥–∏—Å—å –ø–æ–∫–∞ –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å" in lstr[0] or "–±—ã–ª —É–±–∏—Ç —è–¥–µ—Ä–Ω–æ–π —Ä–∞–∫–µ—Ç–æ–π" in lstr[0]:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–∑—ã–≤–∞–µ–º gokragi()")
            await self.gokragi()
            self.is_nacheve_active = False
            return True

        if "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è" in lstr[0]:
            self.is_nacheve_active = False
            return True

        return False
            

    async def straj(self):
        print("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj")
        while True:
            await asyncio.sleep(10)
            is_dead = False
            is_damaged = False
            damage_type = None  # Track specific damage type

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_messages = await self.client.get_messages(self.bot_id, limit=2)
            print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(last_messages)}")

            for index, message in enumerate(last_messages):
                lstr = message.message.split('\n')

                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ lstr[0] –∏ lstr[-1] –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {index + 1}:")
                print(f"    lstr[0]: {lstr[0]}")
                print(f"    lstr[-1]: {lstr[-1]}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
                damage_dict = {
                    "–°—Ç—Ä–∞–∂": ["–°—Ç—Ä–∞–∂ –Ω–∞–Ω–µ—Å", "–°—Ç—Ä–∞–∂ –æ—Ç—Ä–∞–≤–∏–ª —Ç–µ–±—è"],
                    "–∞—Ä–≥–æ–ª": ["–∞—Ä–≥–æ–ª –Ω–∞–Ω–µ—Å", "–∞—Ä–≥–æ–ª –æ—Ç—Ä–∞–≤–∏–ª —Ç–µ–±—è"],
                    "–í–∞—Ä–∞—Å—Å–∞": ["–í–∞—Ä–∞—Å—Å–∞ –Ω–∞–Ω–µ—Å", "–í–∞—Ä–∞—Å—Å–∞ –æ—Ç—Ä–∞–≤–∏–ª —Ç–µ–±—è"],
                    "–¢—Ä–∞—à–µ—Ä": ["–¢—Ä–∞—à–µ—Ä –Ω–∞–Ω–µ—Å", "–¢—Ä–∞—à–µ—Ä –æ—Ç—Ä–∞–≤–∏–ª —Ç–µ–±—è"],
                }

                for boss, phrases in damage_dict.items():
                    if any(phrase in lstr[0] for phrase in phrases):
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ damage_type –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–æ—Å—Å–∞
                        if boss == "–°—Ç—Ä–∞–∂":
                            damage_type = "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
                        elif boss == "–∞—Ä–≥–æ–ª":
                            damage_type = "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'"
                        elif boss == "–í–∞—Ä–∞—Å—Å–∞":
                            damage_type = "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ''"
                        elif boss == "–¢—Ä–∞—à–µ—Ä":
                            damage_type = "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'''"

                        print(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω –æ—Ç {boss}")
                        is_damaged = True
                        continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                if "–≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å —á–µ—Ä–µ–∑" in lstr[0]:
                    if "–¢—Ä–∞—à–µ—Ä" in lstr[0]:
                        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± –æ—Ç –¢—Ä–∞—à–µ—Ä–∞")
                        damage_type = "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'''"
                    elif "–í–∞—Ä–∞—Å—Å–∞" in lstr[0]:
                        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± –æ—Ç –í–∞—Ä–∞—Å—Å—ã")
                        damage_type = "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ''"
                    elif "–∞—Ä–≥–æ–ª" in lstr[0]:
                        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± –æ—Ç –ê—Ä–≥–æ–ª–∞")
                        damage_type = "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'"
                    elif "–°—Ç—Ä–∞–∂" in lstr[0]:
                        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± –æ—Ç –°—Ç—Ä–∞–∂–∞")
                        damage_type = "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"

                    is_dead = True
                    break

                if any(phrase in line for line in lstr for phrase in [
                    "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.",
                    "–¢–≤–æ—è –¥–æ–±—ã—á–∞ —Å –±–æ—Å—Å–∞",
                    "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ –≥–µ–Ω. —à—Ç–∞–±",
                    ]): 
                    print("–∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–∂–µ")
                    return

            if is_dead:
                print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±, –æ–∂–∏–¥–∞–µ–º –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è")

                # –û–∂–∏–¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–∏
                while True:
                    last_message = await self.client.get_messages(self.bot_id, limit=1)
                    if last_message:
                        lstr = last_message[0].message.split('\n')
                        if "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤" in lstr[0]:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–Ω–æ–≤–∞ –∂–∏–≤")
                            await asyncio.sleep(2)
                            await self.client.send_message(self.bot_id, damage_type)
                            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {damage_type}")
                            return
                    await asyncio.sleep(1)

            if is_damaged:
                print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–µ–Ω. —à—Ç–∞–±")
                await asyncio.sleep(1)
                await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üèõ –í –≥–µ–Ω. —à—Ç–∞–±")

                # –û–∂–∏–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥–µ–Ω. —à—Ç–∞–±–∞
                while True:
                    last_message = await self.client.get_messages(self.bot_id, limit=1)
                    if last_message:
                        lstr = last_message[0].message.split('\n')
                        if "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏." in lstr[0]:
                            print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –≥–µ–Ω. —à—Ç–∞–±")
                            await asyncio.sleep(2)
                            await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                            await self.wait_for_health_refill()
                            await self.client.send_message(self.bot_id, damage_type)
                            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                            return
                    await asyncio.sleep(1)

            print("–ù–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥")


    async def wait_for_health_refill(self):
        await asyncio.sleep(3)
        
        # –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–∞–ø—á–∞ - –∂–¥—ë–º –µ—ë —Ä–µ—à–µ–Ω–∏—è
        if self.waiting_for_captcha:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è...")
            while self.waiting_for_captcha:
                print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ø—á–∏...")
                await asyncio.sleep(20)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
            print("–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏
        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=2)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any("–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ" in line for line in lstr):
                    await asyncio.sleep(1)
                    return
            await asyncio.sleep(1)

    async def wait_for_confirmation(self):
        try:
            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_future = asyncio.Future()

            @self.client.on(events.NewMessage(from_users=[self.bot_id]))
            async def confirmation_handler(event):
                if "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏" in event.message.text:
                    confirmation_future.set_result(True)
                    print("–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.")
                else:
                    confirmation_future.set_result(False)
                    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.")

            # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
            result = await asyncio.wait_for(confirmation_future, timeout=30)

            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            self.client.remove_event_handler(confirmation_handler)

            return result

        except asyncio.TimeoutError:
            print("–¢–∞–π–º-–∞—É—Ç: –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.")
            return False
    
    async def craft_rec(self, lstr):
        print("# –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫—Ä–∞—Ñ—Ç–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
        if "–†–µ—Ü–µ–ø—Ç" in lstr[2]:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å—Ç—Ä–æ–∫–∏
            lstr = lstr[4:]
            await asyncio.sleep(2)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞—Ñ—Ç–∞ —Ä–µ—Ü–µ–ø—Ç–∞
            for str_line in lstr:
                if str_line == "":
                    break
                craft_cmd = re.search(r" (/.*)$", str_line)
                if craft_cmd:
                    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫—Ä–∞—Ñ—Ç–∞: {craft_cmd.group(1)}")
                    await self.client.send_message(self.bot_id, craft_cmd.group(1))                                
                    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    confirmation = await self.wait_for_confirmation()
                    if not confirmation:
                        print("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∫—Ä–∞—Ñ—Ç.")
                        return

                    await asyncio.sleep(2) 


            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üî® –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å"
            await asyncio.sleep(2)
            await self.client.send_message(self.bot_id, "üî® –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö
            if any("–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:" in line for line in lstr):
                await self.check_talisman(lstr)

    async def check_talisman(self, lstr):
        print("# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–ª–∏—Å–º–∞–Ω")
        tali_type = {"‚ò£": 0, "üîµ": 1, "‚ö´": 2, "üî¥": 3, "üü¢": 4}
        pattern = r'(üîµ|üü¢|‚ö´|üî¥|‚ò£)\s*\+\s*(\d+)'

        talismans_burned = False

        for line in lstr:
            if "–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:" in line:
                continue
            if "–¢–∞–ª–∏–∫–∏ —Å–≥–æ—Ä–µ–ª–∏üíî" in line:
                talismans_burned = True
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–ª–∏—Å–º–∞–Ω—ã —Å–≥–æ—Ä–µ–ª–∏

            match = re.search(pattern, line)
            if match:
                found_symbol = match.group(1)
                talisman_level = int(match.group(2))
                talisman_info = (tali_type.get(found_symbol), talisman_level)
                if talisman_info:
                    print(f"# –ù–∞–π–¥–µ–Ω —Ç–∞–ª–∏—Å–º–∞–Ω: —Ç–∏–ø {found_symbol}, —É—Ä–æ–≤–µ–Ω—å {talisman_level}")
                    self.last_talisman_info = talisman_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–∞–ª–∏—Å–º–∞–Ω–µ
                    if talisman_level < 5: #—É—Ä–æ–≤–µ–Ω—å –∑–∞—Ç–æ—á–∫–∏
                        await asyncio.sleep(1)
                        await self._insert_talisman_and_stone(*talisman_info, lstr)
                    else:
                        print("–£—Ä–∞! –¢–∞–ª–∏—Å–º–∞–Ω –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
                    return talisman_info

        if talismans_burned:
            if self.last_talisman_info:
                print("# –¢–∞–ª–∏—Å–º–∞–Ω—ã —Å–≥–æ—Ä–µ–ª–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω —Å —É—Ä–æ–≤–Ω–µ–º 1")
                new_talisman_info = (self.last_talisman_info[0], 1)
                await self._insert_talisman_and_stone(*new_talisman_info, lstr)
                return new_talisman_info
            else:
                print("# –¢–∞–ª–∏—Å–º–∞–Ω—ã —Å–≥–æ—Ä–µ–ª–∏, –Ω–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–∞–ª–∏—Å–º–∞–Ω–µ")
                return None

        print("# –¢–∞–ª–∏—Å–º–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏")
        return None

    async def _insert_talisman_and_stone(self, talisman_type, talisman_level, lstr):
        print(f"# –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: talisman_type={talisman_type}, talisman_level={talisman_level}")
        print("# –í—Å—Ç–∞–≤–∫–∞ —Ç–∞–ª–∏—Å–º–∞–Ω–∞ –∏ –∫–∞–º–Ω—è")
        await asyncio.sleep(1)
        await self.client.send_message(self.bot_id, "üë®‚Äçüè≠ –ü–æ–º–æ—â–Ω–∏–∫")
        await asyncio.sleep(2)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.rf_message = await self.get_latest_message_with_buttons()
        if not self.rf_message:
            print("# self.rf_message is None, –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫")
            return False

        stone_type = 8 if talisman_level < 3 else 10
        print(f"# –í—ã–±—Ä–∞–Ω –∫–∞–º–µ–Ω—å —Ç–∏–ø–∞ {stone_type}")

        await self.rf_message.click(stone_type)
        await asyncio.sleep(2)

        await self.rf_message.click(talisman_type)
        await asyncio.sleep(2)

        messages = await self.get_latest_messages(limit=2)
        if any(message.split('\n')[0].startswith("‚ùå–ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:") for message in messages):
            print("# –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ '–ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å")
            return False

        # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
        print("# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫—Ä–∞—Ñ—Ç")
        await self._craft_and_process_result()

        return True

    async def _craft_and_process_result(self):
        await asyncio.sleep(1)
        print("# –ö—Ä–∞—Ñ—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        await self.client.send_message(self.bot_id, "üî® –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å")

    async def get_latest_message_with_buttons(self):
        print("# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        messages = await self.client.get_messages(self.bot_id, limit=1)
        await asyncio.sleep(2)
        for msg in messages:
            if msg.buttons:
                return msg
        return None

    async def get_latest_messages(self, limit=2):
        print("# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        last_messages = await self.client.get_messages(self.bot_id, limit=2)
        await asyncio.sleep(2)
        return [message.message for message in last_messages]

    async def check_group_list(self, lstr):
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º—ã –ª–∏–¥–µ—Ä—ã –ø–µ—â–µ—Ä—ã
        self.is_cave_leader = True

        print(" –∞ –≤–æ—Ç —á—Ç–æ –ø–æ —Å–æ—Å—Ç–∞–≤—É")
        print(f" –ú–æ—ë —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ª–∏–¥–µ—Ä–∞
        if not lstr or not lstr[0].endswith("/group_guild_join_715480502"):
            print("—Ç—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥")
            self.is_cave_leader = False
        else:
            self.is_cave_leader = True  # –õ–∏–¥–µ—Ä –ø–µ—â–µ—Ä—ã
            print("—Ç—ã –ø–∞—Ç–∏–≤–æ–¥")

        lstr.reverse()
        h_id = 0

        for line in lstr:
            if not line:
                break
            in_str_find = re.search("/p_guild_exc_(\d+)", line)
            if in_str_find:
                h_id = int(in_str_find.group(1))
                continue
            in_str_find = re.search("\d\) .*\[.*\](.*)üèÖ\d+—É—Ä\. (.*)", line)
            if not in_str_find:
                break
            nick = in_str_find.group(1)
            if nick == "Ros_Hangzhou":
                continue
            sost = in_str_find.group(2)

            if "–ú–µ—Ä—Ç–≤" in sost:
                if "ü•§" in sost and self.is_cave_leader and self.is_in_caves:
                    await self.client.send_message(h_id, "–†–µ—Å")

                continue

            if "üíñ" in sost:
                str_hp = re.search("‚ù§Ô∏è(\d+)/\d+", sost)
                helth = int(str_hp.group(1))
                if self.is_cave_leader and self.is_in_caves:
                    if helth < 1500:
                        await self.client.send_message(h_id, "–•–∏–ª")


                continue
            



    def common_cave(self):
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è common_cave")
        
        @self.client.on(events.NewMessage(from_users=[278339710, 715480502, 353501977, 681431333, 562559122, 255360779, 1757434874]))
        async def handle_specific_user_messages(event):
            if event.is_private:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
                print(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}: {event.message.text}")
                
                message_text = event.message.text.lower().strip()
                print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                if "_–±–∞–Ω–∫–∞" in message_text or "_–±–∞–Ω–∫—É" in message_text or "_–ø–∏—Ç—å" in message_text:
                    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /drink_102")
                    await self.client.send_message(self.bot_id, "/drink_102")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–≥—à" in message_text:  
                    if self.kopka:  
                        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç hp_11999")
                        await self.client.send_message(self.bot_id, self.hp_11999)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é hp_11999 –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è
                        self.my_health = self.my_max_health = 11999  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 11999
                        print(f"–ó–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.my_health}/{self.my_max_health}")
                        await asyncio.sleep(5)
                        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /go_to_gsh")
                        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                        await self.arrival_hil()  # –í—ã–∑—ã–≤–∞–µ–º arrival_hil –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥–µ–Ω. —à—Ç–∞–±
                    else:
                        await self.client.send_message(self.bot_id, self.hp_11999)
                        self.my_health = self.my_max_health = 11999  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 11999
                        await asyncio.sleep(2)
                        await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—à–∞–≥" in message_text:  
                    await asyncio.sleep(1)  
                    await self.rf_message.click(2)
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–º–æ–±—ã" in message_text:  
                    self.mobs = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –º–æ–±–æ–≤
                    await self.client.send_message(715480502, "–•–æ–¥–∏–º –Ω–∞ –º–æ–±–æ–≤")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞
                    await self.client.send_message(self.bot_id, RF.hp)  # –ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è –¥–ª—è –º–æ–±–æ–≤
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–¥–∞–Ω–∂–∏" in message_text:  
                    self.mobs = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –¥–∞–Ω–∂–µ–π
                    await self.client.send_message(715480502, "–•–æ–¥–∏–º –≤ –¥–∞–Ω–∂–∏")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞
                    await self.client.send_message(self.bot_id, RF.chv)
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–≤—ã—Ö–æ–¥" in message_text:  
                    await asyncio.sleep(1)  
                    await self.rf_message.click(3)
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—Ä–µ—Å" in message_text:  
                    if self.is_has_res:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ is_has_res —Ä–∞–≤–Ω–æ True
                            self.is_has_res = False
                            await asyncio.sleep(randint(14, 20))
                            await self.client.send_message(self.bot_id, self.hp_11999)  # –ù–∞–¥–µ–≤–∞–µ–º –±–∏–Ω–¥ –Ω–∞ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ HP
                            await asyncio.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
                            await self.rf_message.click(1)
                            print(self.my_health, self.my_max_health)
                            self.my_health = self.my_max_health = 11999  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è my_health –∏ my_max_health
                            self.last_bind = self.hp_11999
                            await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—Å–æ—Å—Ç–∞–≤" in message_text:  
                    await asyncio.sleep(1)  
                    await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–¥–∞–Ω–∂" in message_text and not self.is_moving:
                    await asyncio.sleep(1)  
                    if self.kopka:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ self.kopka
                        await self.client.send_message(self.bot_id, "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
                    else:
                        await self.client.send_message(self.bot_id, "/go_dange_10014")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—Ö–∏–ª" in message_text:  
                    if self.last_bind != self.hp_11999 and self.is_has_hil:
                        self.is_has_hil = False
                        await asyncio.sleep(5)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                        await self.client.send_message(self.bot_id, self.hp_11999)  # –ù–∞–¥–µ–≤–∞–µ–º 11999 HP
                        await asyncio.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
                        await self.rf_message.click(0)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_11999} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 11999)")
                        self.my_health = self.my_max_health = 11999
                        self.last_bind = self.hp_11999
                        await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—ç–Ω–∫–∞" in message_text:  
                    if self.last_energy_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ last_energy_message –Ω–µ None
                        await self.last_energy_message.forward_to(-1002220238697)  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    else:
                        await self.client.send_message(-1002220238697, "–µ—â—ë –Ω–µ –∫–∞–ø–Ω—É–ª–æ")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


                else:
                    print("–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")


        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è common_cave —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}")
        print(f"–ù–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ª–∏ –≤—ã –≤ –ø–µ—â–µ—Ä–∞—Ö: {self.is_in_caves}")
        print(f"–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –ª–∏–¥–µ—Ä–æ–º –ø–µ—â–µ—Ä: {self.is_cave_leader}")





    async def vihod_s_caves(self, lstr):
        self.is_cave_leader = any("/group_guild_join_715480502" in line for line in lstr)
        print(f"{'–¢—ã –ø–∞—Ç–∏–≤–æ–¥' if self.is_cave_leader else '–¢—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥'}")

        if not self.is_in_caves:
            print("–¢—ã –Ω–µ –≤ –ø–µ—â–µ—Ä–∞—Ö")
            return
        print("–¢—ã –≤ –ø–µ—â–µ—Ä–∞—Ö")

        total_health = 0
        alive_count = 0
        alive_has_heal = False
        group_has_res = False
        group_members = []

        for line in lstr:
            if not line.strip():
                continue
            
            if member_id := re.search(r"/p_guild_exc_(\d+)", line):
                group_members.append(int(member_id.group(1)))
                continue
            
            if member_info := re.search(r"\d\) .*\[.*\](.*?)üèÖ\d+—É—Ä\. (.*)", line):
                nick, status = member_info.groups()
                nick = nick.strip()
                
                is_alive = "–ú–µ—Ä—Ç–≤" not in status
                health = 0
                has_heal = "üíñ" in status
                has_res = "ü•§" in status
                
                if is_alive:
                    alive_count += 1
                    if health_match := re.search(r"‚ù§Ô∏è(\d+)/\d+", status):
                        health = int(health_match.group(1))
                        total_health += health
                    alive_has_heal = alive_has_heal or has_heal
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Å —É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∂–∏–≤–æ–≥–æ –∏–ª–∏ –º–µ—Ä—Ç–≤–æ–≥–æ
                group_has_res = group_has_res or has_res
                
                player_status = f"{nick}: HP {health}, {'alive' if is_alive else 'dead'}, {'has hil' if has_heal else 'no hil'}, {'has res' if has_res else 'no res'}"
                print(player_status)

        print(f"\n–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –≥—Ä—É–ø–ø—ã: {total_health}")
        print(f"–ñ–∏–≤—ã—Ö: {alive_count}, –ñ–∏–≤—ã–µ —Å —Ö–∏–ª–∫–∞–º–∏: {'–¥–∞' if alive_has_heal else '–Ω–µ—Ç'}, –ì—Ä—É–ø–ø–∞ —Å —Ä–µ—Å–∞–º–∏: {'–¥–∞' if group_has_res else '–Ω–µ—Ç'}")


        should_exit = False
        if alive_count == 1 and total_health < 2400:
            should_exit = True
            reason = "–æ—Å—Ç–∞–ª—Å—è 1 –∂–∏–≤–æ–π —Å –º–µ–Ω–µ–µ —á–µ–º 2400 HP"
        elif alive_count > 1 and total_health < 3500:
            should_exit = True
            reason = f"–æ—Å—Ç–∞–ª–æ—Å—å {alive_count} –∂–∏–≤—ã—Ö —Å —Å—É–º–º–∞—Ä–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º –º–µ–Ω–µ–µ 3500 HP"


        if should_exit and not alive_has_heal and not group_has_res:
            message = f"{'–¢—ã –ª–∏–¥–µ—Ä' if self.is_cave_leader else '–¢—ã –Ω–µ –ª–∏–¥–µ—Ä'}, –ø–æ—Ä–∞ –Ω–∞ –≤—ã—Ö–æ–¥. –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {total_health}, –Ω–µ—Ç —Ö–∏–ª–æ–∫ —É –∂–∏–≤—ã—Ö –∏ —Ä–µ—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"
            await self.client.send_message(715480502, message)
            print(message)
            
            if self.is_cave_leader:
                for member_id in group_members:
                    if member_id != 715480502:
                        await self.client.send_message(member_id, "–í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–µ—â–µ—Ä—ã")
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {member_id}: –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–µ—â–µ—Ä—ã")
                await asyncio.sleep(10) 
                await self.rf_message.click(3)
                
        else:
            print(f"–ï—â—ë —Ä–∞–Ω–æ –Ω–∞ –≤—ã—Ö–æ–¥. –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {total_health}, –ñ–∏–≤—ã—Ö: {alive_count}")


    async def hp_in_caves(self, lstr):
        print(f"–ü—Ä–∏–≤–µ—Ç, —è –≤ –ø–µ—â–µ—Ä–∞—Ö. –¢–µ–∫—É—â–∏–π –±–∏–Ω–¥: {self.after_bind}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø–µ—â–µ—Ä–∞—Ö
        if not self.is_in_caves:
            print("–¢—ã –Ω–µ –≤ –ø–µ—â–µ—Ä–∞—Ö, –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ Ros_Hangzhou
        for line in lstr:
            if "Ros_Hangzhou" in line:
                health_info = re.search(r"‚ù§Ô∏è(\d+)/\d+", line)
                if health_info:
                    current_health = int(health_info.group(1))
                    print(f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ {self.your_name}: {current_health}")

                # –õ–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
                # if 300 <= current_health <= 1500:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 300 –∏ 1500
                #     if self.last_bind != self.hp_11999 and self.is_has_hil:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º is_has_hil
                #         await self.client.send_message(self.bot_id, self.hp_11999)  # –ù–∞–¥–µ–≤–∞–µ–º 11999 HP
                #         print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_11999} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 11999)")
                #         await asyncio.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                #         await self.rf_message.click(0)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
                #         self.my_health = self.my_max_health = 11999
                #         self.last_bind = self.hp_11999  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∏–Ω–¥
                #         self.is_has_hil = False
                if 1500 < current_health <= 5117:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 1500 –∏ 5117
                    if self.after_bind != self.hp_5117:
                        await self.client.send_message(self.bot_id, self.hp_5117)  # –ù–∞–¥–µ–≤–∞–µ–º 5117 HP
                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_5117} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 5117)")
                        self.after_bind = self.hp_5117
                elif 5117 < current_health <= 5829:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 5117 –∏ 5829
                    if self.after_bind != self.hp_5829:
                        await self.client.send_message(self.bot_id, self.hp_5829)  # –ù–∞–¥–µ–≤–∞–µ–º 5829 HP
                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_5829} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 5829)")
                        self.after_bind = self.hp_5829
                elif 5829 < current_health <= 7412:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 5829 –∏ 7412
                    if self.after_bind != self.hp_7412:
                        await self.client.send_message(self.bot_id, self.hp_7412)  # –ù–∞–¥–µ–≤–∞–µ–º 7412 HP
                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_7412} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 7412)")
                        self.after_bind = self.hp_7412
                elif 7412 < current_health <= 8930:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 7412 –∏ 8930
                    if self.after_bind != self.hp_8930:
                        await self.client.send_message(self.bot_id, self.hp_8930)  # –ù–∞–¥–µ–≤–∞–µ–º 8930 HP
                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_8930} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 8930)")
                        self.after_bind = self.hp_8930
                elif 8930 < current_health <= 10403:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 8930 –∏ 10403
                    if self.after_bind != self.hp_10403:
                        await self.client.send_message(self.bot_id, self.hp_10403)  # –ù–∞–¥–µ–≤–∞–µ–º 10403 HP
                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_10403} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 10403)")
                        self.after_bind = self.hp_10403
                elif 10403 < current_health < 11999:  # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–∂–¥—É 10403 –∏ 11999
                    if self.after_bind != self.hp_11999:
                        await self.client.send_message(self.bot_id, self.hp_11999)  # –ù–∞–¥–µ–≤–∞–µ–º 11999 HP
                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_11999} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: 11999)")
                        self.after_bind = self.hp_11999
                break


    async def hp_in_caves_kingRagnar(self, lstr):
        print(f"–ü—Ä–∏–≤–µ—Ç, kingRagnar –≤ –ø–µ—â–µ—Ä–∞—Ö")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø–µ—â–µ—Ä–∞—Ö
        if not self.is_in_caves:
            print("–¢—ã –Ω–µ –≤ –ø–µ—â–µ—Ä–∞—Ö, –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        for line in lstr:
            if "kingRagnar" in line:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è kingRagnar
                health_info = re.search(r"‚ù§Ô∏è(\d+)/\d+", line)
                if health_info:
                    current_health = int(health_info.group(1))
                    print(f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ kingRagnar: {current_health}")

                    # –õ–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Ç–æ–≤ –¥–ª—è kingRagnar
                    if 10500 <= current_health <= 11500:  # –°–µ—Ç1
                        new_set = "–°–µ—Ç1"
                    elif 9500 <= current_health < 10500:  # –°–µ—Ç2
                        new_set = "–°–µ—Ç2"
                    elif 8000 <= current_health < 9500:  # –°–µ—Ç3
                        new_set = "–°–µ—Ç3"
                    elif 7000 <= current_health < 8000:  # –°–µ—Ç4
                        new_set = "–°–µ—Ç4"
                    elif 5700 <= current_health < 7000:  # –°–µ—Ç5
                        new_set = "–°–µ—Ç5"
                    elif 0 <= current_health < 5700:  # –°–µ—Ç6
                        new_set = "–°–µ—Ç6"
                    else:
                        new_set = None

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if new_set and new_set != self.last_set_kingRagnar:
                        await self.client.send_message(self.players["kingRagnarü§¥üèº"], new_set)
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {new_set}")
                        self.last_set_kingRagnar = new_set  # –û–±–Ω–æ–≤–ª—è–µ–º last_set

                    print(f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: {self.last_set_kingRagnar}")
                    break

    async def time_cave(self, lstr):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä lstr
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º
        self.is_cave_leader = any("/group_guild_join_715480502" in line for line in lstr)
        if not self.is_cave_leader:
            print("–¢—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥, time_cave –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥, –µ—Å–ª–∏ –Ω–µ –ø–∞—Ç–∏–≤–æ–¥
        print(f"{'–¢—ã –ø–∞—Ç–∏–≤–æ–¥' if self.is_cave_leader else '–¢—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥'}")
        
        if self.cave_task_running:
            print("–ó–∞–¥–∞—á–∞ time_cave —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # await self.client.send_message(715480502, "–ó–∞–¥–∞—á–∞ time_cave —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            return

        
        self.cave_task_running = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞
        print("–ú–µ—Ç–æ–¥ time_cave –∑–∞–ø—É—â–µ–Ω.")
        await self.client.send_message(715480502, "–ú–µ—Ç–æ–¥ time_cave –∑–∞–ø—É—â–µ–Ω.")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        CHECK_HOUR = 20
        CHECK_MINUTE = 55

        while True:
            now = datetime.datetime.now()
            print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
            await self.client.send_message(715480502, f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {now}")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            next_check = now.replace(hour=CHECK_HOUR, minute=CHECK_MINUTE, second=0, microsecond=0)

            if now >= next_check:
                next_check += datetime.timedelta(days=1)
                print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.")
                await self.client.send_message(715480502, f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: {next_check}")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

            wait_time = (next_check - now).total_seconds()
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ {CHECK_HOUR}:{CHECK_MINUTE}: {wait_time} —Å–µ–∫—É–Ω–¥.")
            await self.client.send_message(715480502, f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ {CHECK_HOUR}:{CHECK_MINUTE}: {wait_time} —Å–µ–∫—É–Ω–¥.")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await asyncio.sleep(wait_time)

            # –£—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ —Ñ–ª–∞–≥—É)
            if not self.is_in_caves or not self.is_cave_leader:  # –ï—Å–ª–∏ –Ω–µ –≤ –ø–µ—â–µ—Ä–µ –∏–ª–∏ –Ω–µ –ª–∏–¥–µ—Ä, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                await self.client.send_message(715480502, "–í—ã –Ω–µ –±—ã–ª–∏ –≤ –ø–µ—â–µ—Ä–µ –∏–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É.")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ –Ω–∞–∂–∞–ª–∏
                await asyncio.sleep(3)
                await self.client.send_message(self.bot_id, "/daily")
                break

            # –ï—Å–ª–∏ `self.is_moving` –∞–∫—Ç–∏–≤–µ–Ω, –∂–¥–µ–º, –ø–æ–∫–∞ –æ–Ω –Ω–µ —Å—Ç–∞–Ω–µ—Ç `False`
            while self.is_moving:
                await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

            await asyncio.sleep(randint(10, 50))
            await self.rf_message.click(3)
            await asyncio.sleep(5)
            await self.client.send_message(self.bot_id, "/daily")
            await self.client.send_message(715480502, "–í—ã –±—ã–ª–∏ –≤ –ø–µ—â–µ—Ä–µ –∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É.")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        self.cave_task_running = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –∫–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

    async def prepare_for_caves(self):
        print("–ù–∞—á–∞–ª–æ prepare_for_caves()")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–ª—Ç–∞—Ä—è—Ö
            messages = await self.client.get_messages(-1001284047611, limit=1)
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            if messages:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ -1001284047611:")
                print(f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {messages[0].id}")
                print(f"–î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {messages[0].date}")
                print(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {messages[0].text[:200]}...")  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                await self.parce_4v_logs(messages[0].text)
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ -1001284047611")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        if self.cmd_altar:
            print(f"–í—ã–±—Ä–∞–Ω –∞–ª—Ç–∞—Ä—å: {self.cmd_altar}")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—Ç–∞—Ä—è—Ö. –ë—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª—Ç–∞—Ä—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
        print("–ö–æ–Ω–µ—Ü prepare_for_caves()")

    def choose_random_altar(self):
        return random.choice([
            "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –î–∞–≥–∞–∑", 
            "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ", 
            "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ò—Å–∞", 
            "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –ò—Å—Å", 
            "ü§ñ–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏", 
            "ü§ñ–ê–ª—Ç–∞—Ä—å –¢–∏—Ä"
        ])


    async def handle_no_energy(self):
        print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏")
        await asyncio.sleep(5)
        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        await self.gokragi()

    async def handle_energy_found(self):
        print("–µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è")
        await asyncio.sleep(5)
        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        if self.mobs:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ñ–ª–∞–≥ –¥–ª—è –º–æ–±–æ–≤
            await self.check_arrival()  # –¥–ª—è –º–æ–±–æ–≤
        else:
            await self.gokragi()  # –¥–ª—è –¥–∞–Ω–∂–µ–π


    async def handle_energy(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
        if self.waiting_for_captcha or self.is_moving:
            print("–£–∂–µ –æ–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏–ª–∏ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏...")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø–µ—â–µ—Ä–∞—Ö
        if self.is_in_caves:
            if self.is_cave_leader:
                print("–í–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –ø–µ—â–µ—Ä–∞—Ö (–ª–∏–¥–µ—Ä)")
                await asyncio.sleep(1)
                await self.rf_message.click(2)
            else:
                print("–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –≥—Ä—É–ø–ø—É")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ –ø–µ—â–µ—Ä
        if not (self.is_nacheve_active or self.is_training or self.in_castle):
            print("–í–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤–Ω–µ –ø–µ—â–µ—Ä")
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
            
            # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞–ø—á–∏
            await asyncio.sleep(3)
            
            # –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–∞–ø—á–∞ - –∂–¥—ë–º –µ—ë —Ä–µ—à–µ–Ω–∏—è
            if self.waiting_for_captcha:
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞, –æ–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è...")
                while self.waiting_for_captcha:
                    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ø—á–∏...")
                    await asyncio.sleep(20)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
                print("–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏–ª–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ –±—ã–ª–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±—ã—Ç–∏–µ
            if self.mobs:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ñ–ª–∞–≥ –¥–ª—è –º–æ–±–æ–≤
                await self.check_arrival()         # –¥–ª—è –º–æ–±–æ–≤
            else:
                await self.check_arrival_dange()    # –¥–ª—è –¥–∞–Ω–∂–µ–π

