import re
import sys
import asyncio
import random
from random import randint
from telethon import events
from addons import qHash
import datetime
import threading
import RF_config  # –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
import time
#       ^\s*$\n            –≤ –ø–æ–∏—Å–∫–µ
class RF:
    # –ë–µ—Ä–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    cave_leader_id = RF_config.cave_leader_id
    hp = RF_config.hp
    chv = RF_config.chv
    your_name = RF_config.your_name
    directions = [
        "üí¶–í–æ–¥—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        "üí®–í–æ–∑–¥—É—à–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
        "‚õ∞–ó–µ–º–ª—è–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    ]
    def __init__(self, client):
        self.client = client
        # === –í–°–ï –ß–¢–û –†–ê–í–ù–û TRUE ===
        self.is_cave_leader = self.extra_hil = self.mobs = self.active = self.go_to_heal = True
        # === –í–°–ï –ß–¢–û –†–ê–í–ù–û FALSE ===
        self.is_run = self.na_straj = self.is_player_dead = self.fast_cave = self.cave_task_running = self.waiting_for_captcha = self.is_moving = self.in_castle = self.v_terminale = self.kopka = self.is_training = self.cave_message_pinned = self.prem = self.go_term_Aquilla = self.go_term_Basilaris = self.go_term_Castitas = self.is_in_caves = self.is_in_gh = self.is_has_hil = self.is_has_res = self.is_nacheve_active = self.in_battle = False
        # === –í–°–ï –ß–¢–û –†–ê–í–ù–û NONE ===
        self.cave_buttons_message = self.killed_on_chv = self.rf_message = self.last_talisman_info = self.cmd_altar = self.last_bind = self.after_bind = self.last_set_kingRagnar = self.move_timer = self.last_energy_message = self.got_reward = self.terminal_type = self.steps = self.cave_message_id = self.last_step = None
        # === –ß–ò–°–õ–ê ===
        self.bot_id = 577009581
        self.tomat_id = 278339710
        self.kroha_id = 353501977
        self.tamplier_id = 681431333
        self.john_id = 562559122
        self.pchelka_id = 255360779
        self.ded_id = 1757434874
        self.ros_id = 715480502
        self.zatochka = 5
        self.extra_hill_hp = 300
        self.ned_hill_hp = 1500
        self.bezvgroup = -1002220238697
        self.group59 = -1001323974021
        self.location = "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏"  # –õ–æ–∫–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # === –ö–û–ù–§–ò–ì –ò –í–´–ß–ò–°–õ–ï–ù–ò–Ø ===
        self.pvp_binds = RF_config.pvp_binds
        self.hp_binds = RF_config.hp_binds
        self.folt_binds = RF_config.folt_binds
        self.my_health = self.my_max_health = self.hp_binds[0][0]
        # === –ü–£–°–¢–´–ï –ö–û–õ–õ–ï–ö–¶–ò–ò ===
        self.experience_history = []
        # === –°–õ–û–í–ê–†–ò ===
        self.players = {
            "–ù–µ–∂–Ω—ã–π üçÖ": self.tomat_id,
            "üêæ·è¶·éÆ·éßœá·èó": self.kroha_id,
            "ùï¥ùñÜùñíùñïùñëùñéùñäùñó": self.tamplier_id,
            "John Doe": self.john_id,
            "‡πñ€£€ú·óØŒ±sÕ•pwÕ£oÕ´‚Ñùtüêù": self.pchelka_id,
            "üë®‚Äçü¶≥–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä‚ò†Ô∏è": self.ded_id,
            "Ros_Hangzhou": self.ros_id
        }
        self.altar_dict = {
            0: "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ò—Å–∞",
            1: "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ",
            2: "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –ò—Å—Å",
            3: "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –î–∞–≥–∞–∑",
            4: "ü§ñ–ê–ª—Ç–∞—Ä—å –¢–∏—Ä",
            5: "ü§ñ–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏"
        }
        # === –†–ï–ì–£–õ–Ø–†–ù–´–ï –í–´–†–ê–ñ–ï–ù–ò–Ø ===
        self.health_re = re.compile(r"–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ \D+(\d+)/(\d+)")
        self.battle_re = re.compile(r"^–°—Ä–∞–∂–µ–Ω–∏–µ —Å .*$")
        self.damage_re = re.compile(r"(\d+)$")
        self.arrival_re = re.compile(r'.*–ø—Ä–∏–±—É–¥–µ—à—å —á–µ—Ä–µ–∑\s*(\d+)\s*–º–∏–Ω\.\s*(\d+(?:\.\d+)?)\s*—Å–µ–∫\.')
        # === –£–°–õ–û–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ===
        if self.your_name == "üë®‚Äçü¶≥–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä‚ò†Ô∏è":
            self.mob_heal = 2000
            self.pvpgoheal = 3500
        elif self.your_name == "‡πñ€£€ú·óØŒ±sÕ•pwÕ£oÕ´‚Ñùtüêù":
            self.mob_heal = 4000
            self.pvpgoheal = 4500
        elif self.your_name == "Ros_Hangzhou":
            self.mob_heal = 4000
            self.pvpgoheal = 4500
        else:
            self.mob_heal = 6400
            self.pvpgoheal = 4500
        # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
        self.common_cave()
        self.setup_war_listener()
    def isIdCompare(self, id):
        return id == self.bot_id
    async def autoHeal(self):
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–ª–µ—á–µ–Ω–∏–µ–º: {self.my_health}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –º–µ—Ä—Ç–≤
        if self.is_player_dead:
            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –º–µ—Ä—Ç–≤. –ê–≤—Ç–æ–ª–µ—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return
        # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ —Ä–∞–≤–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–¥–∞–≤–Ω–µ–µ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–º–µ–Ω—É —Å–µ—Ç–æ–≤
        if self.my_health == self.my_max_health:
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ ({self.my_health}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–º–µ–Ω—É —Å–µ—Ç–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–¥–∞–≤–Ω–µ–µ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ)")
            return
        # –õ–µ—á–∏–º—Å—è, –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∏–∂–µ 300
        if self.my_health <= self.extra_hill_hp and self.is_has_hil and self.extra_hil:
            await self.cave_buttons_message.click(0)
            self.is_has_hil = self.extra_hil = False
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ ({self.my_health}). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ö–∏–ª.")
            print(f"–°—Ç–∞—Ç—É—Å has_hil –æ–±–Ω–æ–≤–ª–µ–Ω: {self.is_has_hil}")
        # –õ–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        elif self.extra_hill_hp <= self.my_health <= self.ned_hill_hp:
            await asyncio.sleep(15)  # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥
            if not self.is_player_dead and self.last_bind != self.hp_binds[0][1] and self.is_has_hil and self.extra_hil:
                self.is_has_hil = False
                await self.client.send_message(self.bot_id, self.hp_binds[0][1])  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π HP-—Å–µ—Ç
                await self.wait_for_set_change() #–∂–∞–ª–æ–±–∞
                print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_binds[0][1]} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: {self.hp_binds[0][0]})")
                await asyncio.sleep(1)
                await self.cave_buttons_message.click(0)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
                self.my_health = self.my_max_health = self.hp_binds[0][0]
                self.last_bind = self.hp_binds[0][1]
                print(f"–°—Ç–∞—Ç—É—Å has_hil –æ–±–Ω–æ–≤–ª–µ–Ω: {self.is_has_hil}")
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ HP-—Å–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ç–µ–∂–∞
        elif self.ned_hill_hp < self.my_health < self.hp_binds[0][0]:  # –û—Ç 1300 –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ HP
            # –ò—â–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π HP-—Å–µ—Ç (–∫–∞–∫ –≤ hp_in_caves –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è)
            selected_cmd = None
            selected_threshold = float('inf')
            for threshold, cmd in self.hp_binds:
                if self.my_health <= threshold and threshold < selected_threshold:
                    selected_cmd = cmd
                    selected_threshold = threshold
            # –ú–µ–Ω—è–µ–º —Å–µ—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            if selected_cmd and self.last_bind != selected_cmd:
                await self.client.send_message(self.bot_id, selected_cmd)
                print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {selected_cmd} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: {selected_threshold})")
                self.last_bind = selected_cmd
        else:
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ–µ ({self.my_health}). –õ–µ—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    async def change_bind_based_on_health(self):
        if self.my_health <= self.pvpgoheal:
            return  # –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ‚Äì –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        # –ò—â–µ–º –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ç (–Ω–∞–∏–º–µ–Ω—å—à–∏–π HP >= —Ç–µ–∫—É—â–µ–≥–æ HP)
        selected_cmd = None
        selected_threshold = float('inf')  # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
        for threshold, bind_cmd in self.pvp_binds:
            if self.my_health <= threshold and threshold < selected_threshold:
                selected_cmd = bind_cmd
                selected_threshold = threshold
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤ pvp_binds, –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π (–ø–µ—Ä–≤—ã–π)
        if not selected_cmd:
            max_threshold, max_bind = self.pvp_binds[0]
            selected_cmd = max_bind
            selected_threshold = max_threshold
            print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥—ã –Ω–∞: {selected_cmd} (–∑–¥–æ—Ä–æ–≤—å–µ –≤—ã—à–µ –≤—Å–µ—Ö –ø–æ—Ä–æ–≥–æ–≤)")
        else:
            print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥—ã –Ω–∞: {selected_cmd} (–∑–¥–æ—Ä–æ–≤—å–µ ‚â§ {selected_threshold})")
        await self.client.send_message(self.bot_id, selected_cmd)
        await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç
        await asyncio.sleep(1)
    async def hp_in_caves(self, lstr):
        print(f"–ü—Ä–∏–≤–µ—Ç, —è –≤ –ø–µ—â–µ—Ä–∞—Ö. –¢–µ–∫—É—â–∏–π –±–∏–Ω–¥: {self.after_bind}")
        if not self.is_in_caves:
            print("–¢—ã –Ω–µ –≤ –ø–µ—â–µ—Ä–∞—Ö, –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        if self.is_player_dead:
            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –º–µ—Ä—Ç–≤. –ê–≤—Ç–æ–ª–µ—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return
        for line in lstr:
            if self.your_name in line:
                # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å —Å–µ—Ä–¥—Ü–µ–º
                if "–ú–µ—Ä—Ç–≤" in line:
                    print(f"{self.your_name} –º–µ—Ä—Ç–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–º–µ–Ω—É —Å–µ—Ç–æ–≤.")
                    return
                health_info = re.search(r"‚ù§Ô∏è(\d+)/\d+", line)
                if not health_info:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è {self.your_name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    return
                current_health = int(health_info.group(1))
                print(f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ {self.your_name}: {current_health}")
                # –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–±–æ—Ä –±–∏–Ω–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                if not self.is_moving:
                    # —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: —Å–Ω–∞—á–∞–ª–∞ PVP-—Å–µ—Ç—ã, –ø–æ—Ç–æ–º HP –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                    selected_cmd = None
                    selected_threshold = float('inf')
                    for threshold, cmd in self.pvp_binds:
                        if current_health <= threshold and threshold < selected_threshold:
                            selected_cmd = cmd
                            selected_threshold = threshold
                    if not selected_cmd:
                        selected_threshold = float('inf')
                        for threshold, cmd in self.hp_binds:
                            if current_health <= threshold and threshold < selected_threshold:
                                selected_cmd = cmd
                                selected_threshold = threshold
                    mode = "PVP-—Å–µ—Ç" if any(selected_threshold == t for t, _ in self.pvp_binds) else "—Ä–µ–∑–µ—Ä–≤ HP-—Å–µ—Ç"
                    print(f"–†–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {mode}")
                else:
                    # —Ä–µ–∂–∏–º –¥–≤–∏–∂–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ HP-—Å–µ—Ç—ã
                    selected_cmd = None
                    selected_threshold = float('inf')
                    for threshold, cmd in self.hp_binds:
                        if current_health <= threshold and threshold < selected_threshold:
                            selected_cmd = cmd
                            selected_threshold = threshold
                    print("–†–µ–∂–∏–º –¥–≤–∏–∂–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π HP-—Å–µ—Ç")
                if selected_cmd and self.after_bind != selected_cmd:
                    try:
                        await self.client.send_message(self.bot_id, selected_cmd)
                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞ {selected_threshold} HP: {selected_cmd}")
                        self.after_bind = selected_cmd
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã —Å–º–µ–Ω—ã —Å–µ—Ç–∞: {e}")
                elif selected_cmd:
                    print(f"–°–µ—Ç —É–∂–µ –Ω–∞–¥–µ—Ç: {selected_cmd} ({selected_threshold} HP)")
                else:
                    print(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ç –¥–ª—è HP: {current_health}")
                break  # –≤—ã—à–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    def isCaveLeaderIdCompare(self, id):
        return id == self.cave_leader_id
    def reset_health(self):
        self.my_health = self.my_max_health = self.hp_binds[0][0]
        self.in_battle = False
        self.is_player_dead = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–º–µ—Ä—Ç–∏
        print(f"–ó–¥–æ—Ä–æ–≤—å–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {self.my_health}")
    async def checkHealth(self, lstr) -> bool:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è
        if self.updateHealth(lstr[0]):
            return True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–°—Ä–∞–∂–µ–Ω–∏–µ —Å"
        if not self.isBattleStart(lstr[0]):
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±–æ–π —Å —ç–ª–∏—Ç–Ω—ã–º –º–æ–±–æ–º –∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –±–æ–π
        if self.skipBattle(lstr):
            return False
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–µ –∏–ª–∏ –æ–± –∏–≥—Ä–æ–∫–µ
        lstr = lstr[2:]
        # –ü–æ–¥—Å—á–µ—Ç —É—Ä–æ–Ω–∞, –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫—É
        self.calculateDamage(lstr)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏
        if self.is_player_dead:
            # self.reset_health()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            return False  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ö–∏–ª–∞
        await self.autoHeal()
        return True
    def updateHealth(self, line: str) -> bool:
        match = self.health_re.search(line)
        if match:
            new_health = int(match.group(1))
            new_max_health = int(match.group(2))
            print(f"–°—Ç–∞—Ä–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}/{self.my_max_health}")
            self.my_health = new_health
            self.my_max_health = new_max_health
            print(f"–ó–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.my_health}/{self.my_max_health}")
            return True
        return False
    def isBattleStart(self, line: str) -> bool:
        return bool(self.battle_re.search(line))
    def skipBattle(self, lstr: list) -> bool:
        return any(phrase in lstr[0] for phrase in ["–≠–ª–∏—Ç–Ω—ã–π", "–≠–ª–∏—Ç–Ω–∞—è"]) or "–≠–Ω–µ—Ä–≥–∏—è" in lstr[-1]
    def calculateDamage(self, lstr: list):
        if not self.in_battle:
            return
        for str_line in lstr:
            if self.my_health <= 0:
                print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –º–µ—Ä—Ç–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞")
                self.in_battle = False
                self.is_player_dead = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–º–µ—Ä—Ç–∏
                return
            if not str_line or "–¢—ã " in str_line or " –Ω–∞–Ω–µ—Å —É–¥–∞—Ä " not in str_line:
                continue
            match = self.damage_re.search(str_line)
            if match:
                self.my_health -= int(match.group(1))
                print(f"–ü–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω: {match.group(1)}, —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–º–µ—Ä –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
                if self.my_health <= 0:
                    self.is_player_dead = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–º–µ—Ä—Ç–∏
                    print("–ó–¥–æ—Ä–æ–≤—å–µ —Ä–∞–≤–Ω–æ –∏–ª–∏ –º–µ–Ω—å—à–µ –Ω—É–ª—è. –ò–≥—Ä–æ–∫ —É–º–µ—Ä.")
    async def set_moving_flag(self, duration):
        self.is_moving = True
        self.killed_on_chv = False
        self.na_straj = False
        self.in_castle = False
        self.is_nacheve_active = False
        self.kopka = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–º–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if self.move_timer:
            self.move_timer.cancel()
        self.move_timer = asyncio.create_task(self.reset_moving_flag(duration))
    async def reset_moving_flag(self, duration):
        await asyncio.sleep(duration)
        self.is_moving = False
    # –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å:
    async def _delayed_restart(self):
        # –û–∂–∏–¥–∞–µ–º –ø–æ–∫–∞ self.kopka —Å—Ç–∞–Ω–µ—Ç True
        while not self.kopka:
            print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–ø–∫–∏...")
            await asyncio.sleep(5)
        print("–ö–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É")
        await asyncio.sleep(60)
        await self.client.disconnect()
        import os, sys
        os.execv(sys.executable, [sys.executable] + sys.argv)
    async def msg_parce(self, message):
        if not self.is_run:
            return
        lstr = message.message.split('\n')
        val = qHash(lstr[0])
        if val == 0:
            return
        print(val, lstr[0])
        # –≤ –ø–µ—â–µ—Ä–∞—Ö
        if any(phrase in line for line in lstr for phrase in [
            "_–±—É–ª–æ—á–∫–∞"
        ]):    
            print("–±—É–ª–æ—á–∫–∞")
            await self.client.send_message(self.cave_leader_id, "–±—É–ª–æ—á–∫–∞")
        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏!"
        ]):
            await asyncio.sleep(1)
            # await self.client.send_message(self.bot_id, "ü§ñ–ê–ª—Ç–∞—Ä—å –¢–∏—Ä")
            await self.client.send_message(self.bot_id, "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ò—Å–∞")
        elif (lstr[-1].endswith("–∏ –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.") or lstr[-1].startswith("–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –Ω–∞–¥")) and self.in_castle:
            await message.forward_to(self.group59) 
        elif any("–ü–æ—Å–µ–π–¥–æ–Ω–∞ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º!" in line for line in lstr) and not self.is_in_caves:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ü–æ—Å–µ–π–¥–æ–Ω–∞")
            asyncio.create_task(self._delayed_restart())
        elif any(phrase in line for line in lstr for phrase in [
            "—Ç—ã –º–µ—Ä—Ç–≤, –¥–æ–∂–¥–∏—Å—å –ø–æ–∫–∞ –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å"
        ]):    
            self.is_has_hil = self.extra_hil = True
            self.after_bind = self.hp_binds[0][1]
        elif any(phrase in line for line in lstr for phrase in [
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ª–µ—á–∏—Ç—å—Å—è"
        ]):    
            self.is_has_hil = self.extra_hil = False
            self.after_bind = self.hp_binds[0][1]
        elif any(phrase in line for line in lstr for phrase in [
                    "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–∞—Ç–∫–Ω—É–ª–∞—Å—å"
                ]):
                    await asyncio.sleep(10)
                    if self.is_in_caves:  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ self.is_in_caves
                        await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
                        await asyncio.sleep(20)
                        self.last_bind = self.after_bind
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä–µ–¥ autoHeal
                        await self.client.send_message(self.bot_id, "/hero")
                        await asyncio.sleep(3)  # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
                        response = await self.client.get_messages(self.bot_id, limit=1)
                        if response:
                            health_line = next((line for line in response[0].text.split('\n') if '‚ù§–ó–¥–æ—Ä–æ–≤—å–µ:' in line), None)
                            if health_line:
                                match = re.search(r'‚ù§–ó–¥–æ—Ä–æ–≤—å–µ:\s*(\d+)', health_line)
                                if match:
                                    self.my_health = int(match.group(1))
                                    print(f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä–µ–¥ autoHeal: {self.my_health}")
                                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∏–∂–µ extra_hill_hp, –≤–µ–¥–µ–º —Å–µ–±—è –∫–∞–∫ –º–µ–∂–¥—É extra –∏ ned
                                    if self.my_health < self.extra_hill_hp:  # –ù–∞–ø—Ä–∏–º–µ—Ä, 100 HP < 300
                                        print(f"–ó–¥–æ—Ä–æ–≤—å–µ ({self.my_health}) –Ω–∏–∂–µ {self.extra_hill_hp}, –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∫–∞–∫ –¥–ª—è {self.extra_hill_hp}-{self.ned_hill_hp}")
                                        await asyncio.sleep(8)  # –ñ–¥–µ–º 8 —Å–µ–∫—É–Ω–¥, –∫–∞–∫ –≤ —Å–ª—É—á–∞–µ –º–µ–∂–¥—É extra –∏ ned
                                        if not self.is_player_dead and self.last_bind != self.hp_binds[0][1] and self.is_has_hil and self.extra_hil:
                                            self.is_has_hil = False
                                            await self.client.send_message(self.bot_id, self.hp_binds[0][1])  # –ù–∞–¥–µ–≤–∞–µ–º {self.hp_binds[0][0]}) HP
                                            await self.wait_for_set_change() #–∂–∞–ª–æ–±–∞ –ø–æ–≤—Ç–æ—Ä
                                            print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_binds[0][1]} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: {self.hp_binds[0][0]}))")
                                            await asyncio.sleep(1)
                                            await self.cave_buttons_message.click(0)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫ –¥–ª—è —Ö–∏–ª–∞
                                            self.my_health = self.my_max_health = self.hp_binds[0][0]
                                            self.last_bind = self.hp_binds[0][1]
                                            print(f"–°—Ç–∞—Ç—É—Å has_hil –æ–±–Ω–æ–≤–ª–µ–Ω: {self.is_has_hil}")
                                        # –ñ–¥–µ–º 90 —Å–µ–∫—É–Ω–¥ –∏ –¥–µ–ª–∞–µ–º –∫–ª–∏–∫, –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –≤ –ø–µ—â–µ—Ä–µ
                                        await asyncio.sleep(90)
                                        if self.is_in_caves and self.is_cave_leader and not self.is_moving:
                                            await self.cave_buttons_message.click(2)
                                            print("–í—ã–ø–æ–ª–Ω–µ–Ω –∫–ª–∏–∫ (2) –ø–æ—Å–ª–µ 90 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
                                        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–æ—Å–ª–µ —Ö–∏–ª–∞
                                else:
                                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–¥–æ—Ä–æ–≤—å–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏")
                            else:
                                print("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ")
                        else:
                            print("–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –Ω–∞ /hero")
                        await self.autoHeal()  # –í—ã–∑—ã–≤–∞–µ–º autoHeal() –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                        # –ñ–¥–µ–º 90 —Å–µ–∫—É–Ω–¥ –∏ –¥–µ–ª–∞–µ–º –∫–ª–∏–∫, –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –≤ –ø–µ—â–µ—Ä–µ (–¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å autoHeal)
                        await asyncio.sleep(90)
                        if self.is_in_caves and self.is_cave_leader and not self.is_moving:
                            await self.cave_buttons_message.click(2)
                            print("–í—ã–ø–æ–ª–Ω–µ–Ω –∫–ª–∏–∫ (2) –ø–æ—Å–ª–µ autoHeal –∏ 90 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
        if any(phrase in lstr[0] for phrase in [
            "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", 
            "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ –ø–µ—â–µ—Ä—ã –Ω–∞ —Ñ—É–Ω–∏–∫—É–ª–µ—Ä–µ",
            "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ –ø–µ—â–µ—Ä—ã –Ω–∞ —Å–∞–Ω—è—Ö",
        ]):
            self.is_in_caves = self.is_has_hil = self.is_has_res = self.extra_hil = True
            self.my_health = self.my_max_health = self.hp_binds[0][0]
            self.after_bind = self.hp_binds[0][1]
            self.steps = 0  # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —à–∞–≥–∏ —Å 0
            await asyncio.sleep(randint(4, 6))
            await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
            print("–≤ –ø–µ—â–µ—Ä–∞—Ö")
        elif any(phrase in lstr[0] for phrase in [
            "–ü–µ—â–µ—Ä—ã –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä. –ü–µ—â–µ—Ä–∞",
            "–¢—ã –ø—Ä–∏–±—ã–ª –≤ –ø–µ—â–µ—Ä—É ‚Ññ"
        ]):
            if self.steps is not None:
                self.steps += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —à–∞–≥–æ–≤
                print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —à–∞–≥–æ–≤: {self.steps}")            
        elif any(phrase in line for line in lstr for phrase in [
            "–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ",
        ]):
            self.is_has_hil = False  
            self.after_bind = self.hp_binds[0][1]
            print(f"–°—Ç–∞—Ç—É—Å has_hil –æ–±–Ω–æ–≤–ª–µ–Ω: {self.is_has_hil}")  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ has_hil
            self.waiting_for_captcha = False  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏
        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤",
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–∫—Ä–µ—à–∞—Ç—å—Å—è",
        ]):
            self.after_bind = self.last_bind = self.hp_binds[0][1]
            self.my_health = self.my_max_health = self.hp_binds[0][0]
            self.reset_health()
            self.kopka = False
            print(self.my_health, self.my_max_health)
            # –Ω–∞ –Ω–æ–≤—ã–π –≥–æ–¥ –∏–¥—Ç–∏ –≤ –∫—Ä–∞–≥–∏ –ø–æ—Å–ª–µ —Ä–µ—Å–∞
            if not self.is_in_caves and not self.na_straj and not self.in_castle and not self.waiting_for_captcha and not self.is_nacheve_active:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å–ª–æ–≤–∏–µ
                await asyncio.sleep(3)
                await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
        elif any(
            phrase in line for line in lstr for phrase in [
                "–û–∂–∏–¥–∞–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
            ]
        ) or any(re.search(rf"–æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –Ω–∞–¥ .*{self.your_name}", line) for line in lstr):           
            self.my_health = self.my_max_health = self.hp_binds[0][0]
            self.after_bind = self.last_bind = self.hp_binds[0][1]  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∏–Ω–¥
            self.is_player_dead = True
            await asyncio.sleep(5)
            if self.is_has_res and self.is_in_caves:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ is_has_res —Ä–∞–≤–Ω–æ True –∏ –º—ã –≤ –ø–µ—â–µ—Ä–∞—Ö
                self.is_has_res = False
                await asyncio.sleep(5)
                await self.client.send_message(self.bot_id, self.hp_binds[0][1])  # –ù–∞–¥–µ–≤–∞–µ–º –±–∏–Ω–¥ –Ω–∞ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ HP
                await self.wait_for_set_change() #–∂–∞–ª–æ–±–∞
                await asyncio.sleep(1)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
                await self.cave_buttons_message.click(1)
                print(self.my_health, self.my_max_health)
        elif "–°—Ä–∞–∂–µ–Ω–∏–µ —Å" in lstr[0] and not any("–†—é–∫–∑–∞–∫" in line for line in lstr):
            self.in_battle = True   
        elif any("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã —É–º–µ—Ä" in line for line in lstr):
            self.in_battle = False     
        elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –∑–∞–º–µ—Ä–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç" in lstr[0]:
            await asyncio.sleep(1)
            await self.cave_buttons_message.click(2)
        elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Å–∏–ª—ã" in lstr[0]:
            if self.fast_cave:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è fast_ceve
                await asyncio.sleep(1)
                await self.cave_buttons_message.click(2)
        elif lstr[0].endswith("‚úÖ"): 
            await asyncio.sleep(1)
            await self.client.send_message(self.group59, "–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        # ‚îÄ‚îÄ –Ω–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ¬´–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ –∑–∞–º–æ–∫¬ª ‚îÄ‚îÄ
        elif lstr[0].startswith("–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ –∑–∞–º–æ–∫"):
            await message.forward_to(self.group59)   # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –≥—Ä—É–ø–ø—É 59
            print("–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤ –∑–∞–º–æ–∫")
        elif "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–±—É–¥–µ—Ç –≤ –≥–µ–Ω. —à—Ç–∞–± —á–µ—Ä–µ–∑" in lstr[0]:
            print("—á—É–≤–∞—á–æ–∫, —Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª –ø–µ—â–µ—Ä—É")
            await asyncio.sleep(5)
            self.fast_cave = False
            self.is_in_caves = False
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è duration –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            match = re.search(r"—á–µ—Ä–µ–∑\s*(\d+)\s*–º–∏–Ω", lstr[0])
            if match:
                duration = int(match.group(1)) * 60  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                await self.set_moving_flag(duration)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–≤–∏–∂–µ–Ω–∏—è
            await self.client.send_message(self.bot_id, RF.hp)  # –ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è –¥–ª—è –º–æ–±–æ–≤
            await self.check_arrival()
            self.steps = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —à–∞–≥–æ–≤
            self.cave_message_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            self.cave_message_pinned = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
            self.experience_history = []  # –î–æ–±–∞–≤–ª–µ–Ω–æ: —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—ã—Ç–∞
        elif lstr[0].startswith("–°–æ—Å—Ç–∞–≤:"):
            print("—á—Ç–æ —Ç–∞–º –ø–æ —Å–æ—Å—Ç–∞–≤—É")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–ª–æ–≤
            score_line = lstr[1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±–∞–ª–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
            if "–ë–∞–ª–ª—ã:" in score_line:
                score = int(score_line.split(":")[1].strip().split()[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
                if score == 11:
                    self.fast_cave = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ fast_cave –≤ True
                    print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ fast_cave –≤ True, –±–∞–ª–ª—ã —Ä–∞–≤–Ω—ã 11.")
                else:
                    print(f"–ë–∞–ª–ª—ã –Ω–µ —Ä–∞–≤–Ω—ã 11, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {score}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await asyncio.sleep(1)
            await self.check_group_list(lstr)
            # await asyncio.sleep(2)
            await self.vihod_s_caves(lstr)
            # await asyncio.sleep(2)
            await self.hp_in_caves(lstr)
            # await asyncio.sleep(2)
            # await self.hp_in_caves_kingRagnar(lstr)
            # await asyncio.sleep(2)
            await self.time_cave(lstr)
            # await self.cave_profit(lstr)
        elif lstr[0].endswith("–Ω–µ –≤ –≥–µ–Ω. —à—Ç–∞–±–µ]"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ üêæ·è¶·éÆ·éßœá·èó –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if "üêæ·è¶·éÆ·éßœá·èó" in lstr[0]:
                await message.forward_to(self.bezvgroup)  # —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è üêæ·è¶·éÆ·éßœá·èó –±–µ–∑ –≤ 
            else:
                await message.forward_to(self.group59)  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 59
            # –ò—â–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            players_not_in_gh = re.findall(r'(–ù–µ–∂–Ω—ã–π üçÖ|üêæ·è¶·éÆ·éßœá·èó|ùï¥ùñÜùñíùñïùñëùñéùñäùñó|John Doe|‡πñ€£€ú·óØŒ±sÕ•pwÕ£oÕ´‚Ñùtüêù|üë®‚Äçü¶≥–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä‚ò†Ô∏è)', lstr[0])
            if players_not_in_gh:
                for player in players_not_in_gh:
                    if player in self.players:
                        print(f"{player} –Ω–µ –≤ –≥–µ–Ω. —à—Ç–∞–±–µ")
                        await self.client.send_message(self.players[player], "–î–∞–≤–∞–π—Ç–µ –≤ –≥–µ–Ω. —à—Ç–∞–±")
            if self.mobs:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ñ–ª–∞–≥ –¥–ª—è –º–æ–±–æ–≤
                await self.client.send_message(self.bot_id, self.location)  # –¥–ª—è –º–æ–±–æ–≤
            else:
                print("bag bag bag")  # –¥–ª—è –¥–∞–Ω–∂–µ–π
        elif "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å –≥—Ä—É–ø–ø—É" in lstr[0]:
            await asyncio.sleep(2)
            await self.client.send_message(self.bot_id, "22")
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "üèÖ–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é"
        elif lstr[0].startswith("üèÖ–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é"):
            gerain_score = None
            avada_score = None
            ros_score = None
            for line in lstr:
                if "GERAIN" in line:
                    match = re.search(r"\d+\((\d+)\)—É—Ä", line)
                    if match:
                        gerain_score = int(match.group(1))
                elif "AvadaKedavra" in line:
                    match = re.search(r"\d+\((\d+)\)—É—Ä", line)
                    if match:
                        avada_score = int(match.group(1))
                elif self.your_name in line:
                    match = re.search(r"\d+\((\d+)\)—É—Ä", line)
                    if match:
                        ros_score = int(match.group(1))
            if gerain_score is not None and avada_score is not None and ros_score is not None:
                # –†–∞–∑–Ω–∏—Ü–∞ GERAIN - player name
                diff_gerain_ros = gerain_score - ros_score
                # –†–∞–∑–Ω–∏—Ü–∞ AvadaKedavra - player name
                diff_avada_ros = avada_score - ros_score
                msg = (
                    f"–†–∞–∑–Ω–∏—Ü–∞ —Å GERAIN : {diff_gerain_ros}\n"
                    f"–†–∞–∑–Ω–∏—Ü–∞ —Å AvadaKedavra : {diff_avada_ros}"
                )
                await self.client.send_message(self.cave_leader_id, msg)
        # –Ω–∞ —Å—Ç—Ä–∞–∂–µ
        elif "–ë–æ–π —Å –±–æ—Å—Å–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ." in lstr[0]:
            print("–¥–æ—à–µ–ª –¥–æ —Å—Ç—Ä–∞–∂–∞")
            self.na_straj = True
            await self.straj()
        elif "–ë–æ—Å—Å –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è. –ü—Ä–æ—Ö–æ–¥ –≤ –ª–æ–∫–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç!" in lstr[0]:  # –µ—Å–ª–∏ —É–º–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–∂–µ –∏ —Å–Ω–æ–≤–∞ —Ö–æ—á–µ—à—å –∏–¥—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–∂–∞
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, self.location)
        # –Ω–∞ —á–≤
        elif "–¢—ã –±—ã–ª —É–±–∏—Ç!" in lstr[0]:  # –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–∞–∑—ã
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–∞–ø—á–∏
            if self.waiting_for_captcha:
                print("–û–∂–∏–¥–∞–Ω–∏–µ CAPTCHA, –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è.")
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º CAPTCHA
            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –±—ã–ª —É–±–∏—Ç!")
            # await self.client.send_message(self.bot_id, RF.chv)
            await self.check_arrival()
        elif any(phrase in line for line in lstr for phrase in [
            "–ê–ª—Ç–∞—Ä—å –•–∞–≥–∞–ª",
        ]):
            self.got_reward = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
            await asyncio.sleep(5)
            await self.client.send_message(self.bot_id, "üßù‚Äç‚ôÄ –¢–µ—Ä–º–∏–Ω–∞–ª Castitas")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            self.terminal_type = "üßù‚Äç‚ôÄ –¢–µ—Ä–º–∏–Ω–∞–ª Castitas"  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        elif any(phrase in line for line in lstr for phrase in [
            "–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏",
            "–ê–ª—Ç–∞—Ä—å –¢–∏—Ä",
        ]):
            self.got_reward = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
            if self.go_term_Aquilla:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞
                await asyncio.sleep(5)
                await self.client.send_message(self.bot_id, "ü§ñ –¢–µ—Ä–º–∏–Ω–∞–ª Aquilla")
            else:
                # –ï—Å–ª–∏ —Ñ–ª–∞–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤—ã–∑—ã–≤–∞–µ–º nacheve()
                await self.nacheve()
            self.terminal_type = "ü§ñ –¢–µ—Ä–º–∏–Ω–∞–ª Aquilla"  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        elif any(phrase in line for line in lstr for phrase in [
            "–ê–ª—Ç–∞—Ä—å –ò—Å–∞",
            "–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ",
        ]):
            self.got_reward = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
            if self.go_term_Basilaris:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞
                await asyncio.sleep(5)
                await self.client.send_message(self.bot_id, "üë©‚ÄçüöÄ –¢–µ—Ä–º–∏–Ω–∞–ª Basilaris")
            else:
                # –ï—Å–ª–∏ —Ñ–ª–∞–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤—ã–∑—ã–≤–∞–µ–º nacheve()
                await self.nacheve()
            self.terminal_type = "üë©‚ÄçüöÄ –¢–µ—Ä–º–∏–Ω–∞–ª Basilaris"  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É",
        ]):
            await asyncio.sleep(1)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é terminal_type –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –í–∞–ª–µ—Ä–µ
            message = f"–±—É–¥—É –≤ {self.terminal_type} —á–µ—Ä–µ–∑ —Ç–∏–∫"
            # await self.client.send_message(self.tamplier_id, message)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É 59 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª Aquilla –∏–ª–∏ Castitas
            # if self.terminal_type in ["ü§ñ –¢–µ—Ä–º–∏–Ω–∞–ª Aquilla", "üßù‚Äç‚ôÄ –¢–µ—Ä–º–∏–Ω–∞–ª Castitas"]:
            #     await self.client.send_message(self.group59, message)
            # await self.client.send_message(self.bezvgroup, "ü§ñ –¢–µ—Ä–º–∏–Ω–∞–ª Aquilla") # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –±–µ–∑ –≤
        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã –ø—Ä–∏–±—ã–ª –∫ –∞–ª—Ç–∞—Ä—é",
            "—Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É —Ç–æ–ª—å–∫–æ –∏–∑ –∞–ª—Ç–∞—Ä—è",
        ]):
            self.got_reward = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
            await self.nacheve()
        elif any(phrase in line for line in lstr for phrase in [
            "–±–æ–π –∑–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        ]):
            self.v_terminale = True
            self.got_reward = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
            await asyncio.sleep(1)
            if self.terminal_type == "üßù‚Äç‚ôÄ –¢–µ—Ä–º–∏–Ω–∞–ª Castitas":
                await self.nacheve()
            elif self.terminal_type in ["ü§ñ –¢–µ—Ä–º–∏–Ω–∞–ª Aquilla", "üë©‚ÄçüöÄ –¢–µ—Ä–º–∏–Ω–∞–ª Basilaris"]:
                await self.vterminale()
            # if self.your_name == "üë®‚Äçü¶≥–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä‚ò†Ô∏è":
            #     await asyncio.sleep(1)
            #     # await self.nacheve()
            #     await self.vterminale()
            # elif self.your_name == "Ros_Hangzhou":
            #     await asyncio.sleep(1)
            #     # await self.nacheve()
            #     await self.vterminale()
            # elif self.your_name == "ùï¥ùñÜùñíùñïùñëùñéùñäùñó":
            #     await asyncio.sleep(1)
            #     # await self.nacheve()
            #     await self.vterminale()
            # elif self.your_name == "‡πñ€£€ú·óØŒ±sÕ•pwÕ£oÕ´‚Ñùtüêù":
            #     await asyncio.sleep(1)
            #     # await self.nacheve()
            #     await self.vterminale()
        elif any(phrase in line for line in lstr for phrase in [
            "–ê–¥–µ–Ω–∞ —É–∂–µ –Ω–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç–µ.",
        ]):
            print("–ü–æ–ª—É—á–µ–Ω–∞ –ê–¥–µ–Ω–∞")
            if self.your_name in [
                # "üë®‚Äçü¶≥–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä‚ò†Ô∏è",
                "Ros_Hangzhou",
                # "ùï¥ùñÜùñíùñïùñëùñéùñäùñó",
                "‡πñ€£€ú·óØŒ±sÕ•pwÕ£oÕ´‚Ñùtüêù",
            ]:
                self.location = "üèî –≠—Ç–µ—Ä"
                print(f"–õ–æ–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {self.location}")
        elif any(phrase in line for line in lstr for phrase in [
            "–¢—ã –ø—Ä–∏–±—ã–ª –≤ –∫—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã",
            "–ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –≤–æ–π–Ω–∞",
            "–¢—ã –ø—Ä–∏–±—ã–ª –Ω–∞"
        ]):
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "‚õè–†—É–¥–Ω–∏–∫")
        elif "[–Ω–∞ –≤—Ä–µ–º—è –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ö–æ–¥ –∑–∞–∫—Ä—ã—Ç]" in lstr[0]:
            print("–ü—Ä–æ—Ö–æ–¥ –∑–∞–∫—Ä—ã—Ç. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–±–æ—Ä—É –∞–ª—Ç–∞—Ä—è.")
            await self.prepare_for_caves()
            await asyncio.sleep(1)
            altar_to_send = self.cmd_altar if self.cmd_altar else self.choose_random_altar()
            await self.client.send_message(self.bot_id, altar_to_send)
            # await self.client.send_message(self.group59, altar_to_send) # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –≤ –≥—Ä—É–ø–ø—É 59
            # await self.client.send_message(self.tamplier_id, altar_to_send) # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –í–∞–ª–µ—Ä–µ
            # await self.client.send_message(self.bezvgroup, altar_to_send) # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –±–µ–∑ –≤ 
        elif "–¢—ã –ø—Ä–∏–±—ã–ª –≤ ‚õè—Ä—É–¥–Ω–∏–∫." in lstr[0]:
            self.kopka = True
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üñ≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ê–ë–£")
        elif any(phrase in line for line in lstr for phrase in [
            "–£–¥–∞—á–∏!"
        ]):  
            self.is_nacheve_active = True
              # –Ω–∞ –º–æ–±–∞—Ö
        elif any(phrase in line for line in lstr for phrase in  [
            "–ø–æ–π—Ç–∏ –≤ 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏", 
            "—á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø–µ—â–µ—Ä—ã?",
            "–ø–æ–ø—Ä–æ–±—É–π"
            ]):
            await asyncio.sleep(1)
            await message.click(0)
        elif "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?" in lstr[-1] or "–¢—ã –Ω–∞—Ç–∫–Ω—É–ª—Å—è –Ω–∞" in lstr[-1]:
            print("–±—É–¥–µ–º –±–∏—Ç—å")
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üî™ –ê—Ç–∞–∫–æ–≤–∞—Ç—å")
        elif any(phrase in line for line in lstr for phrase in ["–≠–Ω–µ—Ä–≥–∏—è: üîã0/5", "[–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏]"]):
            print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏")
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, RF.hp)
            await self.wait_for_set_change()
            await asyncio.sleep(1)
            await self.handle_no_energy()
        elif any(phrase in line for line in lstr for phrase in [f"–≠–Ω–µ—Ä–≥–∏—è: üîã{i}/5" for i in range(1, 5)]):
            print("–µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è")
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ –≤–æ –≤—Å—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —É—á—ë—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
            health_line = next((line for line in lstr if re.search(r"–ó–¥–æ—Ä–æ–≤—å–µ: ‚ù§\d+/\d+", line)), None)
            if health_line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
                health_match = re.search(r"–ó–¥–æ—Ä–æ–≤—å–µ: ‚ù§(\d+)/\d+", health_line)
                if health_match:
                    current_health = int(health_match.group(1))
                    print(f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {current_health}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—å—à–µ –ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ self.mob_heal
                    if current_health < self.mob_heal:
                        # –ü–µ—Ä–µ–æ–¥–µ–≤–∞–µ–º –≤ —Å–µ—Ç –¥–ª—è –º–æ–±–æ–≤ –ø–µ—Ä–µ–¥ energy_found
                        await asyncio.sleep(2)
                        await self.client.send_message(self.bot_id, RF.hp)
                        await self.wait_for_set_change()
                        await asyncio.sleep(2)                        
                        await self.handle_energy_found()
                    else:
                        print(f"–ó–¥–æ—Ä–æ–≤—å–µ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ {self.mob_heal}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ üê∫–ü–æ —É—Ä–æ–≤–Ω—é.")
                        # –í—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π HP-—Å–µ—Ç (—á—É—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ)
                        selected_cmd = None
                        selected_threshold = float('inf')
                        for threshold, cmd in self.hp_binds:
                            if current_health <= threshold and threshold < selected_threshold:
                                selected_cmd = cmd
                                selected_threshold = threshold
                        if selected_cmd:
                            await asyncio.sleep(2)
                            await self.client.send_message(self.bot_id, selected_cmd)
                            await self.wait_for_set_change()
                            await asyncio.sleep(2)
                        await asyncio.sleep(2)
                        await self.client.send_message(self.bot_id, "üê∫–ü–æ —É—Ä–æ–≤–Ω—é")
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–¥–æ—Ä–æ–≤—å–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏.")
            else:
                print("–°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        elif any(f"+1 –∫ —ç–Ω–µ—Ä–≥–∏–∏ üîã{i}/5" in lstr[0] for i in range(1, 6)):
            self.last_energy_message = message  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –ª–∏ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ 4 –∏–ª–∏ 5
            if any(f"+1 –∫ —ç–Ω–µ—Ä–≥–∏–∏ üîã{i}/5" in lstr[0] for i in (4, 5)):
                await self.handle_energy()  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è 4 –∏ 5
        # # –¥–∞–Ω–∂–∏
        elif "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–π—Ç–∏ –¥–∞–Ω–∂" in lstr[0]:
            await asyncio.sleep(1)
            await message.click(0)
            await self.dangego()
        elif any(phrase in line for line in lstr for phrase in  [
            "–û–±—â–∞—è –¥–æ–±—ã—á–∞:", 
            ]):
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            forwarded_message = await message.forward_to(5596818972)  # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–Ω–∂ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ 
            # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
            # –£–¥–∞–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await forwarded_message.delete()
        # misc
        elif val == 1550650437:  # ‚öí –ö—É–∑–Ω—è - 5 —É—Ä.
            await self.craft_rec(lstr)
        elif val == 2509085174:  # –†–µ—Ü–µ–ø—Ç—ã:
            return
        elif any(phrase in line for line in lstr for phrase in  [
            "–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –≥–µ–Ω. —à—Ç–∞–±–∞",
            "–í –¥–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∏–∑ –≥–µ–Ω. —à—Ç–∞–±–∞!",
            # "–£ —Ç–µ–±—è –Ω–µ—Ç" # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Ö–µ–ª–æ—É–∏–Ω
            ]):
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
            if self.mobs:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ñ–ª–∞–≥ –¥–ª—è –º–æ–±–æ–≤
                await self.check_arrival()  # –¥–ª—è –º–æ–±–æ–≤
            else:
                await self.check_arrival_dange()  # –¥–ª—è –¥–∞–Ω–∂–µ–π
        elif any(phrase in lstr[0] for phrase in [
            "‚ö†Ô∏è–ü—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–≥—Ä–µ",
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏."
        ]):
            print("–ö–∞–ø—á–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            await self.client.send_message(self.group59, "–ö–∞–ø—á–∞ –ø–æ–ª—É—á–µ–Ω–∞")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.waiting_for_captcha = True # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏
            # sys.exit()
        elif (match := self.arrival_re.search(lstr[0])):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–±—ã—Ç–∏—è
            minutes = int(match.group(1))
            seconds = float(match.group(2))
            duration = int(minutes * 60 + seconds)
            self.waiting_for_captcha = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏
            self.v_terminale =  False
            await self.set_moving_flag(duration)
            print(f"–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ: {lstr[0]}, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ø–µ—â–µ—Ä–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–∞–≤–∞
            if self.is_in_caves:
                await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤ (–∏–∑-–∑–∞ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –ø–µ—â–µ—Ä–µ)")
        elif "–¢—ã –ø—Ä–∏–±—ã–ª –≤ –∑–∞–º–æ–∫" in lstr[0]:
            self.in_castle = True
            print("–ü—Ä–∏–±—ã–ª–∏ –≤ –∑–∞–º–æ–∫")
        elif "–¢—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª" in lstr[0]:
            self.prem = True
            print("–ø–æ—Å—Ç–∞–≤–∏–ª –∞–±—É")
        elif "–£ —Ç–µ–±—è –Ω–µ—Ç –ê–ë–£" in lstr[0]:
            self.prem = False
            print("–Ω–µ—Ç –∞–±—É")
        elif "–¢—ã –∑–∞–∫–æ–Ω—á–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" in lstr[0]:
            self.is_training = False
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, self.location)
        elif "–¢—ã –Ω–∞—á–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" in lstr[0]:
            self.is_training = True
        # elif "–ö–∞–∫ –¥–æ–ª–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞" in lstr[0]:
        #     await asyncio.sleep(1)
        #     await self.client.send_message(self.bot_id, "1")
        elif "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?" in lstr[-1]:
            await message.click(0)
        elif any(phrase in line for line in lstr for phrase in [
            "–î–æ–ø. –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        ]):
            await message.forward_to(1033007754)
        if not getattr(message, "buttons", None):
            if val == 3190963077:  # ‚ú®–î–æ–±—ã—á–∞:
                await message.forward_to(self.group59)  # –≥—Ä—É–ø–ø–∞ 59
                # await message.forward_to(self.bezvgroup)  # –≥—Ä—É–ø–ø–∞ –±–µ–∑ –í
            else:
                await self.checkHealth(lstr)
            return
        if val == 3190963077:  # ‚ú®–î–æ–±—ã—á–∞:
            self.rf_message = message
            self.cave_buttons_message = message  # ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            await asyncio.sleep(2)
            await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
            return
    async def check_arrival_dange(self):  # —Ö–æ–¥–∏–º –¥–∞–Ω–∂–∏
        print("check_arrival_dange")
        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any(condition in lstr[0] for condition in ["–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.", "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.", "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº"]):
                    await self.client.send_message(self.bot_id, "/go_dange_10014")  # –∏–¥—Ç–∏ –¥–∞–Ω–∂
                    return
            await asyncio.sleep(1)
    async def dangego(self):
        while True:
            await asyncio.sleep(10)
            dungeon_completed = False
            energy_low = False
            is_dead = False
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_messages = await self.client.get_messages(self.bot_id, limit=3)
            print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(last_messages)}")
            for index, message in enumerate(last_messages):
                lstr = message.message.split('\n')
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ lstr[0] –∏ lstr[-1] –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {index + 1}:")
                print(f"    lstr[0]: {lstr[0]}")
                print(f"    lstr[-1]: {lstr[-1]}")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏–π
                if any(phrase in line for line in lstr for phrase in [
                    "–£ –∫–æ–≥–æ-—Ç–æ –≤ –≥—Ä—É–ø–ø–µ –º–µ–Ω—å—à–µ 2 –µ–¥–∏–Ω–∏—Ü —ç–Ω–µ—Ä–≥–∏–∏",
                    "–Ω–µ –≤ –≥–µ–Ω. —à—Ç–∞–±–µ",
                    "—É–∂–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ"
                ]):
                    print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏, –∫—Ç–æ-—Ç–æ –Ω–µ –≤ –≥—à –∏–ª–∏ —É–∂–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ")
                    energy_low = True
                    break
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if any(phrase in line for line in lstr for phrase in ["–¢—ã –ø–æ–≥–∏–± –æ—Ç", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–π—Ç–∏ –¥–∞–Ω–∂"]):
                    print("–¢—ã –ø–æ–≥–∏–± –Ω–∞ –¥–∞–Ω–∂–µ")
                    is_dead = True
                    break
                if any("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏" in line for line in lstr):
                    print("–≤—Å–µ –≤ –≥—à –±—ã–ª –¥–∞–Ω–∂ –∏ –∂–∏–≤ –Ω–∞ –¥–∞–Ω–∂–µ")
                    dungeon_completed = True
                    continue
            if energy_low:
                print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –∏–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–µ –≤ –≥—à")
                await asyncio.sleep(1)
                await self.client.send_message(self.bot_id, self.location)
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
                return
            if is_dead:
                print("—É–º–µ—Ä –Ω–∞ –¥–∞–Ω–∂–µ")
                await self.check_arrival_dange()
                print("–í—ã–ø–æ–ª–Ω–µ–Ω check_arrival_dange() –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏")
                return
            if dungeon_completed:
                print("–≤—Å–µ –≤ –≥—à –±—ã–ª –¥–∞–Ω–∂ –∏ –∂–∏–≤ –Ω–∞ –¥–∞–Ω–∂–µ")
                await asyncio.sleep(2)
                await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                await self.wait_for_health_refill()
                await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                return
            print("–ù–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(1)
    async def check_arrival(self):  # —Ö–æ–¥–∏–º –Ω–∞ –º–æ–±–∞
        print("check_arrival")
        # –ï—Å–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–∞–ø—á–∏, —Ç–æ —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
        if self.waiting_for_captcha:
            return
        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
                if any(phrase in lstr[0] for phrase in [
                    "—Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—à—å",
                    "–¥–æ–∂–¥–∏—Å—å –ø–æ–∫–∞ –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å"
                ]):
                    print("–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
                    return  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏–π
                elif any(phrase in lstr[0] for phrase in [
                    "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –≥–µ–Ω. —à—Ç–∞–±!" ,
                    "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº"
                ]):    
                    self.is_in_caves = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–¥–µ—Å—å
                    await asyncio.sleep(2)
                    if not self.waiting_for_captcha:
                        await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                        await self.wait_for_health_refill()
                        await self.client.send_message(self.bot_id, self.location)
                    return
            await asyncio.sleep(1)
    async def arrival_hil(self):  # —Ö–æ–¥–∏–º –Ω–∞ –º–æ–±–∞
        print("arrival_hil")
        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any(phrase in lstr[0] for phrase in [
                    "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.",
                    "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –≥–µ–Ω. —à—Ç–∞–±!" ,
                    "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº",
                    "—É—Å–ø–µ—à–Ω–æ –Ω–∞–¥–µ–ª –∫–æ–º–ª–µ–∫—Ç"
                ]):    
                    await asyncio.sleep(2)
                    await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await self.wait_for_health_refill()
                    return
            await asyncio.sleep(1)
    async def gokragi(self):  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —á–≤ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏
        print("–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —á–≤ –ø–æ–±–µ–¥–∞ –∏–ª–∏ —Ä–µ—Å")
        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=1)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any(phrase in lstr[0] for phrase in ["–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.", "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.", "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤üëº", "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –≥–µ–Ω. —à—Ç–∞–±!"]):  
                    await asyncio.sleep(2)
                    await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await self.wait_for_health_refill()
                    await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                    return
            await asyncio.sleep(1)
    async def parce_4v_logs(self, msg_text):
        print("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã parce_4v_logs.")
        lstr = msg_text.split('\n')
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {len(lstr)}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HP —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ Basilaris –∏ Aquilla
        for line in lstr:
            if "Basilaris —Ç–µ—Ä–º–∏–Ω–∞–ª:" in line:
                hp_info = line.split('‚ù§')[1].split('/')[0].strip()
                basilaris_hp = int(hp_info)
                print(f"Basilaris HP: {basilaris_hp}")
                if basilaris_hp < 12000 and basilaris_hp > 1:
                    self.go_to_heal = False
                    self.go_term_Basilaris = False
                    self.go_term_Aquilla = False
                    self.go_term_Castitas = False
                    print("HP Basilaris –º–µ–Ω—å—à–µ 12000, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ö–æ–¥–∏—Ç—å.")
            if "Aquilla —Ç–µ—Ä–º–∏–Ω–∞–ª:" in line:
                hp_info = line.split('‚ù§')[1].split('/')[0].strip()
                aquilla_hp = int(hp_info)
                print(f"Aquilla HP: {aquilla_hp}")
                if aquilla_hp < 12000 and aquilla_hp > 1:
                    self.go_to_heal = False
                    self.go_term_Aquilla = False
                    self.go_term_Basilaris = False
                    self.go_term_Castitas = False
                    print("HP Aquilla –º–µ–Ω—å—à–µ 12000, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ö–æ–¥–∏—Ç—å.")
            if len(lstr) > 24:
                if self.go_term_Castitas and not lstr[10].endswith(" 0"):
                    self.cmd_altar = "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –•–∞–≥–∞–ª"
                    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –≤ 10-–π —Å—Ç—Ä–æ–∫–µ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ '0', –≤—ã–±—Ä–∞–Ω –∞–ª—Ç–∞—Ä—å: {self.cmd_altar}")
                else:
                    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª—Ç–∞—Ä—è —Å —É—á—ë—Ç–æ–º —Ñ–ª–∞–≥–∞ self.active
                    l_altars = []
                    if self.active:
                        if not lstr[5].endswith("Castitas"): l_altars.append(0)
                        if not lstr[6].endswith("Castitas"): l_altars.append(1)
                        if not lstr[14].endswith("Castitas"): l_altars.append(2)
                        if not lstr[15].endswith("Castitas"): l_altars.append(3)
                        if not lstr[23].endswith("Castitas"): l_altars.append(4)
                        if not lstr[24].endswith("Castitas"): l_altars.append(5)
                    else:
                        if not lstr[5].endswith("Castitas"): l_altars.append(0)
                        if not lstr[6].endswith("Castitas"): l_altars.append(1)
                        if not lstr[14].endswith("Castitas"): l_altars.append(2)
                        if not lstr[15].endswith("Castitas"): l_altars.append(3)
                        if not lstr[23].endswith("Castitas"): l_altars.append(4)
                        if not lstr[24].endswith("Castitas"): l_altars.append(5)         
                    if l_altars:
                        self.cmd_altar = self.altar_dict.get(random.choice(l_altars))
                        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª—Ç–∞—Ä–∏: {l_altars}, –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª—Ç–∞—Ä—å: {self.cmd_altar}")
                    else:
                        if not self.v_terminale:
                            self.cmd_altar = self.choose_random_altar()
                            print(f"–ê–ª—Ç–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª—Ç–∞—Ä—å: {self.cmd_altar}")
                        else:
                            self.cmd_altar = None
                            print("–ù–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –∞–ª—Ç–∞—Ä—å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã parce_4v_logs.")
    async def nacheve(self):
        print("—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ —á–≤")
        self.is_nacheve_active = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.cmd_altar = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–ª—Ç–∞—Ä—å –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ RF —á–∞—Ç–∞
        @self.client.on(events.NewMessage(chats=-1001284047611))
        async def handle_rf_info(event):
            print("–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç RF —á–∞—Ç–∞.")
            first_line = event.message.text.split('\n')[0]
            print(f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {first_line}")
            await self.parce_4v_logs(event.message.text)
        try:
            while self.is_nacheve_active:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
                bot_message = await self.client.get_messages(self.bot_id, limit=1)
                if bot_message:
                    message = bot_message[0]
                    lstr = message.message.split('\n')
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:")
                    print(f"    lstr[0]: {lstr[0]}")
                    print(f"    lstr[-1]: {lstr[-1]}")
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
                    if await self.process_bot_message(lstr):
                        continue
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ–≤–æ–º—É –∞–ª—Ç–∞—Ä—é
                if self.cmd_altar:
                    print(f"–ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–º—É –∞–ª—Ç–∞—Ä—é: {self.cmd_altar}")
                    await self.client.send_message(self.bot_id, self.cmd_altar)
                    # await self.client.send_message(self.tamplier_id, self.cmd_altar) # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –í–∞–ª–µ—Ä–µ
                    # await self.client.send_message(self.bezvgroup, self.cmd_altar) # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª—Ç–∞—Ä—è –±–µ–∑ –≤ 
                    self.cmd_altar = None
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ xx —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                print("–û–∂–∏–¥–∞–Ω–∏–µ 6 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
                await asyncio.sleep(6)
        finally:
            # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            self.client.remove_event_handler(handle_rf_info)
            self.is_nacheve_active = False
            print("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞ —á–≤")
    async def calculate_pvp_health(self, lstr):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ PvP-–±–æ—è.
        –¢–µ–ø–µ—Ä—å –º—ã –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–±–µ–¥ –≤ —Å–µ—Ä–∏–∏, –∞ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º /hero.
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        wait_interval = 5  # —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∂–¥–µ–º –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        max_total_wait = 60  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        total_waited = 0
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥...")
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
        messages_before = await self.client.get_messages(self.bot_id, limit=1)
        last_checked_message_id = messages_before[0].id if messages_before else 0
        # –¶–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥
        while total_waited < max_total_wait:
            await asyncio.sleep(wait_interval)
            total_waited += wait_interval
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_messages = await self.client.get_messages(self.bot_id, limit=10)
            new_victory_found = False
            # –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ
            for message in new_messages:
                if message.id > last_checked_message_id:
                    message_text = message.text or message.message
                    if message_text and "–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –Ω–∞–¥" in message_text:
                        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–±–µ–¥–∞! –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä (–ø—Ä–æ—à–ª–æ {total_waited}s)")
                        new_victory_found = True
                        last_checked_message_id = message.id
                        total_waited = 0  # –í–ê–ñ–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
                        break
            # –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥ –Ω–µ –±—ã–ª–æ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            if not new_victory_found:
                print(f"–ó–∞ {wait_interval}s –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥ –Ω–µ –±—ã–ª–æ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /hero")
                break
        if total_waited >= max_total_wait:
            print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è {max_total_wait}s. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /hero")
        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º /hero –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        messages_before = await self.client.get_messages(self.bot_id, limit=1)
        last_message_id_before = messages_before[0].id if messages_before else 0
        await self.client.send_message(self.bot_id, "/hero")
        print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /hero, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞...")
        # –ñ–¥–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
        max_wait_time = 60  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        check_interval = 2   # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        waited_time = 0
        while waited_time < max_wait_time:
            await asyncio.sleep(check_interval)
            waited_time += check_interval
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await self.client.get_messages(self.bot_id, limit=1)
            if response and response[0].id > last_message_id_before:
                # –ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ
                message_text = response[0].text or response[0].message
                if '‚ù§–ó–¥–æ—Ä–æ–≤—å–µ:' in message_text:
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ
                    health_line = next((line for line in message_text.split('\n') if '‚ù§–ó–¥–æ—Ä–æ–≤—å–µ:' in line), None)
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
                    match = re.search(r'‚ù§–ó–¥–æ—Ä–æ–≤—å–µ:\s*(\d+)', health_line)
                    self.my_health = int(match.group(1))
                    print(f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.my_health} (–æ–∂–∏–¥–∞–ª–∏ {waited_time}s)")
                    return
                else:
                    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å... ({waited_time}s)")
            else:
                print(f"–ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞... ({waited_time}s)")
        print(f"–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {max_wait_time} —Å–µ–∫—É–Ω–¥, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∞–≥–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
    async def process_bot_message(self, lstr):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ—Ä—Ç–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if lstr[-1].endswith("–º–∏–Ω—É—Ç.") or "–¥–æ–∂–¥–∏—Å—å –ø–æ–∫–∞ –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å" in lstr[0] or "–±—ã–ª —É–±–∏—Ç —è–¥–µ—Ä–Ω–æ–π —Ä–∞–∫–µ—Ç–æ–π" in lstr[0]:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–∑—ã–≤–∞–µ–º gokragi()")
            self.killed_on_chv = True
            await asyncio.sleep(2)
            await self.client.send_message(self.bot_id, RF.chv)
            await self.gokragi()
            self.is_nacheve_active = False
            return True
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º
        if any("–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –Ω–∞–¥" in line for line in lstr):
            print("–ü–æ–±–µ–¥–∞ –≤ –±–æ—é. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ.")
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
            await self.calculate_pvp_health(lstr)
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–¥–æ—Ä–æ–≤—å—è
            if self.my_health > self.pvpgoheal:
                print("–ó–¥–æ—Ä–æ–≤—å–µ –±–æ–ª—å—à–µ self.pvpgoheal. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–ª—Ç–∞—Ä—é.")
                fight_message = f"–î–µ—Ä—ë–º—Å—è –¥–∞–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è: {self.my_health}"
                # await self.client.send_message(self.bezvgroup, fight_message)  # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –±–µ–∑ –≤ 
                # await self.client.send_message(self.tamplier_id, fight_message)  # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –í–∞–ª–µ—Ä–µ
                await asyncio.sleep(1)
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                await self.change_bind_based_on_health()
                await asyncio.sleep(3)
                return False  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª—É
            else:
                if self.go_to_heal:
                    print("–ó–¥–æ—Ä–æ–≤—å–µ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ self.pvpgoheal. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –≥–µ–Ω. —à—Ç–∞–± –¥–ª—è —Ö–∏–ª–∞.")
                    await asyncio.sleep(2)
                    await self.client.send_message(self.bot_id, RF.chv)
                    await self.wait_for_set_change() #–Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ
                    await asyncio.sleep(1)
                    await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                    health_message = f"–£—à–µ–ª –Ω–∞ –æ—Ç—Ö–∏–ª –ø–æ—Å–ª–µ –ø–≤–ø. –û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è: {self.my_health}"
                    # await self.client.send_message(self.bezvgroup, health_message)  # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –±–µ–∑ –≤ 
                    # await self.client.send_message(self.tamplier_id, health_message)  # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –í–∞–ª–µ—Ä–µ
                    await self.gokragi()
                    self.is_nacheve_active = False
                    return True
                else:
                    await self.client.send_message(self.bot_id, RF.chv)
                    await self.wait_for_set_change() # –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ
                    await asyncio.sleep(1)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã drink_103
                    if self.your_name in ["Ros_Hangzhou", "‡πñ€£€ú·óØŒ±sÕ•pwÕ£oÕ´‚Ñùtüêù"]:
                        await self.client.send_message(self.bot_id, "/drink_103")
                        await asyncio.sleep(3)
                    else:
                        # –ï—Å–ª–∏ –∏–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.your_name} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /drink_103")
                        # –ò–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∑–¥–µ—Å—å
                    return False               
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
        if "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è" in lstr[0]:
            self.is_nacheve_active = False
            return True
        return False
    async def straj(self):
        print("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj")
        while True:
            await asyncio.sleep(10)
            is_dead = False
            is_damaged = False
            damage_type = None  # Track specific damage type
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_messages = await self.client.get_messages(self.bot_id, limit=2)
            print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(last_messages)}")
            for index, message in enumerate(last_messages):
                lstr = message.message.split('\n')
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ lstr[0] –∏ lstr[-1] –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {index + 1}:")
                print(f"    lstr[0]: {lstr[0]}")
                print(f"    lstr[-1]: {lstr[-1]}")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
                damage_dict = {
                    "–°—Ç—Ä–∞–∂": ["–°—Ç—Ä–∞–∂ –Ω–∞–Ω–µ—Å", "–°—Ç—Ä–∞–∂ –û—Ç—Ä–∞–≤–∏–ª —Ç–µ–±—è"],
                    "–∞—Ä–≥–æ–ª": ["–∞—Ä–≥–æ–ª –Ω–∞–Ω–µ—Å", "–∞—Ä–≥–æ–ª –û—Ç—Ä–∞–≤–∏–ª —Ç–µ–±—è"],
                    "–í–∞—Ä–∞—Å—Å–∞": ["–í–∞—Ä–∞—Å—Å–∞ –Ω–∞–Ω–µ—Å", "–í–∞—Ä–∞—Å—Å–∞ –û—Ç—Ä–∞–≤–∏–ª —Ç–µ–±—è"],
                    "–¢—Ä–∞—à–µ—Ä": ["–¢—Ä–∞—à–µ—Ä –Ω–∞–Ω–µ—Å", "–¢—Ä–∞—à–µ—Ä –û—Ç—Ä–∞–≤–∏–ª —Ç–µ–±—è"],
                }
                for boss, phrases in damage_dict.items():
                    if any(phrase in lstr[0] for phrase in phrases):
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ damage_type –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–æ—Å—Å–∞
                        if boss == "–°—Ç—Ä–∞–∂":
                            damage_type = random.choice(RF.directions)
                        elif boss == "–∞—Ä–≥–æ–ª":
                            damage_type = random.choice(RF.directions) + "'"
                        elif boss == "–í–∞—Ä–∞—Å—Å–∞":
                            damage_type = random.choice(RF.directions) + "''"
                        elif boss == "–¢—Ä–∞—à–µ—Ä":
                            damage_type = random.choice(RF.directions) + "'''"
                        print(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω –æ—Ç {boss}")
                        is_damaged = True
                        continue
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                if "–≤–æ—Å–∫—Ä–µ—Å–Ω–µ—à—å —á–µ—Ä–µ–∑" in lstr[0]:
                    if "–¢—Ä–∞—à–µ—Ä" in lstr[0]:
                        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± –æ—Ç –¢—Ä–∞—à–µ—Ä–∞")
                        damage_type = random.choice(RF.directions) + "'''"
                    elif "–í–∞—Ä–∞—Å—Å–∞" in lstr[0]:
                        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± –æ—Ç –í–∞—Ä–∞—Å—Å—ã")
                        damage_type = random.choice(RF.directions) + "''"
                    elif "–∞—Ä–≥–æ–ª" in lstr[0]:
                        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± –æ—Ç –ê—Ä–≥–æ–ª–∞")
                        damage_type = random.choice(RF.directions) + "'"
                    elif "–°—Ç—Ä–∞–∂" in lstr[0]:
                        print("–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–∂–µ–º straj - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± –æ—Ç –°—Ç—Ä–∞–∂–∞")
                        damage_type = random.choice(RF.directions)
                    is_dead = True
                    break
                if any(phrase in line for line in lstr for phrase in [
                    "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏.",
                    "–¢–≤–æ—è –¥–æ–±—ã—á–∞ —Å –±–æ—Å—Å–∞",
                    "–¢—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –≤ –≥–µ–Ω. —à—Ç–∞–±",
                    ]): 
                    print("–∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–∂–µ")
                    return
            if is_dead:
                print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±, –æ–∂–∏–¥–∞–µ–º –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è")
                # –û–∂–∏–¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–∏
                while True:
                    last_message = await self.client.get_messages(self.bot_id, limit=1)
                    if last_message:
                        lstr = last_message[0].message.split('\n')
                        if "–¢—ã —Å–Ω–æ–≤–∞ –∂–∏–≤" in lstr[0]:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–Ω–æ–≤–∞ –∂–∏–≤")
                            await asyncio.sleep(2)
                            await self.client.send_message(self.bot_id, damage_type)
                            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {damage_type}")
                            return
                    await asyncio.sleep(1)
            if is_damaged:
                print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–µ–Ω. —à—Ç–∞–±")
                await asyncio.sleep(1)
                await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                # –û–∂–∏–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥–µ–Ω. —à—Ç–∞–±–∞
                while True:
                    last_message = await self.client.get_messages(self.bot_id, limit=1)
                    if last_message:
                        lstr = last_message[0].message.split('\n')
                        if "–¢—ã –¥–æ—à–µ–ª –¥–æ –ª–æ–∫–∞—Ü–∏–∏." in lstr[0]:
                            print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –≥–µ–Ω. —à—Ç–∞–±")
                            await asyncio.sleep(2)
                            await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                            await self.wait_for_health_refill()
                            await self.client.send_message(self.bot_id, damage_type)
                            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {damage_type}")
                            return
                    await asyncio.sleep(1)
            print("–ù–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥")
    async def wait_for_health_refill(self):
        await asyncio.sleep(2)
        # –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–∞–ø—á–∞ - –∂–¥—ë–º –µ—ë —Ä–µ—à–µ–Ω–∏—è
        if self.waiting_for_captcha:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è...")
            while self.waiting_for_captcha:
                print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ø—á–∏...")
                await asyncio.sleep(20)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
            print("–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            # await self.client.send_message(self.group59, "–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏
        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=2)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any("–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ" in line for line in lstr):
                    await asyncio.sleep(0.1)
                    return
            await asyncio.sleep(1)
    async def wait_for_set_change(self):
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Å–µ—Ç–∞
        while True:
            last_message = await self.client.get_messages(self.bot_id, limit=2)
            if last_message:
                lstr = last_message[0].message.split('\n')
                if any("–¢—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–¥–µ–ª –∫–æ–º–ª–µ–∫—Ç!" in line for line in lstr):
                    return
            await asyncio.sleep(1)    
    async def wait_for_confirmation(self):
        try:
            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_future = asyncio.Future()
            @self.client.on(events.NewMessage(from_users=[self.bot_id]))
            async def confirmation_handler(event):
                if "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏" in event.message.text:
                    confirmation_future.set_result(True)
                    print("–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.")
                else:
                    confirmation_future.set_result(False)
                    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.")
            # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
            result = await asyncio.wait_for(confirmation_future, timeout=30)
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            self.client.remove_event_handler(confirmation_handler)
            return result
        except asyncio.TimeoutError:
            print("–¢–∞–π–º-–∞—É—Ç: –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.")
            return False
    async def craft_rec(self, lstr):
        print("# –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫—Ä–∞—Ñ—Ç–∞")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
        if "–†–µ—Ü–µ–ø—Ç" in lstr[2]:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å—Ç—Ä–æ–∫–∏
            lstr = lstr[4:]
            await asyncio.sleep(2)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞—Ñ—Ç–∞ —Ä–µ—Ü–µ–ø—Ç–∞
            for str_line in lstr:
                if str_line == "":
                    break
                craft_cmd = re.search(r" (/.*)$", str_line)
                if craft_cmd:
                    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫—Ä–∞—Ñ—Ç–∞: {craft_cmd.group(1)}")
                    await self.client.send_message(self.bot_id, craft_cmd.group(1))                                
                    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    confirmation = await self.wait_for_confirmation()
                    if not confirmation:
                        print("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∫—Ä–∞—Ñ—Ç.")
                        return
                    await asyncio.sleep(2) 
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üî® –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å"
            await asyncio.sleep(2)
            await self.client.send_message(self.bot_id, "üî® –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å")
        else:
            print(" –ò–ª—å–µ –æ–Ω–æ –Ω–∞—Ñ–∏–≥ –Ω–µ –Ω–∞–¥–æ")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö
            # if any("–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:" in line for line in lstr):
            #     await self.check_talisman(lstr)
    async def check_talisman(self, lstr):
        print("# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–ª–∏—Å–º–∞–Ω")
        tali_type = {"‚ò£": 0, "üîµ": 1, "‚ö´": 2, "üî¥": 3, "üü¢": 4}
        pattern = r'(üîµ|üü¢|‚ö´|üî¥|‚ò£)\s*\+\s*(\d+)'
        talismans_burned = False
        for line in lstr:
            if "–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:" in line:
                continue
            if "–¢–∞–ª–∏–∫–∏ —Å–≥–æ—Ä–µ–ª–∏üíî" in line:
                talismans_burned = True
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–ª–∏—Å–º–∞–Ω—ã —Å–≥–æ—Ä–µ–ª–∏
            match = re.search(pattern, line)
            if match:
                found_symbol = match.group(1)
                talisman_level = int(match.group(2))
                talisman_info = (tali_type.get(found_symbol), talisman_level)
                if talisman_info:
                    print(f"# –ù–∞–π–¥–µ–Ω —Ç–∞–ª–∏—Å–º–∞–Ω: —Ç–∏–ø {found_symbol}, —É—Ä–æ–≤–µ–Ω—å {talisman_level}")
                    self.last_talisman_info = talisman_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–∞–ª–∏—Å–º–∞–Ω–µ
                    if talisman_level < self.zatochka:  # —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ç–æ—á–∫–∏
                        await asyncio.sleep(1)
                        await self._insert_talisman_and_stone(*talisman_info, lstr)
                    else:
                        print("–£—Ä–∞! –¢–∞–ª–∏—Å–º–∞–Ω –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
                    return talisman_info
        if talismans_burned:
            if self.last_talisman_info:
                print("# –¢–∞–ª–∏—Å–º–∞–Ω—ã —Å–≥–æ—Ä–µ–ª–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω —Å —É—Ä–æ–≤–Ω–µ–º 1")
                new_talisman_info = (self.last_talisman_info[0], 1)
                await self._insert_talisman_and_stone(*new_talisman_info, lstr)
                return new_talisman_info
            else:
                print("# –¢–∞–ª–∏—Å–º–∞–Ω—ã —Å–≥–æ—Ä–µ–ª–∏, –Ω–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–∞–ª–∏—Å–º–∞–Ω–µ")
                return None
        print("# –¢–∞–ª–∏—Å–º–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏")
        return None
    async def _insert_talisman_and_stone(self, talisman_type, talisman_level, lstr):
        print(f"# –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: talisman_type={talisman_type}, talisman_level={talisman_level}")
        print("# –í—Å—Ç–∞–≤–∫–∞ —Ç–∞–ª–∏—Å–º–∞–Ω–∞ –∏ –∫–∞–º–Ω—è")
        await asyncio.sleep(1)
        await self.client.send_message(self.bot_id, "üë®‚Äçüè≠ –ü–æ–º–æ—â–Ω–∏–∫")
        await asyncio.sleep(2)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.rf_message = await self.get_latest_message_with_buttons()
        if not self.rf_message:
            print("# self.rf_message is None, –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫")
            return False
        stone_type = 8 if talisman_level < 3 else 10
        print(f"# –í—ã–±—Ä–∞–Ω –∫–∞–º–µ–Ω—å —Ç–∏–ø–∞ {stone_type}")
        await self.rf_message.click(stone_type)
        await asyncio.sleep(2)
        await self.rf_message.click(talisman_type)
        await asyncio.sleep(2)
        messages = await self.get_latest_messages(limit=2)
        if any(message.split('\n')[0].startswith("‚ùå–ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:") for message in messages):
            print("# –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ '–ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å")
            return False
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
        print("# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫—Ä–∞—Ñ—Ç")
        await self._craft_and_process_result()
        return True
    async def _craft_and_process_result(self):
        await asyncio.sleep(1)
        print("# –ö—Ä–∞—Ñ—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        await self.client.send_message(self.bot_id, "üî® –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å")
    async def get_latest_message_with_buttons(self):
        print("# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        messages = await self.client.get_messages(self.bot_id, limit=1)
        await asyncio.sleep(2)
        for msg in messages:
            if msg.buttons:
                return msg
        return None
    async def get_latest_messages(self, limit=2):
        print("# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        last_messages = await self.client.get_messages(self.bot_id, limit=2)
        await asyncio.sleep(2)
        return [message.message for message in last_messages]
    async def check_group_list(self, lstr):
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º—ã –ª–∏–¥–µ—Ä—ã –ø–µ—â–µ—Ä—ã
        self.is_cave_leader = True
        print(" –∞ –≤–æ—Ç —á—Ç–æ –ø–æ —Å–æ—Å—Ç–∞–≤—É")
        print(f" –ú–æ—ë —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ª–∏–¥–µ—Ä–∞
        if not lstr or not lstr[0].endswith(f"/group_guild_join_{self.cave_leader_id}"):
            print("—Ç—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥")
            self.is_cave_leader = False
        else:
            self.is_cave_leader = True  # –õ–∏–¥–µ—Ä –ø–µ—â–µ—Ä—ã
            print("—Ç—ã –ø–∞—Ç–∏–≤–æ–¥")
        lstr.reverse()
        h_id = 0
        for line in lstr:
            if not line:
                break
            in_str_find = re.search("/p_guild_exc_(\d+)", line)
            if in_str_find:
                h_id = int(in_str_find.group(1))
                continue
            in_str_find = re.search("\d\) .*\[.*\](.*)üèÖ\d+—É—Ä\. (.*)", line)
            if not in_str_find:
                break
            nick = in_str_find.group(1)
            if nick == self.your_name:
                continue
            sost = in_str_find.group(2)
            if "–ú–µ—Ä—Ç–≤" in sost:
                if "ü•§" in sost and self.is_cave_leader and self.is_in_caves:
                    await self.client.send_message(h_id, "–†–µ—Å")
                continue
            if "üíñ" in sost:
                str_hp = re.search("‚ù§Ô∏è(\d+)/\d+", sost)
                helth = int(str_hp.group(1))
                if self.is_cave_leader and self.is_in_caves:
                    if helth < 1500:
                        await self.client.send_message(h_id, "–•–∏–ª")
                continue
    def setup_war_listener(self):
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è setup_war_listener")
        @self.client.on(events.NewMessage(chats=-1001284047611))
        async def on_war_start(event):
            if self.waiting_for_captcha:
                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            lines = event.message.text.splitlines()
            if any("–í–æ–π–Ω–∞ –≤ –∫—Ä–∞–≥–æ–≤—ã—Ö —à–∞—Ö—Ç–∞—Ö –Ω–∞—á–∞–ª–∞—Å—å!" in ln for ln in lines):
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—á–∞–ª–æ –≤–æ–π–Ω—ã –≤ –∫—Ä–∞–≥–∞—Ö!")
                # self.pvpgoheal = 4500
                self.active = False
                self.go_to_heal = True
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if self.your_name == "ùï¥ùñÜùñíùñïùñëùñéùñäùñó":
                    self.go_term_Basilaris = True
                    self.go_term_Castitas = False
                    self.go_term_Aquilla = False
                elif self.your_name == "Ros_Hangzhou":
                    self.go_term_Basilaris = True
                    self.go_term_Castitas = True
                    self.go_term_Aquilla = False
                elif self.your_name == "üë®‚Äçü¶≥–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä‚ò†Ô∏è":
                    self.go_term_Basilaris = True
                    self.go_term_Castitas = True
                    self.go_term_Aquilla = False        
                elif self.your_name == "‡πñ€£€ú·óØŒ±sÕ•pwÕ£oÕ´‚Ñùtüêù":
                    self.go_term_Basilaris = True
                    self.go_term_Castitas = False
                    self.go_term_Aquilla = False
                #  –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è pvpgoheal —á–µ—Ä–µ–∑ 38 –º–∏–Ω—É—Ç
                asyncio.create_task(self.pvp_heal_timer())                
                if not any([self.is_in_caves, self.kopka, self.is_moving]):
                    await asyncio.sleep(12)
                    await self.client.send_message(self.bot_id, RF.chv)
                    await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç
                    await asyncio.sleep(1)
                    await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await self.wait_for_health_refill()
                    await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
            if any("–í–æ–π–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!" in ln for ln in lines):
                await asyncio.sleep(70)
                if not self.is_moving and not self.killed_on_chv:
                    await self.client.send_message(self.bot_id, "‚õè–†—É–¥–Ω–∏–∫")
                await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç = 900 —Å–µ–∫—É–Ω–¥
                if not self.is_in_caves and not self.waiting_for_captcha:
                    await self.client.send_message(self.bot_id, RF.hp)  # –ü–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è –¥–ª—è –º–æ–±–æ–≤
                # # await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç
                # await asyncio.sleep(1)
                # if self.is_nacheve_active and not self.is_moving:
                #     await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
                #     await self.client.send_message(self.bot_id, "‚õè–†—É–¥–Ω–∏–∫")
                # else:
                #     await asyncio.sleep(3)
                #     await self.client.send_message(self.bot_id, "‚õè–†—É–¥–Ω–∏–∫")
            if any(("Castitas –æ–¥–æ–ª–µ–ª–∞" in ln or "Castitas –Ω–µ —Å–º–æ–≥–ª–∞ –æ–¥–æ–ª–µ—Ç—å" in ln or "–ë–æ—Å—Å" in ln and "–ø–∞–ª!" in ln) for ln in lines):
                if not self.is_in_caves:
                    await asyncio.sleep(15)
                    await self.client.send_message(self.bot_id, RF.hp)
                    await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç
                    await asyncio.sleep(1)
                    if not self.is_moving and not self.in_castle:
                        await asyncio.sleep(5)
                        await self.client.send_message(self.bot_id, self.location)
            if any("–û—Å–∞–¥–∞ –∑–∞–º–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å" in ln for ln in lines):
                self.in_castle = False
                if not self.is_in_caves and not self.waiting_for_captcha and not self.kopka and not self.is_moving:
                    await asyncio.sleep(5)
                    await self.client.send_message(self.bot_id, RF.hp)
                    await self.wait_for_set_change() 
                    await asyncio.sleep(2)
                    await self.client.send_message(self.bot_id, self.location)
            if any("–°—Ç—Ä–∞–∂ –±—É–¥–µ—Ç —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫ —Ä–∞—Å—ã" in ln and "Castitas" in ln for ln in lines):
                print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–∂–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç")
                if not self.is_in_caves and not self.is_moving and not self.in_castle:
                    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 'üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏'")
                    await self.client.send_message(self.bot_id, self.location)
            if any("–û–Ω —É—è–∑–≤–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—Ç–∞–∫ —Ä–∞—Å—ã" in ln and "Castitas" in ln for ln in lines):
                print("–°—Ç—Ä–∞–∂ –ø–æ—è–≤–∏–ª—Å—è")
                if not self.is_in_caves and not self.in_castle:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    chosen_direction = random.choice(RF.directions)
                    print(f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {chosen_direction}")
                    if self.kopka:
                        print("–ö–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 'üèõ –í –≥–µ–Ω. —à—Ç–∞–±'")
                        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                        await asyncio.sleep(5)
                        await self.client.send_message(self.bot_id, RF.chv)
                        await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                        await self.client.send_message(self.bot_id, chosen_direction)
                    else:
                        await self.client.send_message(self.bot_id, RF.chv)
                        await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç
                        await asyncio.sleep(1)  
                        print(f"–ö–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º '{chosen_direction}'")
                        await self.client.send_message(self.bot_id, chosen_direction)
            elif any("–°—Ç–∞–ª—å–Ω–æ–π –∞—Ä–≥–æ–ª –¥–ª—è —Ä–∞—Å—ã" in ln and "Castitas" in ln for ln in lines):
                print("–ê—Ä–≥–æ–ª –ø–æ—è–≤–∏–ª—Å—è")
                if not self.is_in_caves and not self.in_castle:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    chosen_direction = random.choice(RF.directions)
                    print(f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {chosen_direction}")
                    if self.kopka:
                        print("–ö–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 'üèõ –í –≥–µ–Ω. —à—Ç–∞–±'")
                        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                        await asyncio.sleep(5)
                        await self.client.send_message(self.bot_id, RF.chv)
                        await self.wait_for_set_change()
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                        await self.client.send_message(self.bot_id, chosen_direction + "'")
                    else:
                        await self.client.send_message(self.bot_id, RF.chv)
                        await self.wait_for_set_change()
                        await asyncio.sleep(1)  
                        print(f"–ö–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º '{chosen_direction}'")
                        await self.client.send_message(self.bot_id, chosen_direction + "'")
            elif any("–í–∞—Ä–∞—Å—Å–∞ –¥–ª—è —Ä–∞—Å—ã" in ln and "Castitas" in ln for ln in lines):
                print("–í–∞—Ä–∞—Å—Å–∞ –ø–æ—è–≤–∏–ª–∞—Å—å")
                if not self.is_in_caves and not self.in_castle:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    chosen_direction = random.choice(RF.directions)
                    print(f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {chosen_direction}")
                    if self.kopka:
                        print("–ö–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 'üèõ –í –≥–µ–Ω. —à—Ç–∞–±'")
                        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                        await asyncio.sleep(5)
                        await self.client.send_message(self.bot_id, RF.chv)
                        await self.wait_for_set_change()
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                        await self.client.send_message(self.bot_id, chosen_direction + "''")
                    else:
                        await self.client.send_message(self.bot_id, RF.chv)
                        await self.wait_for_set_change()
                        await asyncio.sleep(1)  
                        print(f"–ö–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º '{chosen_direction}''")
                        await self.client.send_message(self.bot_id, chosen_direction + "''")
            elif any("–¢—Ä–∞—à–µ—Ä –¥–ª—è —Ä–∞—Å—ã" in ln and "Castitas" in ln for ln in lines):
                print("–¢—Ä–∞—à–µ—Ä –ø–æ—è–≤–∏–ª—Å—è")
                if not self.is_in_caves and not self.in_castle:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    chosen_direction = random.choice(RF.directions)
                    print(f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {chosen_direction}")
                    if self.kopka:
                        print("–ö–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 'üèõ –í –≥–µ–Ω. —à—Ç–∞–±'")
                        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                        await asyncio.sleep(5)
                        await self.client.send_message(self.bot_id, RF.chv)
                        await self.wait_for_set_change()
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                        await self.client.send_message(self.bot_id, chosen_direction + "'''")
                    else:
                        await self.client.send_message(self.bot_id, RF.chv)
                        await self.wait_for_set_change()
                        await asyncio.sleep(1)  
                        print(f"–ö–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º '{chosen_direction}'''")
                        await self.client.send_message(self.bot_id, chosen_direction + "'''")
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–π–Ω–µ —á–µ—Ä–µ–∑ —á–∞—Å
            if any("–í–æ–π–Ω–∞ –≤ –∫—Ä–∞–≥–æ–≤—ã—Ö —à–∞—Ö—Ç–∞—Ö –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å!" in ln for ln in lines):
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–æ–π–Ω–µ —á–µ—Ä–µ–∑ —á–∞—Å!")
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 57 –º–∏–Ω—É—Ç
                asyncio.create_task(self.war_preparation_timer())
    async def pvp_heal_timer(self):
        """–¢–∞–π–º–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è pvpgoheal —á–µ—Ä–µ–∑ 43 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã"""
        print("–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä pvpgoheal –Ω–∞ 43 –º–∏–Ω—É—Ç—ã")
        await asyncio.sleep(41 * 60)  # 41 –º–∏–Ω—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö 
        self.go_to_heal = False
        self.go_term_Aquilla = False
        self.go_term_Basilaris = False   
        self.go_term_Castitas = False
        await asyncio.sleep(2 * 60)  # 2 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∏—Ç–æ–≥–æ 43 –º–∏–Ω—É—Ç—ã)
        self.go_to_heal = True
        print("–ß–µ—Ä–µ–∑ 43 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ go_to_heal = True")
    async def war_preparation_timer(self):
        """–¢–∞–π–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤–æ–π–Ω–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º kopka —á–µ—Ä–µ–∑ 25, 46 –∏ 58 –º–∏–Ω—É—Ç"""
        print("–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤–æ–π–Ω–µ")
        # –ï—Å–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–∞–ø—á–∏, —Ç–æ —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
        # if self.waiting_for_captcha:
        #     return
        # –ñ–¥—ë–º 25 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º kopka –∏ prem
        await asyncio.sleep(25 * 60)  # 25 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        if self.kopka and not self.prem and not self.waiting_for_captcha:
            print("–ß–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç kopka=True –∏ prem=False, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
            await self.client.send_message(self.bot_id, self.location)
        else:
            if not self.kopka:
                print("–ß–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç kopka=False")
            if self.prem:
                print("–ß–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç prem=True (–µ—Å—Ç—å –ê–ë–£)")
        # –ñ–¥—ë–º –µ—â—ë 21 –º–∏–Ω—É—Ç—É (–∏—Ç–æ–≥–æ 46 –º–∏–Ω—É—Ç –æ—Ç –Ω–∞—á–∞–ª–∞)
        await asyncio.sleep(21 * 60)
        if self.kopka and self.prem and not self.waiting_for_captcha:
            print("–ß–µ—Ä–µ–∑ 46 –º–∏–Ω—É—Ç kopka=True –∏ prem=True, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏")
            await self.client.send_message(self.bot_id, self.location)
        else:
            if not self.kopka:
                print("–ß–µ—Ä–µ–∑ 46 –º–∏–Ω—É—Ç kopka=False")
            if not self.prem:
                print("–ß–µ—Ä–µ–∑ 46 –º–∏–Ω—É—Ç prem=False (–Ω–µ—Ç –ê–ë–£)")
        # –ñ–¥—ë–º –µ—â—ë 12 –º–∏–Ω—É—Ç (–∏—Ç–æ–≥–æ 58 –º–∏–Ω—É—Ç –æ—Ç –Ω–∞—á–∞–ª–∞)
        await asyncio.sleep(12 * 60)
        if self.kopka and not self.waiting_for_captcha:
            print("–ß–µ—Ä–µ–∑ 58 –º–∏–Ω—É—Ç kopka=True, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–µ–Ω. —à—Ç–∞–±")
            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        else:
            print("–ß–µ—Ä–µ–∑ 58 –º–∏–Ω—É—Ç kopka=False, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ")
    def common_cave(self):
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è common_cave")
        @self.client.on(events.NewMessage(from_users=[self.tomat_id, self.ros_id, self.kroha_id, self.tamplier_id, self.john_id, self.pchelka_id, 5596818972, self.ded_id]))
        async def handle_specific_user_messages(event):
            if event.is_private:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
                print(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}: {event.message.text}")
                message_text = event.message.text.lower().strip()
                print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                if "_–±–∞–Ω–∫–∞" in message_text or "_–±–∞–Ω–∫—É" in message_text or "_–ø–∏—Ç—å" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _–±–∞–Ω–∫–∞ –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /drink_102")
                    await self.client.send_message(self.bot_id, "/drink_102")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif any(key in message_text for key in [
                    "_üïå –Ω–æ–≤–∞", "_üïå –º–∏—Ä–∞", "_üïå –∞–Ω—Ç–∞—Ä–µ—Å", "_üïå —Ñ–æ–±–æ—Å", "_üïå –∞—Ä—ç—Å", 
                    "_üïå —Ç–æ—Ä–Ω", "_üïå –∫–∞—Å—Ç–æ—Ä", "_üïå –∫–æ–Ω–∫–æ—Ä–¥", "_üïå –≥—Ä–æ–º", "_üïå –∞–ª—å–∫–æ—Ä", 
                    "_üèØ –±–µ–ª–ª–∞—Ç—Ä–∏–∫—Å", "_üèØ –∏–µ—Ä–∏—Ö–æ–Ω", "_üèØ —Ü–µ—Ñ–µ—è", "_üèØ —Å—É–ø–µ—Ä –Ω–æ–≤–∞", 
                    "_üè∞ –∞–ª—å–¥–µ–±–∞—Ä–∞–Ω", "_üè∞ –±–µ—Ç–µ–ª—å–≥–µ–π–∑–µ"
                ]):                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–º–∫–∞ –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                  # –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ –∑–∞–º–∫–æ–≤
                    castle_commands = {
                        "_üïå –Ω–æ–≤–∞": "üïå –ù–æ–≤–∞",
                        "_üïå –º–∏—Ä–∞": "üïå –ú–∏—Ä–∞",
                        "_üïå –∞–Ω—Ç–∞—Ä–µ—Å": "üïå –ê–Ω—Ç–∞—Ä–µ—Å",
                        "_üïå —Ñ–æ–±–æ—Å": "üïå –§–æ–±–æ—Å",
                        "_üïå –∞—Ä—ç—Å": "üïå –ê—Ä—ç—Å",
                        "_üïå —Ç–æ—Ä–Ω": "üïå –¢–æ—Ä–Ω",
                        "_üïå –∫–∞—Å—Ç–æ—Ä": "üïå –ö–∞—Å—Ç–æ—Ä",
                        "_üïå –∫–æ–Ω–∫–æ—Ä–¥": "üïå –ö–æ–Ω–∫–æ—Ä–¥",
                        "_üïå –≥—Ä–æ–º": "üïå –ì—Ä–æ–º",
                        "_üïå –∞–ª—å–∫–æ—Ä": "üïå –ê–ª—å–∫–æ—Ä",
                        "_üèØ –±–µ–ª–ª–∞—Ç—Ä–∏–∫—Å": "üèØ –ë–µ–ª–ª–∞—Ç—Ä–∏–∫—Å",
                        "_üèØ –∏–µ—Ä–∏—Ö–æ–Ω": "üèØ –ò–µ—Ä–∏—Ö–æ–Ω",
                        "_üèØ —Ü–µ—Ñ–µ—è": "üèØ –¶–µ—Ñ–µ—è",
                        "_üèØ —Å—É–ø–µ—Ä –Ω–æ–≤–∞": "üèØ –°—É–ø–µ—Ä –Ω–æ–≤–∞",
                        "_üè∞ –∞–ª—å–¥–µ–±–∞—Ä–∞–Ω": "üè∞ –ê–ª—å–¥–µ–±–∞—Ä–∞–Ω",
                        "_üè∞ –±–µ—Ç–µ–ª—å–≥–µ–π–∑–µ": "üè∞ –ë–µ—Ç–µ–ª—å–≥–µ–π–∑–µ"
                    }
                  # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
                    castle_command = None
                    for key, value in castle_commands.items():
                        if key in message_text:
                            castle_command = value
                            break
                    if castle_command:
                        if self.kopka:  
                            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç chv –¥–ª—è –∑–∞–º–∫–∞ {castle_command}")
                            await self.client.send_message(self.bot_id, RF.chv)
                            await self.wait_for_set_change()
                            await asyncio.sleep(1)
                            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≥–µ–Ω. —à—Ç–∞–±")
                            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                            await self.arrival_hil()
                            await asyncio.sleep(2)
                            await self.client.send_message(self.bot_id, castle_command)
                        else:
                            await self.client.send_message(self.bot_id, RF.chv)
                            await self.wait_for_set_change()
                            await asyncio.sleep(1)
                            await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                            await asyncio.sleep(3)
                            await self.client.send_message(self.bot_id, castle_command)
                        await event.message.delete()
                elif "_—Ñ–æ–ª—å—Ç" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    # if event.sender_id == self.cave_leader_id:
                    #     print(f"–ö–æ–º–∞–Ω–¥–∞ _—Ñ–æ–ª—å—Ç –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                    #     return
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ–ª—å—Ç –±–∏–Ω–¥–æ–≤
                    if hasattr(self, 'folt_binds') and self.folt_binds:
                        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É folt_binds")
                        await self.client.send_message(self.bot_id, self.folt_binds[0][1])
                    else:
                        print("–§–æ–ª—å—Ç –±–∏–Ω–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–≥—à" in message_text and not self.waiting_for_captcha:  
                    if self.kopka:  
                        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç hp_{self.hp_binds[0][0]})")
                        await self.client.send_message(self.bot_id, self.hp_binds[0][1])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é hp_{self.hp_binds[0][0]}) –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è
                        await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç
                        await asyncio.sleep(1)
                        self.my_health = self.my_max_health = self.hp_binds[0][0]
                        print(f"–ó–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.my_health}/{self.my_max_health}")
                        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /go_to_gsh")
                        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                        await self.arrival_hil()  # –í—ã–∑—ã–≤–∞–µ–º arrival_hil –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥–µ–Ω. —à—Ç–∞–±
                    else:
                        await self.client.send_message(self.bot_id, self.hp_binds[0][1])
                        await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç
                        await asyncio.sleep(1)
                        self.my_health = self.my_max_health = self.hp_binds[0][0]
                        await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—Å—Ç–æ–ø" in message_text or "_—Å—Ç–æ–π" in message_text:
                    if self.is_moving:
                        await self.client.send_message(self.bot_id, "üèÉ‚Äç‚ôÇÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–∫—Ä–∞–≥–∏" in message_text:  
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _–∫—Ä–∞–≥–∏ –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return  
                    await self.client.send_message(self.bot_id, "üåã –ö—Ä–∞–≥–æ–≤—ã–µ —à–∞—Ö—Ç—ã")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_restart" in message_text:
                    print("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    msg = await self.client.send_message(event.chat_id, "Ver.becccl3.18.10")
                    await asyncio.sleep(5)
                    await msg.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–µ—Ä—Å–∏–∏
                    await asyncio.sleep(1)
                    await self.client.disconnect()
                    import os, sys
                    os.execv(sys.executable, [sys.executable] + sys.argv) #–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
                elif "_–ø–µ—â–µ—Ä–∞" in message_text:  
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _—Ö–∏–ª –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return                    
                    if self.kopka:  
                        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç hp_{self.hp_binds[0][0]})")
                        await self.client.send_message(self.bot_id, self.hp_binds[0][1])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é hp_{self.hp_binds[0][0]}) –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è
                        await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç 
                        await asyncio.sleep(1)
                        self.my_health = self.my_max_health = self.hp_binds[0][0]
                        print(f"–ó–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.my_health}/{self.my_max_health}")
                        await asyncio.sleep(5)
                        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /go_to_gsh")
                        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
                        await self.arrival_hil()  # –í—ã–∑—ã–≤–∞–µ–º arrival_hil –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥–µ–Ω. —à—Ç–∞–±
                        await asyncio.sleep(2)
                        await self.client.send_message(self.bot_id, "üö† –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø–µ—â–µ—Ä—ã")
                    else:
                        await self.client.send_message(self.bot_id, self.hp_binds[0][1])
                        await self.wait_for_set_change() #—Ä–∞–±–æ—Ç–∞–µ—Ç 
                        await asyncio.sleep(1)
                        self.my_health = self.my_max_health = self.hp_binds[0][0]
                        await self.client.send_message(self.bot_id, "üíñ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ")
                        await asyncio.sleep(3)
                        await self.client.send_message(self.bot_id, "üö† –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø–µ—â–µ—Ä—ã")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—à–∞–≥" in message_text:  
                    if not self.is_in_caves:
                        return
                    await asyncio.sleep(1)  
                    await self.cave_buttons_message.click(2)
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–º–æ–±—ã" in message_text:  
                    self.mobs = True
                    self.location = "üî• 61-65 –õ–µ—Å –ø–ª–∞–º–µ–Ω–∏"  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
                    await self.client.send_message(self.bot_id, RF.hp)
                    await self.wait_for_set_change()
                    await asyncio.sleep(1)
                    await event.message.delete()
                elif "_—ç—Ç–µ—Ä" in message_text:
                    self.mobs = True  # –∏–ª–∏ False, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏
                    self.location = "üèî –≠—Ç–µ—Ä"
                    await self.client.send_message(self.bot_id, RF.hp)
                    await self.wait_for_set_change()
                    await asyncio.sleep(1)
                    await event.message.delete()
                elif "_–¥–∞–Ω–∂–∏" in message_text:  
                    self.mobs = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –¥–∞–Ω–∂–µ–π
                    # await self.client.send_message(self.cave_leader_id, "–•–æ–¥–∏–º –≤ –¥–∞–Ω–∂–∏")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞
                    # await self.client.send_message(self.bot_id, RF.chv)
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–≤—ã—Ö–æ–¥" in message_text:  
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _—Ö–∏–ª –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    await asyncio.sleep(1)  
                    await self.rf_message.click(3)
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—Ä–µ—Å" in message_text:  
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _—Ä–µ—Å –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    # if self.is_has_res:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ is_has_res —Ä–∞–≤–Ω–æ True
                    self.is_has_res = False
                    await asyncio.sleep(randint(14, 20))
                    await self.client.send_message(self.bot_id, self.hp_binds[0][1])  # –ù–∞–¥–µ–≤–∞–µ–º –±–∏–Ω–¥ –Ω–∞ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ HP
                    await self.wait_for_set_change()
                    await asyncio.sleep(1)
                    await self.cave_buttons_message.click(1)
                    print(self.my_health, self.my_max_health)
                    self.my_health = self.my_max_health = self.hp_binds[0][0]
                    self.last_bind = self.hp_binds[0][1]
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—Å–æ—Å—Ç–∞–≤" in message_text:  
                    await asyncio.sleep(1)  
                    await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
                    # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å "–°–æ—Å—Ç–∞–≤:"
                    while True:
                        await asyncio.sleep(0.1)  # –î–æ–±–∞–≤–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É 
                        last_message = await self.client.get_messages(self.bot_id, limit=1)
                        if last_message:
                            message_text_check = last_message[0].message.split('\n')[0]
                            if message_text_check.startswith("–°–æ—Å—Ç–∞–≤:"):
                                print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–∞–≤–µ: {message_text_check}")
                                break
                    # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
                    await asyncio.sleep(2)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.client.send_message(self.bot_id, "‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–º–æ–±" in message_text:  
                    if self.is_in_caves:
                        return
                    await asyncio.sleep(1)  
                    await self.client.send_message(self.bot_id, self.location)
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–±—É–ª–æ—á–∫–∞" in message_text:  
                    await asyncio.sleep(1)  
                    # await self.client.send_message(self.cave_leader_id, "–±—É–ª–æ—á–∫–∞")
                    self.is_in_caves = self.is_has_hil = self.is_has_res = self.extra_hil = True
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await asyncio.sleep(10)
                    # if self.is_in_caves:  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ self.is_in_caves
                    await self.client.send_message(self.bot_id, "‚öñÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤")
                    await asyncio.sleep(20)
                    self.last_bind = self.after_bind
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä–µ–¥ autoHeal
                    await self.client.send_message(self.bot_id, "/hero")
                    await asyncio.sleep(3)  # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
                    response = await self.client.get_messages(self.bot_id, limit=1)
                    if response:
                        health_line = next((line for line in response[0].text.split('\n') if '‚ù§–ó–¥–æ—Ä–æ–≤—å–µ:' in line), None)
                        if health_line:
                            match = re.search(r'‚ù§–ó–¥–æ—Ä–æ–≤—å–µ:\s*(\d+)', health_line)
                            if match:
                                self.my_health = int(match.group(1))
                                print(f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä–µ–¥ autoHeal: {self.my_health}")
                                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∏–∂–µ extra_hill_hp, –≤–µ–¥–µ–º —Å–µ–±—è –∫–∞–∫ –º–µ–∂–¥—É extra –∏ ned
                                if self.my_health < self.extra_hill_hp:  # –ù–∞–ø—Ä–∏–º–µ—Ä, 100 HP < 300
                                    print(f"–ó–¥–æ—Ä–æ–≤—å–µ ({self.my_health}) –Ω–∏–∂–µ {self.extra_hill_hp}, –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∫–∞–∫ –¥–ª—è {self.extra_hill_hp}-{self.ned_hill_hp}")
                                    await asyncio.sleep(8)  # –ñ–¥–µ–º 8 —Å–µ–∫—É–Ω–¥, –∫–∞–∫ –≤ —Å–ª—É—á–∞–µ –º–µ–∂–¥—É extra –∏ ned
                                    if not self.is_player_dead and self.last_bind != self.hp_binds[0][1] and self.is_has_hil and self.extra_hil:
                                        self.is_has_hil = False
                                        await self.client.send_message(self.bot_id, self.hp_binds[0][1])  # –ù–∞–¥–µ–≤–∞–µ–º {self.hp_binds[0][0]}) HP
                                        await self.wait_for_set_change() #–Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
                                        await asyncio.sleep(1)
                                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_binds[0][1]} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: {self.hp_binds[0][0]}))")
                                        await self.rf_message.click(0)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫ –¥–ª—è —Ö–∏–ª–∞
                                        self.my_health = self.my_max_health = self.hp_binds[0][0]
                                        self.last_bind = self.hp_binds[0][1]
                                        print(f"–°—Ç–∞—Ç—É—Å has_hil –æ–±–Ω–æ–≤–ª–µ–Ω: {self.is_has_hil}")
                                    return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–æ—Å–ª–µ —Ö–∏–ª–∞
                            else:
                                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–¥–æ—Ä–æ–≤—å–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏")
                        else:
                            print("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ")
                    else:
                        print("–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –Ω–∞ /hero")
                    await self.autoHeal()  # –í—ã–∑—ã–≤–∞–µ–º autoHeal() –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                elif "_–¥–∞–Ω–∂" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _—Ö–∏–ª –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    if self.is_moving:
                        # –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await self.client.send_message(
                            event.sender_id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
                            "–î–∞–Ω–∂ –±—É–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–∞—Ä—ã –º–∏–Ω—É—Ç"
                        )
                        # –ñ–¥–µ–º, –ø–æ–∫–∞ self.kopka —Å—Ç–∞–Ω–µ—Ç True
                        while not self.kopka:
                            await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É
                        await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
                        await self.client.send_message(self.bot_id, self.location)
                    else:
                        # –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                        await asyncio.sleep(1)
                        if self.kopka:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ self.kopka
                            await self.client.send_message(self.bot_id, self.location)
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            await self.client.send_message(
                                event.sender_id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
                                "–î–∞–Ω–∂ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É."
                            )
                        else:
                            await self.client.send_message(self.bot_id, "/go_dange_10014")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—Ö–∏–ª" in message_text:  
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _—Ö–∏–ª –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    if self.last_bind != self.hp_binds[0][1] and self.is_has_hil:
                        self.is_has_hil = False
                        await asyncio.sleep(5)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                        await self.client.send_message(self.bot_id, self.hp_binds[0][1])  # –ù–∞–¥–µ–≤–∞–µ–º {self.hp_binds[0][0]}) HP
                        await self.wait_for_set_change() #–Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
                        await asyncio.sleep(1)
                        await self.cave_buttons_message.click(0)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
                        print(f"–°–º–µ–Ω–∏–ª–∏ –±–∏–Ω–¥ –Ω–∞: {self.hp_binds[0][1]} (–º–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: {self.hp_binds[0][0]}))")
                        self.my_health = self.my_max_health = self.hp_binds[0][0]
                        self.last_bind = self.hp_binds[0][1]
                        await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—ç–Ω–∫–∞" in message_text:  
                    if self.last_energy_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ last_energy_message –Ω–µ None
                        if self.your_name in ["ùï¥ùñÜùñíùñïùñëùñéùñäùñó", ]:
                            # –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ bezvgroup
                            forwarded_msg = await self.last_energy_message.forward_to(self.bezvgroup)
                        else:
                            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—â–µ—Ä—ã
                            if self.is_in_caves:
                                forwarded_msg = await self.last_energy_message.forward_to(self.group59)
                            else:    
                                forwarded_msg = await self.last_energy_message.forward_to(1033007754)
                        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                        await asyncio.sleep(3)
                        await forwarded_msg.delete()
                    else:
                        if self.your_name in ["ùï¥ùñÜùñíùñïùñëùñéùñäùñó", ]:
                            # –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ bezvgroup
                            sent_msg = await self.client.send_message(self.bezvgroup, "–µ—â—ë –Ω–µ –∫–∞–ø–Ω—É–ª–æ")
                        else:
                            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—â–µ—Ä—ã
                            if self.is_in_caves:
                                sent_msg = await self.client.send_message(self.group59, "–µ—â—ë –Ω–µ –∫–∞–ø–Ω—É–ª–æ")
                            else:
                                sent_msg = await self.client.send_message(1033007754, "–µ—â—ë –Ω–µ –∫–∞–ø–Ω—É–ª–æ")
                        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                        await asyncio.sleep(3)
                        await sent_msg.delete()
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–∞–∫—Ä—ã+" in message_text or "_–∞–∫—Ä—ã-" in message_text:
                    # –£–ø—Ä–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–æ–º Aquilla
                    self.go_term_Aquilla = "_–∞–∫—Ä—ã+" in message_text
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞
                    # if self.go_term_Aquilla:
                    #     await self.client.send_message(self.cave_leader_id, "–í–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ Aquilla")
                    # else:
                    #     await self.client.send_message(self.cave_leader_id, "–í—ã–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ Aquilla")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–±–µ–ª–∫–∏+" in message_text or "_–±–µ–ª–∫–∏-" in message_text:
                    # –£–ø—Ä–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–æ–º Basilaris
                    self.go_term_Basilaris = "_–±–µ–ª–∫–∏+" in message_text
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞
                    # if self.go_term_Basilaris:
                    #     await self.client.send_message(self.cave_leader_id, "–í–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ Basilaris")
                    # else:
                    #     await self.client.send_message(self.cave_leader_id, "–í—ã–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ Basilaris")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–Ω–∞—à+" in message_text or "_–Ω–∞—à-" in message_text:
                    # –£–ø—Ä–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–æ–º Castitas
                    self.go_term_Castitas = "_–Ω–∞—à+" in message_text
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞
                    # if self.go_term_Castitas:
                    #     await self.client.send_message(self.cave_leader_id, "–í–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ Castitas")
                    # else:
                    #     await self.client.send_message(self.cave_leader_id, "–í—ã–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ Castitas")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—Ç–µ—Ä–º+" in message_text or "_—Ç–µ—Ä–º-" in message_text:
                    # –£–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º–∏ —Ñ–ª–∞–≥–∞–º–∏ (Aquilla –∏ Basilaris)
                    target_value = "_—Ç–µ—Ä–º+" in message_text
                    self.go_term_Aquilla = target_value
                    self.go_term_Basilaris = target_value
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–æ–≤
                    # if target_value:
                    #     await self.client.send_message(self.cave_leader_id, "–í–∫–ª—é—á–µ–Ω—ã –æ–±–∞ —Ñ–ª–∞–≥–∞ (Aquilla –∏ Basilaris)")
                    # else:
                    #     await self.client.send_message(self.cave_leader_id, "–í—ã–∫–ª—é—á–µ–Ω—ã –æ–±–∞ —Ñ–ª–∞–≥–∞ (Aquilla –∏ Basilaris)")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–≥–µ–±–æ" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _–≥–µ–±–æ –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    self.go_term_Basilaris = True
                    if self.is_moving:
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                    else:
                        await asyncio.sleep(1)
                    await self.client.send_message(self.bot_id, "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—ç–π–≤–∏" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _—ç–π–≤–∏ –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    self.go_term_Aquilla = True
                    if self.is_moving:
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                    else:
                        await asyncio.sleep(1)
                    await self.client.send_message(self.bot_id, "ü§ñ–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_—Ç–∏—Ä" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _—Ç–∏—Ä –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    self.go_term_Aquilla = True
                    if self.is_moving:
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                    else:
                        await asyncio.sleep(1)
                    await self.client.send_message(self.bot_id, "ü§ñ–ê–ª—Ç–∞—Ä—å –¢–∏—Ä")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–∏—Å–∞" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _–∏—Å–∞ –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    self.go_term_Basilaris = True
                    if self.is_moving:
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                    else:
                        await asyncio.sleep(1)
                    await self.client.send_message(self.bot_id, "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ò—Å–∞")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–∏—Å—Å" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _–∏—Å—Å –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    if self.is_moving:
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                    else:
                        await asyncio.sleep(1)
                    await self.client.send_message(self.bot_id, "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –ò—Å—Å")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_–¥–∞–≥–∞–∑" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _–¥–∞–≥–∞–∑ –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    if self.is_moving:
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                    else:
                        await asyncio.sleep(1)
                    await self.client.send_message(self.bot_id, "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –î–∞–≥–∞–∑")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 
                elif "_—Ö–∞–≥–∞–ª" in message_text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è cave leader
                    if event.sender_id == self.cave_leader_id:
                        print(f"–ö–æ–º–∞–Ω–¥–∞ _—Ö–∞–≥–∞–ª –æ—Ç cave leader {event.sender_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        return
                    self.go_term_Castitas = True
                    if self.is_moving:
                        await asyncio.sleep(1)
                        while self.is_moving:
                            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å–µ –µ—â–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –∂–¥–µ–º...")
                            await asyncio.sleep(5)
                        print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ—Å—Ç–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è.")
                        await asyncio.sleep(5)
                    else:
                        await asyncio.sleep(1)
                    await self.client.send_message(self.bot_id, "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –•–∞–≥–∞–ª")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_heal" in message_text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã
                    new_value = int(message_text.split()[-1])
                    self.pvpgoheal = new_value  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    # await self.client.send_message(self.cave_leader_id, f"–•–∏–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {self.pvpgoheal}")  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_chv" in message_text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã
                    new_value = message_text.split()[-1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ, —ç—Ç–æ –∏ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π value
                    RF.chv = new_value  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chv
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif "_zatochka" in message_text:
                    new_value = message_text.split()[-1]
                    if new_value.isdigit():
                        self.zatochka = int(new_value)
                    await event.message.delete()
                elif "_—Ñ–∞—Å—Ç+" in message_text:
                    self.fast_cave = True
                    # await self.client.send_message(self.cave_leader_id, "–í–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ fast_cave")
                    await event.message.delete()
                elif "_—Ñ–∞—Å—Ç-" in message_text:
                    self.fast_cave = False
                    # await self.client.send_message(self.cave_leader_id, "–í—ã–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ fast_cave")
                    await event.message.delete()
                elif "_active+" in message_text or "_active-" in message_text:
                    # –£–ø—Ä–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–æ–º active
                    self.active = "_active+" in message_text
                    # –ö–æ–≥–¥–∞ —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–µ–Ω
                    if self.active:
                        self.go_term_Aquilla = False
                        self.go_term_Basilaris = False
                        # await self.client.send_message(self.cave_leader_id, "–§–ª–∞–≥ active –≤–∫–ª—é—á–µ–Ω")
                    else:
                        self.go_term_Aquilla = True
                        self.go_term_Basilaris = True
                        # await self.client.send_message(self.cave_leader_id, "–§–ª–∞–≥ active –≤—ã–∫–ª—é—á–µ–Ω")
                    await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                else:
                    print("–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è common_cave —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.my_health}")
        print(f"–ù–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ª–∏ –≤—ã –≤ –ø–µ—â–µ—Ä–∞—Ö: {self.is_in_caves}")
        print(f"–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –ª–∏–¥–µ—Ä–æ–º –ø–µ—â–µ—Ä: {self.is_cave_leader}")
    async def vihod_s_caves(self, lstr):
        self.is_cave_leader = any(f"/group_guild_join_{self.cave_leader_id}" in line for line in lstr)
        print(f"{'–¢—ã –ø–∞—Ç–∏–≤–æ–¥' if self.is_cave_leader else '–¢—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥'}")
        if not self.is_in_caves:
            print("–¢—ã –Ω–µ –≤ –ø–µ—â–µ—Ä–∞—Ö")
            return
        print("–¢—ã –≤ –ø–µ—â–µ—Ä–∞—Ö")
        total_health = 0
        alive_count = 0
        alive_has_heal = False
        group_has_res = False
        group_members = []
        for line in lstr:
            if not line.strip():
                continue
            if member_id := re.search(r"/p_guild_exc_(\d+)", line):
                group_members.append(int(member_id.group(1)))
                continue
            if member_info := re.search(r"\d\) .*\[.*\](.*?)üèÖ\d+—É—Ä\. (.*)", line):
                nick, status = member_info.groups()
                nick = nick.strip()
                is_alive = "–ú–µ—Ä—Ç–≤" not in status
                health = 0
                has_heal = "üíñ" in status
                has_res = "ü•§" in status
                if is_alive:
                    alive_count += 1
                    if health_match := re.search(r"‚ù§Ô∏è(\d+)/\d+", status):
                        health = int(health_match.group(1))
                        total_health += health
                    alive_has_heal = alive_has_heal or has_heal
                # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Å —É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∂–∏–≤–æ–≥–æ –∏–ª–∏ –º–µ—Ä—Ç–≤–æ–≥–æ
                group_has_res = group_has_res or has_res
                player_status = f"{nick}: HP {health}, {'alive' if is_alive else 'dead'}, {'has hil' if has_heal else 'no hil'}, {'has res' if has_res else 'no res'}"
                print(player_status)
        print(f"\n–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –≥—Ä—É–ø–ø—ã: {total_health}")
        print(f"–ñ–∏–≤—ã—Ö: {alive_count}, –ñ–∏–≤—ã–µ —Å —Ö–∏–ª–∫–∞–º–∏: {'–¥–∞' if alive_has_heal else '–Ω–µ—Ç'}, –ì—Ä—É–ø–ø–∞ —Å —Ä–µ—Å–∞–º–∏: {'–¥–∞' if group_has_res else '–Ω–µ—Ç'}")
        should_exit = False
        if alive_count == 1 and total_health < 2400:
            should_exit = True
            reason = "–æ—Å—Ç–∞–ª—Å—è 1 –∂–∏–≤–æ–π —Å –º–µ–Ω–µ–µ —á–µ–º 2400 HP"
        elif alive_count > 1 and total_health < 4000:
            should_exit = True
            reason = f"–æ—Å—Ç–∞–ª–æ—Å—å {alive_count} –∂–∏–≤—ã—Ö —Å —Å—É–º–º–∞—Ä–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º –º–µ–Ω–µ–µ 4000 HP"
        if should_exit and not alive_has_heal and not group_has_res:
            message = f"{'–¢—ã –ª–∏–¥–µ—Ä' if self.is_cave_leader else '–¢—ã –Ω–µ –ª–∏–¥–µ—Ä'}, –ø–æ—Ä–∞ –Ω–∞ –≤—ã—Ö–æ–¥. –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {total_health}, –Ω–µ—Ç —Ö–∏–ª–æ–∫ —É –∂–∏–≤—ã—Ö –∏ —Ä–µ—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"
            # await self.client.send_message(self.cave_leader_id, message)
            print(message)
            if self.is_cave_leader:
                for member_id in group_members:
                    if member_id != self.cave_leader_id:
                        await self.client.send_message(member_id, "–í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–µ—â–µ—Ä—ã _—Ñ–æ–ª—å—Ç")
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {member_id}: –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–µ—â–µ—Ä—ã _—Ñ–æ–ª—å—Ç")
                await asyncio.sleep(15) 
                await self.rf_message.click(3)
        else:
            print(f"–ï—â—ë —Ä–∞–Ω–æ –Ω–∞ –≤—ã—Ö–æ–¥. –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {total_health}, –ñ–∏–≤—ã—Ö: {alive_count}")
    async def hp_in_caves_kingRagnar(self, lstr):
        print(f"–ü—Ä–∏–≤–µ—Ç, kingRagnar –≤ –ø–µ—â–µ—Ä–∞—Ö")
        # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ cave_leader
        self.is_cave_leader = any(f"/group_guild_join_{self.cave_leader_id}" in line for line in lstr)
        # ‚úÖ –†–∞–±–æ—Ç–∞–µ–º –µ—Å–ª–∏ –≤ –ø–µ—â–µ—Ä–∞—Ö –ò–õ–ò –ª–∏–¥–µ—Ä
        if not (self.is_in_caves and self.is_cave_leader):
            print("–¢—ã –Ω–µ –≤ –ø–µ—â–µ—Ä–∞—Ö –∏–ª–∏ –Ω–µ –ª–∏–¥–µ—Ä ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        for line in lstr:
            if "üë®‚Äçü¶≥–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä‚ò†Ô∏è" in line:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è kingRagnar
                health_info = re.search(r"‚ù§Ô∏è(\d+)/\d+", line)
                if health_info:
                    current_health = int(health_info.group(1))
                    print(f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ kingRagnar: {current_health}")
                    # –õ–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Ç–æ–≤ –¥–ª—è kingRagnar
                    if 10500 <= current_health <= 11500:  # –°–µ—Ç1
                        new_set = "–°–µ—Ç1"
                    elif 9500 <= current_health < 10500:  # –°–µ—Ç2
                        new_set = "–°–µ—Ç2"
                    elif 8000 <= current_health < 9500:  # –°–µ—Ç3
                        new_set = "–°–µ—Ç3"
                    elif 7000 <= current_health < 8000:  # –°–µ—Ç4
                        new_set = "–°–µ—Ç4"
                    elif 5700 <= current_health < 7000:  # –°–µ—Ç5
                        new_set = "–°–µ—Ç5"
                    elif 0 <= current_health < 5700:  # –°–µ—Ç6
                        new_set = "–°–µ—Ç6"
                    else:
                        new_set = None
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if new_set and new_set != self.last_set_kingRagnar:
                        await self.client.send_message(self.players["üë®‚Äçü¶≥–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä‚ò†Ô∏è"], new_set)
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {new_set}")
                        self.last_set_kingRagnar = new_set  # –û–±–Ω–æ–≤–ª—è–µ–º last_set
                    print(f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: {self.last_set_kingRagnar}")
                    break
    async def time_cave(self, lstr):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä lstr
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º
        self.is_cave_leader = any(f"/group_guild_join_{self.cave_leader_id}" in line for line in lstr)
        if not self.is_cave_leader:
            print("–¢—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥, time_cave –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥, –µ—Å–ª–∏ –Ω–µ –ø–∞—Ç–∏–≤–æ–¥
        print(f"{'–¢—ã –ø–∞—Ç–∏–≤–æ–¥' if self.is_cave_leader else '–¢—ã –Ω–µ –ø–∞—Ç–∏–≤–æ–¥'}")
        if self.cave_task_running:
            print("–ó–∞–¥–∞—á–∞ time_cave —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # await self.client.send_message(self.cave_leader_id, "–ó–∞–¥–∞—á–∞ time_cave —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            return
        self.cave_task_running = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞
        print("–ú–µ—Ç–æ–¥ time_cave –∑–∞–ø—É—â–µ–Ω.")
        # await self.client.send_message(self.cave_leader_id, "–ú–µ—Ç–æ–¥ time_cave –∑–∞–ø—É—â–µ–Ω.")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        CHECK_HOUR = 20
        CHECK_MINUTE = 55
        while True:
            now = datetime.datetime.now()
            print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
            # await self.client.send_message(self.cave_leader_id, f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {now}")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            next_check = now.replace(hour=CHECK_HOUR, minute=CHECK_MINUTE, second=0, microsecond=0)
            if now >= next_check:
                next_check += datetime.timedelta(days=1)
                print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.")
                # await self.client.send_message(self.cave_leader_id, f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: {next_check}")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            wait_time = (next_check - now).total_seconds()
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ {CHECK_HOUR}:{CHECK_MINUTE}: {wait_time} —Å–µ–∫—É–Ω–¥.")
            # await self.client.send_message(self.cave_leader_id, f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ {CHECK_HOUR}:{CHECK_MINUTE}: {wait_time} —Å–µ–∫—É–Ω–¥.")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await asyncio.sleep(wait_time)
            # –£—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ —Ñ–ª–∞–≥—É)
            if not self.is_in_caves or not self.is_cave_leader:  # –ï—Å–ª–∏ –Ω–µ –≤ –ø–µ—â–µ—Ä–µ –∏–ª–∏ –Ω–µ –ª–∏–¥–µ—Ä, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                # await self.client.send_message(self.cave_leader_id, "–í—ã –Ω–µ –±—ã–ª–∏ –≤ –ø–µ—â–µ—Ä–µ –∏–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É.")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ –Ω–∞–∂–∞–ª–∏
                if not self.waiting_for_captcha:  # –ï—Å–ª–∏ –Ω–µ –∂–¥—ë–º –∫–∞–ø—á—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º /daily
                    await asyncio.sleep(3)
                    await self.client.send_message(self.bot_id, "/daily")
                break
            # –ï—Å–ª–∏ `self.is_moving` –∞–∫—Ç–∏–≤–µ–Ω, –∂–¥–µ–º, –ø–æ–∫–∞ –æ–Ω –Ω–µ —Å—Ç–∞–Ω–µ—Ç `False`
            while self.is_moving:
                await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            await asyncio.sleep(randint(10, 50))
            await self.rf_message.click(3)
            await asyncio.sleep(5)
            await self.client.send_message(self.bot_id, "/daily")
            # await self.client.send_message(self.cave_leader_id, "–í—ã –±—ã–ª–∏ –≤ –ø–µ—â–µ—Ä–µ –∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É.")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        self.cave_task_running = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –∫–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    async def prepare_for_caves(self):
        print("–ù–∞—á–∞–ª–æ prepare_for_caves()")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–ª—Ç–∞—Ä—è—Ö
            messages = await self.client.get_messages(-1001284047611, limit=1)
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            if messages:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ -1001284047611:")
                print(f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {messages[0].id}")
                print(f"–î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {messages[0].date}")
                print(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {messages[0].text[:200]}...")  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                await self.parce_4v_logs(messages[0].text)
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ -1001284047611")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if self.cmd_altar:
            print(f"–í—ã–±—Ä–∞–Ω –∞–ª—Ç–∞—Ä—å: {self.cmd_altar}")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—Ç–∞—Ä—è—Ö. –ë—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª—Ç–∞—Ä—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
        print("–ö–æ–Ω–µ—Ü prepare_for_caves()")
    def choose_random_altar(self):
        if self.active:
            return random.choice([
                "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –î–∞–≥–∞–∑", 
                "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ", 
                "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ò—Å–∞", 
                "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –ò—Å—Å", 
                "ü§ñ–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏", 
                "ü§ñ–ê–ª—Ç–∞—Ä—å –¢–∏—Ä"
            ])
        else:
            return random.choice([
                "üë©‚ÄçüöÄ–ê–ª—Ç–∞—Ä—å –ì–µ–±–æ", 
                # "üßù‚Äç‚ôÄ–ê–ª—Ç–∞—Ä—å –î–∞–≥–∞–∑", 
                # "ü§ñ–ê–ª—Ç–∞—Ä—å –≠–π–≤–∏", 
            ])
    async def handle_no_energy(self):
        print("–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏")
        await asyncio.sleep(5)
        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        await self.gokragi()
    async def handle_energy_found(self):
        print("–µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è")
        await asyncio.sleep(5)
        await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
        if self.mobs:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ñ–ª–∞–≥ –¥–ª—è –º–æ–±–æ–≤
            await self.check_arrival()  # –¥–ª—è –º–æ–±–æ–≤
        else:
            await self.gokragi()  # –¥–ª—è –¥–∞–Ω–∂–µ–π
    async def handle_energy(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
        if self.waiting_for_captcha or self.is_moving:
            print("–£–∂–µ –æ–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏–ª–∏ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏...")
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø–µ—â–µ—Ä–∞—Ö
        if self.is_in_caves:
            if self.is_cave_leader:
                print("–í–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –ø–µ—â–µ—Ä–∞—Ö (–ª–∏–¥–µ—Ä)")
                await asyncio.sleep(1)
                await self.rf_message.click(2)
            else:
                print("–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –≥—Ä—É–ø–ø—É")
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ –ø–µ—â–µ—Ä
        if not (self.is_nacheve_active or self.is_training or self.in_castle or self.v_terminale):
            print("–í–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤–Ω–µ –ø–µ—â–µ—Ä")
            await asyncio.sleep(1)
            await self.client.send_message(self.bot_id, "üèõ –í –≥–µ–Ω. —à—Ç–∞–±")
            # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞–ø—á–∏
            await asyncio.sleep(3)
            # –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–∞–ø—á–∞ - –∂–¥—ë–º –µ—ë —Ä–µ—à–µ–Ω–∏—è
            if self.waiting_for_captcha:
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞, –æ–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è...")
                while self.waiting_for_captcha:
                    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ø—á–∏...")
                    await asyncio.sleep(20)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
                print("–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                # await self.client.send_message(self.group59, "–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏–ª–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ –±—ã–ª–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±—ã—Ç–∏–µ
            if self.mobs:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ñ–ª–∞–≥ –¥–ª—è –º–æ–±–æ–≤
                await self.check_arrival()         # –¥–ª—è –º–æ–±–æ–≤
            else:
                await self.check_arrival_dange()    # –¥–ª—è –¥–∞–Ω–∂–µ–π
    async def cave_profit(self, lstr):
        # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ cave_leader
        self.is_cave_leader = any(f"/group_guild_join_{self.ros_id}" in line for line in lstr)
        # ‚úÖ –†–∞–±–æ—Ç–∞–µ–º –µ—Å–ª–∏ –≤ –ø–µ—â–µ—Ä–∞—Ö –ò–õ–ò –ª–∏–¥–µ—Ä
        if not (self.is_in_caves and self.is_cave_leader):
            print("–¢—ã –Ω–µ –≤ –ø–µ—â–µ—Ä–∞—Ö –∏–ª–∏ –Ω–µ –ª–∏–¥–µ—Ä ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        reward_line = next((line for line in lstr if "üåï–û–ø—ã—Ç:" in line), None)
        if reward_line:
            match = re.search(r"üåï–û–ø—ã—Ç:\s*(\d+)\((\d+)\)", reward_line)
            if match:
                total_experience = int(match.group(1))
                experience_points = int(match.group(2))
                if self.steps is not None and self.steps > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Å –ø—Ä–æ—à–ª–æ–≥–æ –≤—ã–∑–æ–≤–∞
                    if self.last_step is not None and self.steps == self.last_step:
                        print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞.")
                        return
                    experience_per_step = experience_points / self.steps
                    self.experience_history.append(experience_per_step)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
                    self.last_step = self.steps
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ASCII-–≥—Ä–∞—Ñ–∏–∫—É
                    ascii_graph = self.generate_ascii_graph(self.experience_history[-40:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 40 –∑–Ω–∞—á–µ–Ω–∏–π
                    efficiency_message = "–í—ã–≥–æ–¥–Ω–æ" if experience_per_step > 22500 else "–ù–µ –≤—ã–≥–æ–¥–Ω–æ"
                    message_text = f"```\n–û–ø—ã—Ç –∑–∞ —à–∞–≥: {experience_per_step:.2f} ({efficiency_message})\n{ascii_graph}\n```"
                    print(message_text)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
                    if self.cave_message_id is None:
                        message = await self.client.send_message(self.cave_leader_id, message_text)
                        self.cave_message_id = message.id
                        if not self.cave_message_pinned:
                            await self.client.pin_message(self.cave_leader_id, message.id)
                            self.cave_message_pinned = True
                    else:
                        await self.client.edit_message(self.cave_leader_id, self.cave_message_id, message_text)
                else:
                    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Ä–∞–≤–Ω–æ 0 –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø—ã—Ç–µ.")
    def generate_ascii_graph(self, data):
        if not data:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        width = len(data)  # –®–∏—Ä–∏–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ—á–µ–∫
        height = 12
        max_value = max(data) if data else 1
        min_value = min(data) if data else 0
        value_range = max_value - min_value if max_value != min_value else 1  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        normalized = [(x - min_value) / value_range for x in data]
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        graph = []
        for y in range(height, 0, -1):
            line = []
            for x in normalized:
                scaled = x * (height - 1)
                if scaled >= y - 1:
                    line.append("‚ñà")
                else:
                    line.append("‚ñë")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–∏–º–≤–æ–ª
            graph.append("".join(line))
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–∏ –∏ –º–µ—Ç–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
        x_axis = "‚Äî" * width
        y_labels = [f"{int(min_value + (value_range * y/height)):6d}" for y in range(height, 0, -1)]  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        graph_with_labels = [f"{y_labels[i]} | {graph[i]}" for i in range(height)]
        graph_with_labels.append(f"       | {x_axis}")
        # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é –¥–ª—è –º–µ—Ç–æ–∫ –æ—Å–∏ X
        x_label_line = " " * 9
        for i in range(width):
            if i % 2 == 0:  # –°—Ç–∞–≤–∏–º –º–µ—Ç–∫—É –Ω–∞ –∫–∞–∂–¥–æ–º –≤—Ç–æ—Ä–æ–º —à–∞–≥–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                x_label_line += f"{i}"
            else:
                x_label_line += " "
        graph_with_labels.append(x_label_line)
        return "\n".join(graph_with_labels)
    async def vterminale(self):
        print("—Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
        self.is_nacheve_active = True
        self.cmd_altar = None  # –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        @self.client.on(events.NewMessage(chats=-1001284047611))
        async def handle_rf_info(event):
            print("–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç RF —á–∞—Ç–∞.")
            first_line = event.message.text.split('\n')[0]
            print(f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {first_line}")
            await self.parce_4v_logs(event.message.text)
        try:
            while self.is_nacheve_active:
                bot_message = await self.client.get_messages(self.bot_id, limit=1)
                if bot_message:
                    message = bot_message[0]
                    lstr = message.message.split('\n')
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:")
                    print(f"    lstr[0]: {lstr[0]}")
                    print(f"    lstr[-1]: {lstr[-1]}")
                    # –¢–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥/—Å–º–µ—Ä—Ç–µ–π/–ø–µ—Ä–µ—Ö–æ–¥–æ–≤
                    if await self.process_bot_message(lstr):
                        continue
                print("–û–∂–∏–¥–∞–Ω–∏–µ 6 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (—Ç–µ—Ä–º–∏–Ω–∞–ª)...")
                await asyncio.sleep(6)
        finally:
            self.client.remove_event_handler(handle_rf_info)
            self.is_nacheve_active = False
            print("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
